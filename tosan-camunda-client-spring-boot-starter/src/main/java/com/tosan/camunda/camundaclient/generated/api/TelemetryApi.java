/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.TelemetryConfigurationDto;
import com.tosan.camunda.camundaclient.generated.model.TelemetryDataDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Telemetry", description = "the Telemetry API")
public interface TelemetryApi {

    /**
     * POST /telemetry/configuration : Configure Telemetry
     * Configures whether Camunda receives data collection of the process engine setup and usage.
     *
     * @param telemetryConfigurationDto  (optional)
     * @return Request successful. (status code 204)
     *         or If the user who perform the operation is not a &lt;b&gt;camunda-admin&lt;/b&gt; user. (status code 401)
     */
    @Operation(
        operationId = "configureTelemetry",
        summary = "Configure Telemetry",
        description = "Configures whether Camunda receives data collection of the process engine setup and usage.",
        tags = { "Telemetry" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "401", description = "If the user who perform the operation is not a <b>camunda-admin</b> user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/telemetry/configuration",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> configureTelemetry(
        @Parameter(name = "TelemetryConfigurationDto", description = "") @Valid @RequestBody(required = false) TelemetryConfigurationDto telemetryConfigurationDto
    );


    /**
     * GET /telemetry/configuration : Fetch Telemetry Configuration
     * Fetches Telemetry Configuration.
     *
     * @return Request successful. (status code 200)
     *         or If the user who perform the operation is not a &lt;b&gt;camunda-admin&lt;/b&gt; user. (status code 401)
     */
    @Operation(
        operationId = "getTelemetryConfiguration",
        summary = "Fetch Telemetry Configuration",
        description = "Fetches Telemetry Configuration.",
        tags = { "Telemetry" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TelemetryConfigurationDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "If the user who perform the operation is not a <b>camunda-admin</b> user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/telemetry/configuration",
        produces = { "application/json" }
    )
    ResponseEntity<TelemetryConfigurationDto> getTelemetryConfiguration(
        
    );


    /**
     * GET /telemetry/data : Fetch Telemetry Data
     * Fetches Telemetry Data.
     *
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "getTelemetryData",
        summary = "Fetch Telemetry Data",
        description = "Fetches Telemetry Data.",
        tags = { "Telemetry" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TelemetryDataDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/telemetry/data",
        produces = { "application/json" }
    )
    ResponseEntity<TelemetryDataDto> getTelemetryData(
        
    );

}
