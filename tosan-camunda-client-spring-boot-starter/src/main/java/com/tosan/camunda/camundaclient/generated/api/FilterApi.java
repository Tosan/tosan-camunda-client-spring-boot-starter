/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.CreateFilterDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.FilterDto;
import com.tosan.camunda.camundaclient.generated.model.ResourceOptionsDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface FilterApi {

    Logger log = LoggerFactory.getLogger(FilterApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Create Filter", description = "Creates a new filter.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FilterDto.class))),
        
        @ApiResponse(responseCode = "400", description = " Filter was invalid. See [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to create a new filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/create",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<FilterDto> createFilter(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CreateFilterDto body);


    @Operation(summary = "Delete Filter", description = "Deletes a filter by id.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to delete this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFilter(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to be deleted.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Execute Filter Count", description = "Executes the saved query of the filter by id and returns the count.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> executeFilterCount(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to execute.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Execute Filter List", description = "Executes the saved query of the filter by id and returns the result list.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful. A JSON array containing JSON objects corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> executeFilterList(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to execute.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Execute Filter Single Result", description = "Executes the saved query of the filter by id and returns the single result.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful. A JSON object corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "204", description = "Request successful, but the result was empty. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = " The executed filter returned more than one single result. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}/singleResult",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> executeFilterSingleResult(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to execute.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Filter Resource Options", description = "The OPTIONS request allows you to check for the set of available operations  that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/filter",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> filterResourceOptions();


    @Operation(summary = "Filter Resource Options", description = "The OPTIONS request allows you to check for the set of available operations  that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/filter/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> filterResourceOptionsSingle(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to be checked.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Filter Count", description = "Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set when using the  [Get Filters](https://docs.camunda.org/manual/7.17/reference/rest/filter/get-query/) method.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = " Returned if some of the query parameters are invalid, for example if a `sortOrder`parameter is supplied, but no `sortBy`, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getFilterCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the filter." ,schema=@Schema()) @Valid @RequestParam(value = "filterId", required = false) String filterId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the resource type of the filter, e.g., `Task`." ,schema=@Schema()) @Valid @RequestParam(value = "resourceType", required = false) String resourceType, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name of the filter." ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "nameLike", required = false) String nameLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by the user id of the owner of the filter." ,schema=@Schema()) @Valid @RequestParam(value = "owner", required = false) String owner);


    @Operation(summary = "Get Filters", description = "Queries for a list of filters using a list of parameters. The size of the result set can be retrieved by using the [Get Filter Count](https://docs.camunda.org/manual/7.17/reference/rest/filter/get-query-count/) method.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FilterDto.class)))),
        
        @ApiResponse(responseCode = "400", description = " Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FilterDto>> getFilterList(@Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the filter." ,schema=@Schema()) @Valid @RequestParam(value = "filterId", required = false) String filterId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the resource type of the filter, e.g., `Task`." ,schema=@Schema()) @Valid @RequestParam(value = "resourceType", required = false) String resourceType, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name of the filter." ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "nameLike", required = false) String nameLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by the user id of the owner of the filter." ,schema=@Schema()) @Valid @RequestParam(value = "owner", required = false) String owner, @Parameter(in = ParameterIn.QUERY, description = "If set to `true`, each filter result will contain an `itemCount` property with the number of items matched by the filter itself." ,schema=@Schema()) @Valid @RequestParam(value = "itemCount", required = false) Boolean itemCount, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "filterId", "resourceType", "name", "owner" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Get Single Filter", description = "Retrieves a single filter by id, according to the `Filter` interface in the engine.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FilterDto.class))),
        
        @ApiResponse(responseCode = "403", description = "The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FilterDto> getSingleFilter(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "If set to `true`, each filter result will contain an `itemCount` property with the number of items matched by the filter itself." ,schema=@Schema()) @Valid @RequestParam(value = "itemCount", required = false) Boolean itemCount);


    @Operation(summary = "Execute Filter Count (POST)", description = "Executes the saved query of the filter by id and returns the count. This method is slightly more powerful then the [Get Execute Filter Count](https://docs.camunda.org/manual/7.17/reference/rest/filter/get-execute-count/)  method because it allows to extend the saved query of the filter.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = " The extending query was invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}/count",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CountResultDto> postExecuteFilterCount(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to execute.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource.", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "Execute Filter List (POST)", description = "Executes the saved query of the filter by id and returns the result list. This method is slightly more powerful then the  [Get Execute FilterList](https://docs.camunda.org/manual/7.17/reference/rest/filter/get-execute-list/) method because it allows to extend the saved query of the filter.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful. A JSON array containing JSON objects corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))),
        
        @ApiResponse(responseCode = "400", description = " The extending query was invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}/list",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Object>> postExecuteFilterList(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to execute.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.DEFAULT, description = "A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource.", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "Execute Filter Single Result (POST)", description = "Executes the saved query of the filter by id and returns the single result. This method is slightly more powerful then the [Get Execute Filter Single Result](https://docs.camunda.org/manual/7.17/reference/rest/filter/get-execute-single-result/) method because it allows to extend the saved query of the filter.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful. A JSON object corresponding to the corresponding entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "204", description = "Request successful, but the result was empty. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = " The executed filter returned more than one single result or the extending query was invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to read this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}/singleResult",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> postExecuteFilterSingleResult(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to execute.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource.", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "Update Filter", description = "Updates an existing filter.", tags={ "Filter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = " Filter was invalid. See [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = " The authenticated user is unauthorized to update this filter. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = " Filter cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/filter/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateFilter(@Parameter(in = ParameterIn.PATH, description = "The id of the filter to be updated.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CreateFilterDto body);

}

