/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CompleteExternalTaskDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.ExtendLockOnExternalTaskDto;
import com.tosan.camunda.camundaclient.generated.model.ExternalTaskBpmnError;
import com.tosan.camunda.camundaclient.generated.model.ExternalTaskDto;
import com.tosan.camunda.camundaclient.generated.model.ExternalTaskFailureDto;
import com.tosan.camunda.camundaclient.generated.model.ExternalTaskQueryDto;
import com.tosan.camunda.camundaclient.generated.model.FetchExternalTasksDto;
import com.tosan.camunda.camundaclient.generated.model.LockExternalTaskDto;
import com.tosan.camunda.camundaclient.generated.model.LockedExternalTaskDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.PriorityDto;
import com.tosan.camunda.camundaclient.generated.model.RetriesDto;
import com.tosan.camunda.camundaclient.generated.model.SetRetriesForExternalTasksDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "External Task", description = "the External Task API")
public interface ExternalTaskApi {

    /**
     * POST /external-task/{id}/complete : Complete
     * Completes an external task by id and updates process variables.
     *
     * @param id The id of the task to complete. (required)
     * @param completeExternalTaskDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the task&#39;s most recent lock was not acquired by the provided worker. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or Returned if the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "completeExternalTaskResource",
        summary = "Complete",
        description = "Completes an external task by id and updates process variables.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the task's most recent lock was not acquired by the provided worker. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Returned if the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/{id}/complete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> completeExternalTaskResource(
        @Parameter(name = "id", description = "The id of the task to complete.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CompleteExternalTaskDto", description = "") @Valid @RequestBody(required = false) CompleteExternalTaskDto completeExternalTaskDto
    );


    /**
     * POST /external-task/{id}/extendLock : Extend Lock
     * Extends the timeout of the lock by a given amount of time.
     *
     * @param id The id of the external task. (required)
     * @param extendLockOnExternalTaskDto  (optional)
     * @return Request successful. (status code 204)
     *         or In case the new lock duration is negative or the external task is not locked by the given worker or not  locked at all, an exception of type &#x60;InvalidRequestException&#x60; is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "extendLock",
        summary = "Extend Lock",
        description = "Extends the timeout of the lock by a given amount of time.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "In case the new lock duration is negative or the external task is not locked by the given worker or not  locked at all, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/{id}/extendLock",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> extendLock(
        @Parameter(name = "id", description = "The id of the external task.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ExtendLockOnExternalTaskDto", description = "") @Valid @RequestBody(required = false) ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto
    );


    /**
     * POST /external-task/fetchAndLock : Fetch and Lock
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     *
     * @param fetchExternalTasksDto  (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "fetchAndLock",
        summary = "Fetch and Lock",
        description = "Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LockedExternalTaskDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/fetchAndLock",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<LockedExternalTaskDto>> fetchAndLock(
        @Parameter(name = "FetchExternalTasksDto", description = "") @Valid @RequestBody(required = false) FetchExternalTasksDto fetchExternalTasksDto
    );


    /**
     * GET /external-task/{id} : Get
     * Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
     *
     * @param id The id of the external task to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or External task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getExternalTask",
        summary = "Get",
        description = "Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExternalTaskDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "External task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/external-task/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ExternalTaskDto> getExternalTask(
        @Parameter(name = "id", description = "The id of the external task to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /external-task/{id}/errorDetails : Get Error Details
     * Retrieves the error details in the context of a running external task by id.
     *
     * @param id The id of the external task for which the error details should be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Request successful. In case the external task has no error details. (status code 204)
     *         or An external task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "getExternalTaskErrorDetails",
        summary = "Get Error Details",
        description = "Retrieves the error details in the context of a running external task by id.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "204", description = "Request successful. In case the external task has no error details."),
            @ApiResponse(responseCode = "500", description = "An external task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/external-task/{id}/errorDetails",
        produces = { "text/plain", "application/json" }
    )
    ResponseEntity<String> getExternalTaskErrorDetails(
        @Parameter(name = "id", description = "The id of the external task for which the error details should be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /external-task : Get List
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.17/reference/rest/external-task/get-query-count/) method.
     *
     * @param externalTaskId Filter by an external task&#39;s id. (optional)
     * @param externalTaskIdIn Filter by the comma-separated list of external task ids. (optional)
     * @param topicName Filter by an external task topic. (optional)
     * @param workerId Filter by the id of the worker that the task was most recently locked by. (optional)
     * @param locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param activityId Filter by the id of the activity that an external task is created for. (optional)
     * @param activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)
     * @param executionId Filter by the id of the execution that an external task belongs to. (optional)
     * @param processInstanceId Filter by the id of the process instance that an external task belongs to. (optional)
     * @param processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)
     * @param processDefinitionId Filter by the id of the process definition that an external task belongs to. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getExternalTasks",
        summary = "Get List",
        description = "Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.17/reference/rest/external-task/get-query-count/) method.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ExternalTaskDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/external-task",
        produces = { "application/json" }
    )
    ResponseEntity<List<ExternalTaskDto>> getExternalTasks(
        @Parameter(name = "externalTaskId", description = "Filter by an external task's id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId,
        @Parameter(name = "externalTaskIdIn", description = "Filter by the comma-separated list of external task ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskIdIn", required = false) String externalTaskIdIn,
        @Parameter(name = "topicName", description = "Filter by an external task topic.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "topicName", required = false) String topicName,
        @Parameter(name = "workerId", description = "Filter by the id of the worker that the task was most recently locked by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workerId", required = false) String workerId,
        @Parameter(name = "locked", description = "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "locked", required = false) Boolean locked,
        @Parameter(name = "notLocked", description = "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notLocked", required = false) Boolean notLocked,
        @Parameter(name = "withRetriesLeft", description = "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft,
        @Parameter(name = "noRetriesLeft", description = "Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "noRetriesLeft", required = false) Boolean noRetriesLeft,
        @Parameter(name = "lockExpirationAfter", description = "Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lockExpirationAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lockExpirationAfter,
        @Parameter(name = "lockExpirationBefore", description = "Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lockExpirationBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lockExpirationBefore,
        @Parameter(name = "activityId", description = "Filter by the id of the activity that an external task is created for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "activityIdIn", description = "Filter by the comma-separated list of ids of the activities that an external task is created for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "executionId", description = "Filter by the id of the execution that an external task belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processInstanceId", description = "Filter by the id of the process instance that an external task belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIdIn", description = "Filter by a comma-separated list of process instance ids that an external task may belong to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn,
        @Parameter(name = "processDefinitionId", description = "Filter by the id of the process definition that an external task belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "active", description = "Only include active tasks. Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended tasks. Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "priorityHigherThanOrEquals", description = "Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals,
        @Parameter(name = "priorityLowerThanOrEquals", description = "Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /external-task/count : Get List Count
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.17/reference/rest/external-task/get-query/) method.
     *
     * @param externalTaskId Filter by an external task&#39;s id. (optional)
     * @param externalTaskIdIn Filter by the comma-separated list of external task ids. (optional)
     * @param topicName Filter by an external task topic. (optional)
     * @param workerId Filter by the id of the worker that the task was most recently locked by. (optional)
     * @param locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param activityId Filter by the id of the activity that an external task is created for. (optional)
     * @param activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)
     * @param executionId Filter by the id of the execution that an external task belongs to. (optional)
     * @param processInstanceId Filter by the id of the process instance that an external task belongs to. (optional)
     * @param processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)
     * @param processDefinitionId Filter by the id of the process definition that an external task belongs to. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getExternalTasksCount",
        summary = "Get List Count",
        description = "Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.17/reference/rest/external-task/get-query/) method.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/external-task/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getExternalTasksCount(
        @Parameter(name = "externalTaskId", description = "Filter by an external task's id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId,
        @Parameter(name = "externalTaskIdIn", description = "Filter by the comma-separated list of external task ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskIdIn", required = false) String externalTaskIdIn,
        @Parameter(name = "topicName", description = "Filter by an external task topic.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "topicName", required = false) String topicName,
        @Parameter(name = "workerId", description = "Filter by the id of the worker that the task was most recently locked by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workerId", required = false) String workerId,
        @Parameter(name = "locked", description = "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "locked", required = false) Boolean locked,
        @Parameter(name = "notLocked", description = "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notLocked", required = false) Boolean notLocked,
        @Parameter(name = "withRetriesLeft", description = "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft,
        @Parameter(name = "noRetriesLeft", description = "Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "noRetriesLeft", required = false) Boolean noRetriesLeft,
        @Parameter(name = "lockExpirationAfter", description = "Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lockExpirationAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lockExpirationAfter,
        @Parameter(name = "lockExpirationBefore", description = "Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lockExpirationBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lockExpirationBefore,
        @Parameter(name = "activityId", description = "Filter by the id of the activity that an external task is created for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "activityIdIn", description = "Filter by the comma-separated list of ids of the activities that an external task is created for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "executionId", description = "Filter by the id of the execution that an external task belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processInstanceId", description = "Filter by the id of the process instance that an external task belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIdIn", description = "Filter by a comma-separated list of process instance ids that an external task may belong to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn,
        @Parameter(name = "processDefinitionId", description = "Filter by the id of the process definition that an external task belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "active", description = "Only include active tasks. Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended tasks. Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "priorityHigherThanOrEquals", description = "Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals,
        @Parameter(name = "priorityLowerThanOrEquals", description = "Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals
    );


    /**
     * GET /external-task/topic-names : Get External Task Topic Names
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     *
     * @param withLockedTasks Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withUnlockedTasks Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. (status code 400)
     */
    @Operation(
        operationId = "getTopicNames",
        summary = "Get External Task Topic Names",
        description = "Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/external-task/topic-names",
        produces = { "application/json" }
    )
    ResponseEntity<List<String>> getTopicNames(
        @Parameter(name = "withLockedTasks", description = "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withLockedTasks", required = false) Boolean withLockedTasks,
        @Parameter(name = "withUnlockedTasks", description = "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withUnlockedTasks", required = false) Boolean withUnlockedTasks,
        @Parameter(name = "withRetriesLeft", description = "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be `true`, as `false` matches any external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft
    );


    /**
     * POST /external-task/{id}/bpmnError : Handle BPMN Error
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     *
     * @param id The id of the external task in which context a BPMN error is reported. (required)
     * @param externalTaskBpmnError  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the task&#39;s most recent lock was not acquired by the provided worker.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or Returned if the corresponding process instance could not be resumed successfully.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "handleExternalTaskBpmnError",
        summary = "Handle BPMN Error",
        description = "Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the task's most recent lock was not acquired by the provided worker.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Returned if the corresponding process instance could not be resumed successfully.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/{id}/bpmnError",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> handleExternalTaskBpmnError(
        @Parameter(name = "id", description = "The id of the external task in which context a BPMN error is reported.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ExternalTaskBpmnError", description = "") @Valid @RequestBody(required = false) ExternalTaskBpmnError externalTaskBpmnError
    );


    /**
     * POST /external-task/{id}/failure : Handle Failure
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     *
     * @param id The id of the external task to report a failure for. (required)
     * @param externalTaskFailureDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the task&#39;s most recent lock was not acquired by the provided worker. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or Returned if the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "handleFailure",
        summary = "Handle Failure",
        description = "Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the task's most recent lock was not acquired by the provided worker. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Returned if the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/{id}/failure",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> handleFailure(
        @Parameter(name = "id", description = "The id of the external task to report a failure for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ExternalTaskFailureDto", description = "") @Valid @RequestBody(required = false) ExternalTaskFailureDto externalTaskFailureDto
    );


    /**
     * POST /external-task/{id}/lock
     * Lock an external task by a given id for a specified worker and amount of time.
     *
     * @param id The id of the external task. (required)
     * @param lockExternalTaskDto  (optional)
     * @return Request successful. (status code 204)
     *         or In case the lock duration is negative or the external task is already locked by a different worker, an exception of type &#x60;InvalidRequestException&#x60; is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "lock",
        description = "Lock an external task by a given id for a specified worker and amount of time.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "In case the lock duration is negative or the external task is already locked by a different worker, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/{id}/lock",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> lock(
        @Parameter(name = "id", description = "The id of the external task.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "LockExternalTaskDto", description = "") @Valid @RequestBody(required = false) LockExternalTaskDto lockExternalTaskDto
    );


    /**
     * POST /external-task : Get List (POST)
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.17/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param externalTaskQueryDto  (optional)
     * @return Request successful. The Response is a JSON array of external task objects. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryExternalTasks",
        summary = "Get List (POST)",
        description = "Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.17/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The Response is a JSON array of external task objects.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ExternalTaskDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<ExternalTaskDto>> queryExternalTasks(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "ExternalTaskQueryDto", description = "") @Valid @RequestBody(required = false) ExternalTaskQueryDto externalTaskQueryDto
    );


    /**
     * POST /external-task/count : Get List Count (POST)
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.17/reference/rest/external-task/post-query/) method.
     *
     * @param externalTaskQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryExternalTasksCount",
        summary = "Get List Count (POST)",
        description = "Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.17/reference/rest/external-task/post-query/) method.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryExternalTasksCount(
        @Parameter(name = "ExternalTaskQueryDto", description = "") @Valid @RequestBody(required = false) ExternalTaskQueryDto externalTaskQueryDto
    );


    /**
     * PUT /external-task/{id}/priority : Set Priority
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     *
     * @param id The id of the external task to set the priority for. (required)
     * @param priorityDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "setExternalTaskResourcePriority",
        summary = "Set Priority",
        description = "Sets the priority of an existing external task by id. The default value of a priority is 0.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/external-task/{id}/priority",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setExternalTaskResourcePriority(
        @Parameter(name = "id", description = "The id of the external task to set the priority for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "PriorityDto", description = "") @Valid @RequestBody(required = false) PriorityDto priorityDto
    );


    /**
     * PUT /external-task/{id}/retries : Set Retries
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     *
     * @param id The id of the external task to set the number of retries for. (required)
     * @param retriesDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or In case the number of retries is negative or null, an exception of type &#x60;InvalidRequestException&#x60; is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "setExternalTaskResourceRetries",
        summary = "Set Retries",
        description = "Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "In case the number of retries is negative or null, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/external-task/{id}/retries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setExternalTaskResourceRetries(
        @Parameter(name = "id", description = "The id of the external task to set the number of retries for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RetriesDto", description = "") @Valid @RequestBody(required = false) RetriesDto retriesDto
    );


    /**
     * PUT /external-task/retries : Set Retries Sync
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     *
     * @param setRetriesForExternalTasksDto  (optional)
     * @return Request successful. (status code 204)
     *         or In case the number of retries is negative or null, an exception of type &#x60;InvalidRequestException&#x60; is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,  e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "setExternalTaskRetries",
        summary = "Set Retries Sync",
        description = "Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "In case the number of retries is negative or null, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,  e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/external-task/retries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setExternalTaskRetries(
        @Parameter(name = "SetRetriesForExternalTasksDto", description = "") @Valid @RequestBody(required = false) SetRetriesForExternalTasksDto setRetriesForExternalTasksDto
    );


    /**
     * POST /external-task/retries-async : Set Retries Async
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     *
     * @param setRetriesForExternalTasksDto  (optional)
     * @return Request successful. (status code 200)
     *         or If neither externalTaskIds nor externalTaskQuery are present or externalTaskIds contains null value or  the number of retries is negative or null, an exception of type &#x60;InvalidRequestException&#x60; is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,  e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "setExternalTaskRetriesAsyncOperation",
        summary = "Set Retries Async",
        description = "Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "If neither externalTaskIds nor externalTaskQuery are present or externalTaskIds contains null value or  the number of retries is negative or null, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,  e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/retries-async",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> setExternalTaskRetriesAsyncOperation(
        @Parameter(name = "SetRetriesForExternalTasksDto", description = "") @Valid @RequestBody(required = false) SetRetriesForExternalTasksDto setRetriesForExternalTasksDto
    );


    /**
     * POST /external-task/{id}/unlock : Unlock
     * Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
     *
     * @param id The id of the external task to unlock. (required)
     * @return Request successful. (status code 204)
     *         or Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "unlock",
        summary = "Unlock",
        description = "Unlocks an external task by id. Clears the task's lock expiration time and worker id.",
        tags = { "External Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/external-task/{id}/unlock",
        produces = { "application/json" }
    )
    ResponseEntity<Void> unlock(
        @Parameter(name = "id", description = "The id of the external task to unlock.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );

}
