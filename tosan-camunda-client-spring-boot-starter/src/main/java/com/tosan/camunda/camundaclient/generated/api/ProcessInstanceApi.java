/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.ActivityInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.AuthorizationExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CorrelationMessageAsyncDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.DeleteProcessInstancesDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.PatchVariablesDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceModificationDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceQueryDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceSuspensionStateAsyncDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceSuspensionStateDto;
import org.springframework.core.io.Resource;
import com.tosan.camunda.camundaclient.generated.model.SetJobRetriesByProcessDto;
import com.tosan.camunda.camundaclient.generated.model.SetVariablesAsyncDto;
import com.tosan.camunda.camundaclient.generated.model.SuspensionStateDto;
import com.tosan.camunda.camundaclient.generated.model.VariableValueDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface ProcessInstanceApi {

    Logger log = LoggerFactory.getLogger(ProcessInstanceApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Correlate Message Async (POST)", description = "Correlates a message asynchronously to executions that are waiting for this message.  Messages will not be correlated to process definition-level start message events to start process instances.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request * If none of `processInstanceIds`, `processInstanceQuery`, and `historicProcessInstanceQuery` is given * If no process instance ids where found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "Returned if the user is not allowed to create the batch.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/message-async",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> correlateMessageAsyncOperation(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CorrelationMessageAsyncDto body);


    @Operation(summary = "Delete Async Historic Query Based (POST)", description = "Deletes a set of process instances asynchronously (batch) based on a historic process instance query.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor historicProcessInstanceQuery is present", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/delete-historic-query-based",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> deleteAsyncHistoricQueryBased(@Parameter(in = ParameterIn.DEFAULT, description = "**Unallowed property**: `processInstanceQuery`", schema=@Schema()) @Valid @RequestBody DeleteProcessInstancesDto body);


    @Operation(summary = "Delete", description = "Deletes a running process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "404", description = "Not found Process instance with given id does not exist. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProcessInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to be deleted.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "If set to true, the custom listeners will be skipped." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "skipCustomListeners", required = false, defaultValue="false") Boolean skipCustomListeners, @Parameter(in = ParameterIn.QUERY, description = "If set to true, the input/output mappings will be skipped." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "skipIoMappings", required = false, defaultValue="false") Boolean skipIoMappings, @Parameter(in = ParameterIn.QUERY, description = "If set to true, subprocesses related to deleted processes will be skipped." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "skipSubprocesses", required = false, defaultValue="false") Boolean skipSubprocesses, @Parameter(in = ParameterIn.QUERY, description = "If set to false, the request will still be successful if the process id is not found." ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "failIfNotExists", required = false, defaultValue="true") Boolean failIfNotExists);


    @Operation(summary = "Delete Process Variable", description = "Deletes a variable of a process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful.") })
    @RequestMapping(value = "/process-instance/{id}/variables/{varName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProcessInstanceVariable(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to delete the variable from.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The name of the variable to delete.", required=true, schema=@Schema()) @PathVariable("varName") String varName);


    @Operation(summary = "Delete Async (POST)", description = "Deletes multiple process instances asynchronously (batch).", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/delete",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> deleteProcessInstancesAsyncOperation(@Parameter(in = ParameterIn.DEFAULT, description = "**Unallowed property**: `historicProcessInstanceQuery`", schema=@Schema()) @Valid @RequestBody DeleteProcessInstancesDto body);


    @Operation(summary = "Get Activity Instance", description = "Retrieves an Activity Instance (Tree) for a given process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ActivityInstanceDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Process instance with given id does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/activity-instances",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ActivityInstanceDto> getActivityInstanceTree(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance for which the activity instance should be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Process Instance", description = "Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Process instance with given id does not exist. See the  [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProcessInstanceDto> getProcessInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Process Variable", description = "Retrieves a variable of a given process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Variable with given id does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/variables/{varName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VariableValueDto> getProcessInstanceVariable(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to retrieve the variable for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The name of the variable to retrieve.", required=true, schema=@Schema()) @PathVariable("varName") String varName, @Parameter(in = ParameterIn.QUERY, description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine." ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "deserializeValue", required = false, defaultValue="true") Boolean deserializeValue);


    @Operation(summary = "Get Process Variable (Binary)", description = "Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.         For binary variables or files without any MIME type information, a byte stream is returned.         File variables with MIME type information are returned as the saved type.         Additionally, for file variables the Content-Disposition header will be set.", content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request A Process Variable with the given id exists but does not serialize as binary data.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found A Process Variable with the given id does not exist. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/variables/{varName}/data",
        produces = { "application/octet-stream", "text/plain", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getProcessInstanceVariableBinary(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to retrieve the variable for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The name of the variable to retrieve.", required=true, schema=@Schema()) @PathVariable("varName") String varName);


    @Operation(summary = "Get Process Variables", description = "Retrieves all variables of a given process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VariableValueDto.class)))),
        
        @ApiResponse(responseCode = "500", description = "Process instance with given id does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/variables",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, VariableValueDto>> getProcessInstanceVariables(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to retrieve the variables from.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine." ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "deserializeValues", required = false, defaultValue="true") Boolean deserializeValues);


    @Operation(summary = "Get List", description = "Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProcessInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProcessInstanceDto>> getProcessInstances(@Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "instanceId", "definitionKey", "definitionId", "tenantId", "businessKey" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of process instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key." ,schema=@Schema()) @Valid @RequestParam(value = "businessKey", required = false) String businessKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "businessKeyLike", required = false) String businessKeyLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the deployment the id belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the key of the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyNotIn", required = false) String processDefinitionKeyNotIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the deployment the id belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superProcessInstance", required = false) String superProcessInstance, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "subProcessInstance", required = false) String subProcessInstance, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superCaseInstance", required = false) String superCaseInstance, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "subCaseInstance", required = false) String subCaseInstance, @Parameter(in = ParameterIn.QUERY, description = "Only include active process instances. Value may only be true, as false is the default behavior." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "active", required = false, defaultValue="false") Boolean active, @Parameter(in = ParameterIn.QUERY, description = "Only include suspended process instances. Value may only be true, as false is the default behavior." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "suspended", required = false, defaultValue="false") Boolean suspended, @Parameter(in = ParameterIn.QUERY, description = "Filter by presence of incidents. Selects only process instances that have an incident." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "withIncident", required = false, defaultValue="false") Boolean withIncident, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident id." ,schema=@Schema()) @Valid @RequestParam(value = "incidentId", required = false) String incidentId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types." ,schema=@Schema()) @Valid @RequestParam(value = "incidentType", required = false) String incidentType, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message. Exact match." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which belong to no tenant." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "withoutTenantId", required = false, defaultValue="false") Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which process definition has no tenant id." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "processDefinitionWithoutTenantId", required = false, defaultValue="false") Boolean processDefinitionWithoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids." ,schema=@Schema()) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict the query to all process instances that are top level process instances." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "rootProcessInstances", required = false, defaultValue="false") Boolean rootProcessInstances, @Parameter(in = ParameterIn.QUERY, description = "Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "leafProcessInstances", required = false, defaultValue="false") Boolean leafProcessInstances, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters." ,schema=@Schema()) @Valid @RequestParam(value = "variables", required = false) String variables, @Parameter(in = ParameterIn.QUERY, description = "Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false, defaultValue="false") Boolean variableNamesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false, defaultValue="false") Boolean variableValuesIgnoreCase);


    @Operation(summary = "Get List Count", description = "Queries for the number of process instances that fulfill given parameters.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example an invalid operator for variable comparison is used.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getProcessInstancesCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of process instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key." ,schema=@Schema()) @Valid @RequestParam(value = "businessKey", required = false) String businessKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "businessKeyLike", required = false) String businessKeyLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the deployment the id belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the key of the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyNotIn", required = false) String processDefinitionKeyNotIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the deployment the id belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superProcessInstance", required = false) String superProcessInstance, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "subProcessInstance", required = false) String subProcessInstance, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superCaseInstance", required = false) String superCaseInstance, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "subCaseInstance", required = false) String subCaseInstance, @Parameter(in = ParameterIn.QUERY, description = "Only include active process instances. Value may only be true, as false is the default behavior." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "active", required = false, defaultValue="false") Boolean active, @Parameter(in = ParameterIn.QUERY, description = "Only include suspended process instances. Value may only be true, as false is the default behavior." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "suspended", required = false, defaultValue="false") Boolean suspended, @Parameter(in = ParameterIn.QUERY, description = "Filter by presence of incidents. Selects only process instances that have an incident." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "withIncident", required = false, defaultValue="false") Boolean withIncident, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident id." ,schema=@Schema()) @Valid @RequestParam(value = "incidentId", required = false) String incidentId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types." ,schema=@Schema()) @Valid @RequestParam(value = "incidentType", required = false) String incidentType, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message. Exact match." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which belong to no tenant." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "withoutTenantId", required = false, defaultValue="false") Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which process definition has no tenant id." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "processDefinitionWithoutTenantId", required = false, defaultValue="false") Boolean processDefinitionWithoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids." ,schema=@Schema()) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict the query to all process instances that are top level process instances." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "rootProcessInstances", required = false, defaultValue="false") Boolean rootProcessInstances, @Parameter(in = ParameterIn.QUERY, description = "Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "leafProcessInstances", required = false, defaultValue="false") Boolean leafProcessInstances, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters." ,schema=@Schema()) @Valid @RequestParam(value = "variables", required = false) String variables, @Parameter(in = ParameterIn.QUERY, description = "Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false, defaultValue="false") Boolean variableNamesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal." ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false, defaultValue="false") Boolean variableValuesIgnoreCase);


    @Operation(summary = "Modify Process Instance Execution State", description = "Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "At least one modification instruction misses required parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The modification cannot be performed, for example because it starts a failing activity.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/modification",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> modifyProcessInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to modify.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProcessInstanceModificationDto body);


    @Operation(summary = "Modify Process Instance Execution State Async", description = "Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-modification/).", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request At least one modification instruction misses required parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden If the user is not allowed to execute batches. See the Introduction for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The modification cannot be performed, for example because it starts a failing activity.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/modification-async",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> modifyProcessInstanceAsyncOperation(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to modify.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProcessInstanceModificationDto body);


    @Operation(summary = "Update/Delete Process Variables", description = "Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "Bad Request The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Update or delete could not be executed, for example because the process instance does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/variables",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> modifyProcessInstanceVariables(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to set variables for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody PatchVariablesDto body);


    @Operation(summary = "Get List (POST)", description = "Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProcessInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<ProcessInstanceDto>> queryProcessInstances(@Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProcessInstanceQueryDto body);


    @Operation(summary = "Get List Count (POST)", description = "Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/count",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CountResultDto> queryProcessInstancesCount(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProcessInstanceQueryDto body);


    @Operation(summary = "Update Process Variable", description = "Sets a variable of a given process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "Bad Request The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/variables/{varName}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setProcessInstanceVariable(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to set the variable for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The name of the variable to set.", required=true, schema=@Schema()) @PathVariable("varName") String varName, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody VariableValueDto body);


    @Operation(summary = "Update Process Variable (Binary)", description = "Sets the serialized value for a binary variable or the binary value for a file variable.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "Bad Request The variable value or type is invalid, for example if no filename is set.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/{id}/variables/{varName}/data",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> setProcessInstanceVariableBinary(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to retrieve the variable for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The name of the variable to retrieve.", required=true, schema=@Schema()) @PathVariable("varName") String varName, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile data, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema(allowableValues={ "Bytes", "File" }
)) @RequestParam(value="valueType", required=false)  String valueType);


    @Operation(summary = "Set Job Retries Async (POST)", description = "Create a batch to set retries of jobs associated with given processes asynchronously.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present. Or if the retry count is not specified.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/job-retries",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> setRetriesByProcess(@Parameter(in = ParameterIn.DEFAULT, description = "Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets.**Unallowed property**: `historicProcessInstanceQuery`", schema=@Schema()) @Valid @RequestBody SetJobRetriesByProcessDto body);


    @Operation(summary = "Set Job Retries Async Historic Query Based (POST)", description = "Create a batch to set retries of jobs asynchronously based on a historic process instance query.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor historicProcessInstanceQuery is present. Or if the retry count is not specified.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/job-retries-historic-query-based",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> setRetriesByProcessHistoricQueryBased(@Parameter(in = ParameterIn.DEFAULT, description = "Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets.**Unallowed property**: `processInstanceQuery`", schema=@Schema()) @Valid @RequestBody SetJobRetriesByProcessDto body);


    @Operation(summary = "Set Variables Async (POST)", description = "Update or create runtime process variables in the root scope of process instances.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request * The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported * If none of `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery` is given * If no or an empty array of `variables` is given * If no process instance ids where found * If a transient variable is set * If the engine config flag `javaSerializationFormatEnabled` is `false` and a Java serialized variable is given", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "Returned if the user is not allowed to create the batch.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/variables-async",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> setVariablesAsyncOperation(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SetVariablesAsyncDto body);


    @Operation(summary = "Activate/Suspend In Group", description = "Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the request parameters are invalid, for example if the provided processDefinitionId or processDefinitionKey parameter is null.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/suspended",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSuspensionState(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProcessInstanceSuspensionStateDto body);


    @Operation(summary = "Activate/Suspend In Batch", description = "Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the request parameters are invalid, for example if the provided processDefinitionId or processDefinitionKey parameter is null.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/process-instance/suspended-async",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> updateSuspensionStateAsyncOperation(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProcessInstanceSuspensionStateAsyncDto body);


    @Operation(summary = "Activate/Suspend Process Instance By Id", description = "Activates or suspends a given process instance by id.", tags={ "Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful.") })
    @RequestMapping(value = "/process-instance/{id}/suspended",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSuspensionStateById(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance to activate or suspend.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SuspensionStateDto body);

}

