/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricJobLogDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricJobLogQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Job Log", description = "the Historic Job Log API")
public interface HistoricJobLogApi {

    /**
     * GET /history/job-log/{id} : Get Job Log
     * Retrieves a historic job log by id.
     *
     * @param id The id of the log entry. (required)
     * @return Request successful. (status code 200)
     *         or Historic job log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricJobLog",
        summary = "Get Job Log",
        description = "Retrieves a historic job log by id.",
        tags = { "Historic Job Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricJobLogDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Historic job log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/job-log/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<HistoricJobLogDto> getHistoricJobLog(
        @Parameter(name = "id", description = "The id of the log entry.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/job-log : Get Job Logs
     * Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
     *
     * @param logId Filter by historic job log id. (optional)
     * @param jobId Filter by job id. (optional)
     * @param jobExceptionMessage Filter by job exception message. (optional)
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param jobDefinitionType Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param jobDefinitionConfiguration Filter by job definition configuration. (optional)
     * @param activityIdIn Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param failedActivityIdIn Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param executionIdIn Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Filter by process definition key. (optional)
     * @param deploymentId Filter by deployment id. (optional)
     * @param tenantIdIn Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param withoutTenantId Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param hostname Filter by hostname. (optional)
     * @param jobPriorityLowerThanOrEquals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param jobPriorityHigherThanOrEquals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricJobLogs",
        summary = "Get Job Logs",
        description = "Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.",
        tags = { "Historic Job Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricJobLogDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/job-log",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricJobLogDto>> getHistoricJobLogs(
        @Parameter(name = "logId", description = "Filter by historic job log id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "logId", required = false) String logId,
        @Parameter(name = "jobId", description = "Filter by job id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) String jobId,
        @Parameter(name = "jobExceptionMessage", description = "Filter by job exception message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobExceptionMessage", required = false) String jobExceptionMessage,
        @Parameter(name = "jobDefinitionId", description = "Filter by job definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "jobDefinitionType", description = "Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionType", required = false) String jobDefinitionType,
        @Parameter(name = "jobDefinitionConfiguration", description = "Filter by job definition configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionConfiguration", required = false) String jobDefinitionConfiguration,
        @Parameter(name = "activityIdIn", description = "Only include historic job logs which belong to one of the passed activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "failedActivityIdIn", description = "Only include historic job logs which belong to failures of one of the passed activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedActivityIdIn", required = false) String failedActivityIdIn,
        @Parameter(name = "executionIdIn", description = "Only include historic job logs which belong to one of the passed execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "deploymentId", description = "Filter by deployment id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "tenantIdIn", description = "Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic job log entries that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "hostname", description = "Filter by hostname.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "hostname", required = false) String hostname,
        @Parameter(name = "jobPriorityLowerThanOrEquals", description = "Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobPriorityLowerThanOrEquals", required = false) Long jobPriorityLowerThanOrEquals,
        @Parameter(name = "jobPriorityHigherThanOrEquals", description = "Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobPriorityHigherThanOrEquals", required = false) Long jobPriorityHigherThanOrEquals,
        @Parameter(name = "creationLog", description = "Only include creation logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "creationLog", required = false) Boolean creationLog,
        @Parameter(name = "failureLog", description = "Only include failure logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failureLog", required = false) Boolean failureLog,
        @Parameter(name = "successLog", description = "Only include success logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "successLog", required = false) Boolean successLog,
        @Parameter(name = "deletionLog", description = "Only include deletion logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deletionLog", required = false) Boolean deletionLog,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /history/job-log/count : Get Job Log Count
     * Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
     *
     * @param logId Filter by historic job log id. (optional)
     * @param jobId Filter by job id. (optional)
     * @param jobExceptionMessage Filter by job exception message. (optional)
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param jobDefinitionType Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param jobDefinitionConfiguration Filter by job definition configuration. (optional)
     * @param activityIdIn Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param failedActivityIdIn Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param executionIdIn Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Filter by process definition key. (optional)
     * @param deploymentId Filter by deployment id. (optional)
     * @param tenantIdIn Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param withoutTenantId Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param hostname Filter by hostname. (optional)
     * @param jobPriorityLowerThanOrEquals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param jobPriorityHigherThanOrEquals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. (status code 400)
     */
    @Operation(
        operationId = "getHistoricJobLogsCount",
        summary = "Get Job Log Count",
        description = "Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.",
        tags = { "Historic Job Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/job-log/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricJobLogsCount(
        @Parameter(name = "logId", description = "Filter by historic job log id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "logId", required = false) String logId,
        @Parameter(name = "jobId", description = "Filter by job id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) String jobId,
        @Parameter(name = "jobExceptionMessage", description = "Filter by job exception message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobExceptionMessage", required = false) String jobExceptionMessage,
        @Parameter(name = "jobDefinitionId", description = "Filter by job definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "jobDefinitionType", description = "Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionType", required = false) String jobDefinitionType,
        @Parameter(name = "jobDefinitionConfiguration", description = "Filter by job definition configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionConfiguration", required = false) String jobDefinitionConfiguration,
        @Parameter(name = "activityIdIn", description = "Only include historic job logs which belong to one of the passed activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "failedActivityIdIn", description = "Only include historic job logs which belong to failures of one of the passed activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedActivityIdIn", required = false) String failedActivityIdIn,
        @Parameter(name = "executionIdIn", description = "Only include historic job logs which belong to one of the passed execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "deploymentId", description = "Filter by deployment id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "tenantIdIn", description = "Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic job log entries that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "hostname", description = "Filter by hostname.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "hostname", required = false) String hostname,
        @Parameter(name = "jobPriorityLowerThanOrEquals", description = "Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobPriorityLowerThanOrEquals", required = false) Long jobPriorityLowerThanOrEquals,
        @Parameter(name = "jobPriorityHigherThanOrEquals", description = "Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobPriorityHigherThanOrEquals", required = false) Long jobPriorityHigherThanOrEquals,
        @Parameter(name = "creationLog", description = "Only include creation logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "creationLog", required = false) Boolean creationLog,
        @Parameter(name = "failureLog", description = "Only include failure logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failureLog", required = false) Boolean failureLog,
        @Parameter(name = "successLog", description = "Only include success logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "successLog", required = false) Boolean successLog,
        @Parameter(name = "deletionLog", description = "Only include deletion logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deletionLog", required = false) Boolean deletionLog
    );


    /**
     * GET /history/job-log/{id}/stacktrace : Get Job Log Exception Stacktrace
     * Retrieves the corresponding exception stacktrace to the passed historic job log by id.
     *
     * @param id The id of the historic job log to get the exception stacktrace for. (required)
     * @return Request successful. (status code 200)
     *         or Historic job log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStacktraceHistoricJobLog",
        summary = "Get Job Log Exception Stacktrace",
        description = "Retrieves the corresponding exception stacktrace to the passed historic job log by id.",
        tags = { "Historic Job Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Historic job log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/job-log/{id}/stacktrace",
        produces = { "text/plain", "application/json" }
    )
    ResponseEntity<Object> getStacktraceHistoricJobLog(
        @Parameter(name = "id", description = "The id of the historic job log to get the exception stacktrace for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /history/job-log : Get Job Logs (POST)
     * Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param historicJobLogQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricJobLogs",
        summary = "Get Job Logs (POST)",
        description = "Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types `String`, `Number` or `Boolean`.",
        tags = { "Historic Job Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricJobLogDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/job-log",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<HistoricJobLogDto>> queryHistoricJobLogs(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "HistoricJobLogQueryDto", description = "") @Valid @RequestBody(required = false) HistoricJobLogQueryDto historicJobLogQueryDto
    );


    /**
     * POST /history/job-log/count : Get Job Log Count (POST)
     * Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
     *
     * @param historicJobLogQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricJobLogsCount",
        summary = "Get Job Log Count (POST)",
        description = "Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.",
        tags = { "Historic Job Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/job-log/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryHistoricJobLogsCount(
        @Parameter(name = "HistoricJobLogQueryDto", description = "") @Valid @RequestBody(required = false) HistoricJobLogQueryDto historicJobLogQueryDto
    );

}
