/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.ActivityStatisticsResultDto;
import com.tosan.camunda.camundaclient.generated.model.AuthorizationExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CalledProcessDefinitionDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.FormDto;
import com.tosan.camunda.camundaclient.generated.model.HistoryTimeToLiveDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.ProcessDefinitionDiagramDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessDefinitionDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessDefinitionStatisticsResultDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessDefinitionSuspensionStateDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.ProcessInstanceWithVariablesDto;
import com.tosan.camunda.camundaclient.generated.model.RestartProcessInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.StartProcessInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.StartProcessInstanceFormDto;
import com.tosan.camunda.camundaclient.generated.model.VariableValueDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Process Definition", description = "the Process Definition API")
public interface ProcessDefinitionApi {

    /**
     * DELETE /process-definition/{id} : Delete
     * Deletes a running process instance by id.
     *
     * @param id The id of the process definition to be deleted. (required)
     * @param cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)
     * @param skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)
     * @param skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)
     * @return Request successful. (status code 204)
     *         or Not found Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteProcessDefinition",
        summary = "Delete",
        description = "Deletes a running process instance by id.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "404", description = "Not found Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/process-definition/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteProcessDefinition(
        @Parameter(name = "id", description = "The id of the process definition to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "cascade", description = "`true`, if all process instances, historic process instances and jobs for this process definition should be deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cascade", required = false) Boolean cascade,
        @Parameter(name = "skipCustomListeners", description = "`true`, if only the built-in ExecutionListeners should be notified with the end event.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipCustomListeners", required = false, defaultValue = "false") Boolean skipCustomListeners,
        @Parameter(name = "skipIoMappings", description = "A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipIoMappings", required = false, defaultValue = "false") Boolean skipIoMappings
    );


    /**
     * DELETE /process-definition/key/{key} : Delete By Key
     * Deletes process definitions by a given key which belong to no tenant id.
     *
     * @param key The key of the process definitions to be deleted. (required)
     * @param cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)
     * @param skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)
     * @param skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)
     * @return Request successful. (status code 204)
     *         or Forbidden The process definitions with the given &#x60;key&#x60; cannot be deleted due to missing permissions. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Not found Process definition with given &#x60;key&#x60; does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteProcessDefinitionsByKey",
        summary = "Delete By Key",
        description = "Deletes process definitions by a given key which belong to no tenant id.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "403", description = "Forbidden The process definitions with the given `key` cannot be deleted due to missing permissions. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found Process definition with given `key` does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/process-definition/key/{key}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteProcessDefinitionsByKey(
        @Parameter(name = "key", description = "The key of the process definitions to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "cascade", description = "`true`, if all process instances, historic process instances and jobs for this process definition should be deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cascade", required = false) Boolean cascade,
        @Parameter(name = "skipCustomListeners", description = "`true`, if only the built-in ExecutionListeners should be notified with the end event.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipCustomListeners", required = false, defaultValue = "false") Boolean skipCustomListeners,
        @Parameter(name = "skipIoMappings", description = "A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipIoMappings", required = false, defaultValue = "false") Boolean skipIoMappings
    );


    /**
     * DELETE /process-definition/key/{key}/tenant-id/{tenant-id} : Delete By Key
     * Deletes process definitions by a given key and which belong to a tenant id.
     *
     * @param key The key of the process definitions to be deleted. (required)
     * @param tenantId The id of the tenant the process definitions belong to. (required)
     * @param cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)
     * @param skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)
     * @param skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)
     * @return Request successful. (status code 204)
     *         or Forbidden The process definitions with the given &#x60;key&#x60; cannot be deleted due to missing permissions. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Not found Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteProcessDefinitionsByKeyAndTenantId",
        summary = "Delete By Key",
        description = "Deletes process definitions by a given key and which belong to a tenant id.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "403", description = "Forbidden The process definitions with the given `key` cannot be deleted due to missing permissions. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteProcessDefinitionsByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definitions to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definitions belong to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "cascade", description = "`true`, if all process instances, historic process instances and jobs for this process definition should be deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cascade", required = false) Boolean cascade,
        @Parameter(name = "skipCustomListeners", description = "`true`, if only the built-in ExecutionListeners should be notified with the end event.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipCustomListeners", required = false, defaultValue = "false") Boolean skipCustomListeners,
        @Parameter(name = "skipIoMappings", description = "A boolean value to control whether input/output mappings should be executed during deletion. `true`, if input/output mappings should not be invoked.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipIoMappings", required = false, defaultValue = "false") Boolean skipIoMappings
    );


    /**
     * GET /process-definition/{id}/statistics : Get Activity Instance Statistics
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param id The id of the process definition. (required)
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getActivityStatistics",
        summary = "Get Activity Instance Statistics",
        description = "Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ActivityStatisticsResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<List<ActivityStatisticsResultDto>> getActivityStatistics(
        @Parameter(name = "id", description = "The id of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "failedJobs", description = "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedJobs", required = false) Boolean failedJobs,
        @Parameter(name = "incidents", description = "Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidents", required = false) Boolean incidents,
        @Parameter(name = "incidentsForType", description = "If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentsForType", required = false) String incidentsForType
    );


    /**
     * GET /process-definition/key/{key}/statistics : Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getActivityStatisticsByProcessDefinitionKey",
        summary = "Get Activity Instance Statistics",
        description = "Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ActivityStatisticsResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<List<ActivityStatisticsResultDto>> getActivityStatisticsByProcessDefinitionKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "failedJobs", description = "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedJobs", required = false) Boolean failedJobs,
        @Parameter(name = "incidents", description = "Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidents", required = false) Boolean incidents,
        @Parameter(name = "incidentsForType", description = "If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentsForType", required = false) String incidentsForType
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/statistics : Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getActivityStatisticsByProcessDefinitionKeyAndTenantId",
        summary = "Get Activity Instance Statistics",
        description = "Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ActivityStatisticsResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<List<ActivityStatisticsResultDto>> getActivityStatisticsByProcessDefinitionKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "failedJobs", description = "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedJobs", required = false) Boolean failedJobs,
        @Parameter(name = "incidents", description = "Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidents", required = false) Boolean incidents,
        @Parameter(name = "incidentsForType", description = "If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentsForType", required = false) String incidentsForType
    );


    /**
     * GET /process-definition/{id}/deployed-start-form : Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
     *
     * @param id The id of the process definition to get the deployed start form for. (required)
     * @return Request successful. (status code 200)
     *         or The form key has wrong format.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The deployed start form cannot be retrieved due to missing permissions on process definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or No deployed start form for a given process definition exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDeployedStartForm",
        summary = "Get Deployed Start Form",
        description = "Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "The form key has wrong format.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The deployed start form cannot be retrieved due to missing permissions on process definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = AuthorizationExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "No deployed start form for a given process definition exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/deployed-start-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDeployedStartForm(
        @Parameter(name = "id", description = "The id of the process definition to get the deployed start form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /process-definition/key/{key}/deployed-start-form : Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or The form key has wrong format.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The deployed start form cannot be retrieved due to missing permissions on process definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or No deployed start form for a given process definition exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDeployedStartFormByKey",
        summary = "Get Deployed Start Form",
        description = "Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "The form key has wrong format.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The deployed start form cannot be retrieved due to missing permissions on process definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = AuthorizationExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "No deployed start form for a given process definition exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/deployed-start-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDeployedStartFormByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form : Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definitions belong to. (required)
     * @return Request successful. (status code 200)
     *         or The form key has wrong format.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The deployed start form cannot be retrieved due to missing permissions on process definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or No deployed start form for a given process definition exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDeployedStartFormByKeyAndTenantId",
        summary = "Get Deployed Start Form",
        description = "Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "The form key has wrong format.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The deployed start form cannot be retrieved due to missing permissions on process definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = AuthorizationExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "No deployed start form for a given process definition exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDeployedStartFormByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definitions belong to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id} : Get
     * Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or Process definition with given &#x60;key&#x60; does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getLatestProcessDefinitionByTenantId",
        summary = "Get",
        description = "Retrieves the latest version of the process definition for tenant according to the `ProcessDefinition` interface in the engine.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition with given `key` does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}",
        produces = { "application/json" }
    )
    ResponseEntity<ProcessDefinitionDto> getLatestProcessDefinitionByTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /process-definition/{id} : Get
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     *
     * @param id The id of the process definition to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Process definition with given &#x60;id&#x60; does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getProcessDefinition",
        summary = "Get",
        description = "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition with given `id` does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ProcessDefinitionDto> getProcessDefinition(
        @Parameter(name = "id", description = "The id of the process definition to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /process-definition/{id}/xml : Get XML
     * Retrieves the BPMN 2.0 XML of a process definition.
     *
     * @param id The id of the process definition. (required)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getProcessDefinitionBpmn20Xml",
        summary = "Get XML",
        description = "Retrieves the BPMN 2.0 XML of a process definition.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessDefinitionDiagramDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<ProcessDefinitionDiagramDto> getProcessDefinitionBpmn20Xml(
        @Parameter(name = "id", description = "The id of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /process-definition/key/{key}/xml : Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition.
     *
     * @param key The key of the process definition (the latest version thereof) whose XML should be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getProcessDefinitionBpmn20XmlByKey",
        summary = "Get XML",
        description = "Retrieves latest version the BPMN 2.0 XML of a process definition.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessDefinitionDiagramDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<ProcessDefinitionDiagramDto> getProcessDefinitionBpmn20XmlByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) whose XML should be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/xml : Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
     *
     * @param key The key of the process definition (the latest version thereof) whose XML should be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getProcessDefinitionBpmn20XmlByKeyAndTenantId",
        summary = "Get XML",
        description = "Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessDefinitionDiagramDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<ProcessDefinitionDiagramDto> getProcessDefinitionBpmn20XmlByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) whose XML should be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /process-definition/key/{key} : Get
     * Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Process definition with given &#x60;key&#x60; does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getProcessDefinitionByKey",
        summary = "Get",
        description = "Retrieves the latest version of the process definition which belongs to no tenant according to the `ProcessDefinition` interface in the engine.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition with given `key` does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}",
        produces = { "application/json" }
    )
    ResponseEntity<ProcessDefinitionDto> getProcessDefinitionByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /process-definition/{id}/diagram : Get Diagram
     * Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
     *
     * @param id The id of the process definition. (required)
     * @return Request successful. The image diagram of this process. (status code 200)
     *         or The process definition doesn&#39;t have an associated diagram. (status code 204)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getProcessDefinitionDiagram",
        summary = "Get Diagram",
        description = "Retrieves the diagram of a process definition.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The image diagram of this process.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The process definition doesn't have an associated diagram."),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/diagram",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getProcessDefinitionDiagram(
        @Parameter(name = "id", description = "The id of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /process-definition/key/{key}/diagram : Get Diagram
     * Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
     *
     * @param key The key of the process definition. (required)
     * @return Request successful. The image diagram of this process. (status code 200)
     *         or The process definition doesn&#39;t have an associated diagram. (status code 204)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getProcessDefinitionDiagramByKey",
        summary = "Get Diagram",
        description = "Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The image diagram of this process.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The process definition doesn't have an associated diagram."),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/diagram",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getProcessDefinitionDiagramByKey(
        @Parameter(name = "key", description = "The key of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/diagram : Get Diagram
     * Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
     *
     * @param key The key of the process definition. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return Request successful. The image diagram of this process. (status code 200)
     *         or The process definition doesn&#39;t have an associated diagram. (status code 204)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getProcessDefinitionDiagramByKeyAndTenantId",
        summary = "Get Diagram",
        description = "Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition's deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: `someProcess.bpmn` and `someProcess.png`. Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The image diagram of this process.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The process definition doesn't have an associated diagram."),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/diagram",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getProcessDefinitionDiagramByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /process-definition/statistics : Get Process Instance Statistics
     * Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param rootIncidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getProcessDefinitionStatistics",
        summary = "Get Process Instance Statistics",
        description = "Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProcessDefinitionStatisticsResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProcessDefinitionStatisticsResultDto>> getProcessDefinitionStatistics(
        @Parameter(name = "failedJobs", description = "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedJobs", required = false) Boolean failedJobs,
        @Parameter(name = "incidents", description = "Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidents", required = false) Boolean incidents,
        @Parameter(name = "incidentsForType", description = "If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with `incidents`. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentsForType", required = false) String incidentsForType,
        @Parameter(name = "rootIncidents", description = "Valid values for this property are `true` or `false`. If this property has been set to `true` the result will include the corresponding number of root incidents for each occurred incident type. If it is set to `false`, the incidents will not be included in the result. Cannot be used in combination with `incidentsForType` or `incidents`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootIncidents", required = false) Boolean rootIncidents
    );


    /**
     * GET /process-definition : Get List
     * Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
     *
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionIdIn Filter by a comma-separated list of process definition ids. (optional)
     * @param name Filter by process definition name. (optional)
     * @param nameLike Filter by process definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)
     * @param keysIn Filter by a comma-separated list of process definition keys. (optional)
     * @param keyLike Filter by process definition keys that the parameter is a substring of. (optional)
     * @param category Filter by process definition category. Exact match. (optional)
     * @param categoryLike Filter by process definition categories that the parameter is a substring of. (optional)
     * @param version Filter by process definition version. (optional)
     * @param latestVersion Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the process definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those process definition resources that the parameter is a substring of. (optional)
     * @param startableBy Filter by a user name who is allowed to start the process. (optional)
     * @param active Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)
     * @param includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param versionTag Filter by the version tag. (optional)
     * @param versionTagLike Filter by the version tag that the parameter is a substring of. (optional)
     * @param withoutVersionTag Only include process definitions without a &#x60;versionTag&#x60;. (optional)
     * @param startableInTasklist Filter by process definitions which are startable in Tasklist.. (optional)
     * @param notStartableInTasklist Filter by process definitions which are not startable in Tasklist. (optional)
     * @param startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getProcessDefinitions",
        summary = "Get List",
        description = "Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProcessDefinitionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProcessDefinitionDto>> getProcessDefinitions(
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionIdIn", description = "Filter by a comma-separated list of process definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionIdIn", required = false) String processDefinitionIdIn,
        @Parameter(name = "name", description = "Filter by process definition name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by process definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "deploymentId", description = "Filter by the deployment the id belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "deployedAfter", description = "Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAfter,
        @Parameter(name = "deployedAt", description = "Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAt,
        @Parameter(name = "key", description = "Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "keysIn", description = "Filter by a comma-separated list of process definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keysIn", required = false) String keysIn,
        @Parameter(name = "keyLike", description = "Filter by process definition keys that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyLike", required = false) String keyLike,
        @Parameter(name = "category", description = "Filter by process definition category. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryLike", description = "Filter by process definition categories that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryLike", required = false) String categoryLike,
        @Parameter(name = "version", description = "Filter by process definition version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersion", description = "Only include those process definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersion", required = false) Boolean latestVersion,
        @Parameter(name = "resourceName", description = "Filter by the name of the process definition resource. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceName", required = false) String resourceName,
        @Parameter(name = "resourceNameLike", description = "Filter by names of those process definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceNameLike", required = false) String resourceNameLike,
        @Parameter(name = "startableBy", description = "Filter by a user name who is allowed to start the process.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startableBy", required = false) String startableBy,
        @Parameter(name = "active", description = "Only include active process definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended process definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "incidentId", description = "Filter by the incident id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentId", required = false) String incidentId,
        @Parameter(name = "incidentType", description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentMessage", description = "Filter by the incident message. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Filter by the incident message that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeProcessDefinitionsWithoutTenantId", description = "Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeProcessDefinitionsWithoutTenantId", required = false) Boolean includeProcessDefinitionsWithoutTenantId,
        @Parameter(name = "versionTag", description = "Filter by the version tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTag", required = false) String versionTag,
        @Parameter(name = "versionTagLike", description = "Filter by the version tag that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTagLike", required = false) String versionTagLike,
        @Parameter(name = "withoutVersionTag", description = "Only include process definitions without a `versionTag`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutVersionTag", required = false) Boolean withoutVersionTag,
        @Parameter(name = "startableInTasklist", description = "Filter by process definitions which are startable in Tasklist..", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startableInTasklist", required = false) Boolean startableInTasklist,
        @Parameter(name = "notStartableInTasklist", description = "Filter by process definitions which are not startable in Tasklist.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notStartableInTasklist", required = false) Boolean notStartableInTasklist,
        @Parameter(name = "startablePermissionCheck", description = "Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn't have these permissions the result will be empty list. The permissions are: * `CREATE` permission for all Process instances * `CREATE_INSTANCE` and `READ` permission on Process definition level", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startablePermissionCheck", required = false) Boolean startablePermissionCheck,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /process-definition/count : Get List Count
     * Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
     *
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionIdIn Filter by a comma-separated list of process definition ids. (optional)
     * @param name Filter by process definition name. (optional)
     * @param nameLike Filter by process definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)
     * @param keysIn Filter by a comma-separated list of process definition keys. (optional)
     * @param keyLike Filter by process definition keys that the parameter is a substring of. (optional)
     * @param category Filter by process definition category. Exact match. (optional)
     * @param categoryLike Filter by process definition categories that the parameter is a substring of. (optional)
     * @param version Filter by process definition version. (optional)
     * @param latestVersion Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the process definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those process definition resources that the parameter is a substring of. (optional)
     * @param startableBy Filter by a user name who is allowed to start the process. (optional)
     * @param active Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)
     * @param includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param versionTag Filter by the version tag. (optional)
     * @param versionTagLike Filter by the version tag that the parameter is a substring of. (optional)
     * @param withoutVersionTag Only include process definitions without a &#x60;versionTag&#x60;. (optional)
     * @param startableInTasklist Filter by process definitions which are startable in Tasklist.. (optional)
     * @param notStartableInTasklist Filter by process definitions which are not startable in Tasklist. (optional)
     * @param startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getProcessDefinitionsCount",
        summary = "Get List Count",
        description = "Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getProcessDefinitionsCount(
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionIdIn", description = "Filter by a comma-separated list of process definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionIdIn", required = false) String processDefinitionIdIn,
        @Parameter(name = "name", description = "Filter by process definition name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by process definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "deploymentId", description = "Filter by the deployment the id belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "deployedAfter", description = "Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAfter,
        @Parameter(name = "deployedAt", description = "Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAt,
        @Parameter(name = "key", description = "Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "keysIn", description = "Filter by a comma-separated list of process definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keysIn", required = false) String keysIn,
        @Parameter(name = "keyLike", description = "Filter by process definition keys that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyLike", required = false) String keyLike,
        @Parameter(name = "category", description = "Filter by process definition category. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryLike", description = "Filter by process definition categories that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryLike", required = false) String categoryLike,
        @Parameter(name = "version", description = "Filter by process definition version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersion", description = "Only include those process definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersion", required = false) Boolean latestVersion,
        @Parameter(name = "resourceName", description = "Filter by the name of the process definition resource. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceName", required = false) String resourceName,
        @Parameter(name = "resourceNameLike", description = "Filter by names of those process definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceNameLike", required = false) String resourceNameLike,
        @Parameter(name = "startableBy", description = "Filter by a user name who is allowed to start the process.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startableBy", required = false) String startableBy,
        @Parameter(name = "active", description = "Only include active process definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended process definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "incidentId", description = "Filter by the incident id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentId", required = false) String incidentId,
        @Parameter(name = "incidentType", description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentMessage", description = "Filter by the incident message. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Filter by the incident message that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeProcessDefinitionsWithoutTenantId", description = "Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeProcessDefinitionsWithoutTenantId", required = false) Boolean includeProcessDefinitionsWithoutTenantId,
        @Parameter(name = "versionTag", description = "Filter by the version tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTag", required = false) String versionTag,
        @Parameter(name = "versionTagLike", description = "Filter by the version tag that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTagLike", required = false) String versionTagLike,
        @Parameter(name = "withoutVersionTag", description = "Only include process definitions without a `versionTag`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutVersionTag", required = false) Boolean withoutVersionTag,
        @Parameter(name = "startableInTasklist", description = "Filter by process definitions which are startable in Tasklist..", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startableInTasklist", required = false) Boolean startableInTasklist,
        @Parameter(name = "notStartableInTasklist", description = "Filter by process definitions which are not startable in Tasklist.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notStartableInTasklist", required = false) Boolean notStartableInTasklist,
        @Parameter(name = "startablePermissionCheck", description = "Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn't have these permissions the result will be empty list. The permissions are: * `CREATE` permission for all Process instances * `CREATE_INSTANCE` and `READ` permission on Process definition level", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startablePermissionCheck", required = false) Boolean startablePermissionCheck
    );


    /**
     * GET /process-definition/{id}/rendered-form : Get Rendered Start Form
     * Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param id The id of the process definition to get the rendered start form for. (required)
     * @return Request successful. (status code 200)
     *         or Process definition has no form field metadata defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getRenderedStartForm",
        summary = "Get Rendered Start Form",
        description = "Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition has no form field metadata defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/rendered-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getRenderedStartForm(
        @Parameter(name = "id", description = "The id of the process definition to get the rendered start form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /process-definition/key/{key}/rendered-form : Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Process definition has no form field metadata defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getRenderedStartFormByKey",
        summary = "Get Rendered Start Form",
        description = "Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition has no form field metadata defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/rendered-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getRenderedStartFormByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form : Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or Process definition has no form field metadata defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getRenderedStartFormByKeyAndTenantId",
        summary = "Get Rendered Start Form",
        description = "Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition has no form field metadata defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getRenderedStartFormByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /process-definition/{id}/startForm : Get Start Form Key
     * Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     *
     * @param id The id of the process definition to get the start form key for. (required)
     * @return Request successful. (status code 200)
     *         or Process definition has no start form defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStartForm",
        summary = "Get Start Form Key",
        description = "Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition has no start form defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/startForm",
        produces = { "application/json" }
    )
    ResponseEntity<FormDto> getStartForm(
        @Parameter(name = "id", description = "The id of the process definition to get the start form key for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /process-definition/key/{key}/startForm : Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) for which the form key is to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Process definition has no start form defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStartFormByKey",
        summary = "Get Start Form Key",
        description = "Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the `FormData#formKey` property in the engine.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition has no start form defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/startForm",
        produces = { "application/json" }
    )
    ResponseEntity<FormDto> getStartFormByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) for which the form key is to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/startForm : Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) for which the form key is to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or Process definition has no start form defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStartFormByKeyAndTenantId",
        summary = "Get Start Form Key",
        description = "Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the `FormData#formKey` property in the engine.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Process definition has no start form defined. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/startForm",
        produces = { "application/json" }
    )
    ResponseEntity<FormDto> getStartFormByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) for which the form key is to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /process-definition/{id}/form-variables : Get Start Form Variables
     * Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param id The id of the process definition to retrieve the variables for. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Request successful. A JSON object containing a property for each variable returned. (status code 200)
     *         or The id is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStartFormVariables",
        summary = "Get Start Form Variables",
        description = "Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. A JSON object containing a property for each variable returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The id is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/form-variables",
        produces = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> getStartFormVariables(
        @Parameter(name = "id", description = "The id of the process definition to retrieve the variables for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "variableNames", description = "A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNames", required = false) String variableNames,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false, defaultValue = "true") Boolean deserializeValues
    );


    /**
     * GET /process-definition/key/{key}/form-variables : Get Start Form Variables
     * Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Request successful. A JSON object containing a property for each variable returned. (status code 200)
     *         or The key is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStartFormVariablesByKey",
        summary = "Get Start Form Variables",
        description = "Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. A JSON object containing a property for each variable returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The key is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/form-variables",
        produces = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> getStartFormVariablesByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "variableNames", description = "A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNames", required = false) String variableNames,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false, defaultValue = "true") Boolean deserializeValues
    );


    /**
     * GET /process-definition/key/{key}/tenant-id/{tenant-id}/form-variables : Get Start Form Variables
     * Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Request successful. A JSON object containing a property for each variable returned. (status code 200)
     *         or The key is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStartFormVariablesByKeyAndTenantId",
        summary = "Get Start Form Variables",
        description = "Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. A JSON object containing a property for each variable returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The key is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables",
        produces = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> getStartFormVariablesByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "variableNames", description = "A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNames", required = false) String variableNames,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false, defaultValue = "true") Boolean deserializeValues
    );


    /**
     * GET /process-definition/{id}/static-called-process-definitions : Get Static Called Process Definitions
     * For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
     *
     * @param id The id of the process definition. (required)
     * @return Request successful. (status code 200)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStaticCalledProcessDefinitions",
        summary = "Get Static Called Process Definitions",
        description = "For the given process, returns a list of called process definitions corresponding to the `CalledProcessDefinition` interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CalledProcessDefinitionDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process-definition/{id}/static-called-process-definitions",
        produces = { "application/json" }
    )
    ResponseEntity<List<CalledProcessDefinitionDto>> getStaticCalledProcessDefinitions(
        @Parameter(name = "id", description = "The id of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /process-definition/{id}/restart : Restart Process Instance
     * Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
     *
     * @param id The id of the process definition of the process instances to restart. (required)
     * @param restartProcessInstanceDto  (optional)
     * @return Request successful. (status code 204)
     *         or In case following parameters are missing: &#x60;instructions&#x60;, &#x60;activityId&#x60; or &#x60;transitionId&#x60;, &#x60;processInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60;, an exception of type &#x60;InvalidRequestException&#x60; is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "restartProcessInstance",
        summary = "Restart Process Instance",
        description = "Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "In case following parameters are missing: `instructions`, `activityId` or `transitionId`, `processInstanceIds` or `historicProcessInstanceQuery`, an exception of type `InvalidRequestException` is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/{id}/restart",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> restartProcessInstance(
        @Parameter(name = "id", description = "The id of the process definition of the process instances to restart.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RestartProcessInstanceDto", description = "") @Valid @RequestBody(required = false) RestartProcessInstanceDto restartProcessInstanceDto
    );


    /**
     * POST /process-definition/{id}/restart-async : Restart Process Instance Async
     * Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
     *
     * @param id The id of the process definition of the process instances to restart. (required)
     * @param restartProcessInstanceDto  (optional)
     * @return Request successful. (status code 200)
     *         or In case following parameters are missing: &#x60;instructions&#x60;, &#x60;activityId&#x60; or &#x60;transitionId&#x60;, &#x60;processInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60;, an exception of type &#x60;InvalidRequestException&#x60; is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "restartProcessInstanceAsyncOperation",
        summary = "Restart Process Instance Async",
        description = "Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "In case following parameters are missing: `instructions`, `activityId` or `transitionId`, `processInstanceIds` or `historicProcessInstanceQuery`, an exception of type `InvalidRequestException` is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/{id}/restart-async",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> restartProcessInstanceAsyncOperation(
        @Parameter(name = "id", description = "The id of the process definition of the process instances to restart.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RestartProcessInstanceDto", description = "") @Valid @RequestBody(required = false) RestartProcessInstanceDto restartProcessInstanceDto
    );


    /**
     * POST /process-definition/{id}/start : Start Instance
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     *
     * @param id The id of the process definition to be retrieved. (required)
     * @param startProcessInstanceDto  (optional)
     * @return Request successful. (status code 200)
     *         or The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an &#x60;Integer&#x60; value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "startProcessInstance",
        summary = "Start Instance",
        description = "Instantiates a given process definition. Process variables and business key may be supplied in the request body.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceWithVariablesDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an `Integer` value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/{id}/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProcessInstanceWithVariablesDto> startProcessInstance(
        @Parameter(name = "id", description = "The id of the process definition to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "StartProcessInstanceDto", description = "") @Valid @RequestBody(required = false) StartProcessInstanceDto startProcessInstanceDto
    );


    /**
     * POST /process-definition/key/{key}/start : Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param startProcessInstanceDto  (optional)
     * @return Request successful. (status code 200)
     *         or The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an &#x60;Integer&#x60; value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "startProcessInstanceByKey",
        summary = "Start Instance",
        description = "Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceWithVariablesDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an `Integer` value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/key/{key}/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProcessInstanceWithVariablesDto> startProcessInstanceByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "StartProcessInstanceDto", description = "") @Valid @RequestBody(required = false) StartProcessInstanceDto startProcessInstanceDto
    );


    /**
     * POST /process-definition/key/{key}/tenant-id/{tenant-id}/start : Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param startProcessInstanceDto  (optional)
     * @return Request successful. (status code 200)
     *         or The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an &#x60;Integer&#x60; value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "startProcessInstanceByKeyAndTenantId",
        summary = "Start Instance",
        description = "Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceWithVariablesDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an `Integer` value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProcessInstanceWithVariablesDto> startProcessInstanceByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "StartProcessInstanceDto", description = "") @Valid @RequestBody(required = false) StartProcessInstanceDto startProcessInstanceDto
    );


    /**
     * POST /process-definition/{id}/submit-form : Submit Start Form
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param id The id of the process definition to submit the form for. (required)
     * @param startProcessInstanceFormDto  (optional)
     * @return Request successful. (status code 200)
     *         or The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an &#x60;Integer&#x60; value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "submitForm",
        summary = "Submit Start Form",
        description = "Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an `Integer` value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/{id}/submit-form",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProcessInstanceDto> submitForm(
        @Parameter(name = "id", description = "The id of the process definition to submit the form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "StartProcessInstanceFormDto", description = "") @Valid @RequestBody(required = false) StartProcessInstanceFormDto startProcessInstanceFormDto
    );


    /**
     * POST /process-definition/key/{key}/submit-form : Submit Start Form
     * Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition to submit the form for. (required)
     * @param startProcessInstanceFormDto  (optional)
     * @return Request successful. (status code 200)
     *         or The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an &#x60;Integer&#x60; value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "submitFormByKey",
        summary = "Submit Start Form",
        description = "Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an `Integer` value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/key/{key}/submit-form",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProcessInstanceDto> submitFormByKey(
        @Parameter(name = "key", description = "The key of the process definition to submit the form for.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "StartProcessInstanceFormDto", description = "") @Valid @RequestBody(required = false) StartProcessInstanceFormDto startProcessInstanceFormDto
    );


    /**
     * POST /process-definition/key/{key}/tenant-id/{tenant-id}/submit-form : Submit Start Form
     * Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition to submit the form for. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param startProcessInstanceFormDto  (optional)
     * @return Request successful. (status code 200)
     *         or The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an &#x60;Integer&#x60; value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "submitFormByKeyAndTenantId",
        summary = "Submit Start Form",
        description = "Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessInstanceDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an `Integer` value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The instance could not be created successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProcessInstanceDto> submitFormByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition to submit the form for.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "StartProcessInstanceFormDto", description = "") @Valid @RequestBody(required = false) StartProcessInstanceFormDto startProcessInstanceFormDto
    );


    /**
     * PUT /process-definition/{id}/history-time-to-live : Update History Time to Live
     * Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
     *
     * @param id The id of the process definition to change history time to live. (required)
     * @param historyTimeToLiveDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateHistoryTimeToLiveByProcessDefinitionId",
        summary = "Update History Time to Live",
        description = "Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/{id}/history-time-to-live",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateHistoryTimeToLiveByProcessDefinitionId(
        @Parameter(name = "id", description = "The id of the process definition to change history time to live.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "HistoryTimeToLiveDto", description = "") @Valid @RequestBody(required = false) HistoryTimeToLiveDto historyTimeToLiveDto
    );


    /**
     * PUT /process-definition/key/{key}/history-time-to-live : Update History Time to Live
     * Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
     *
     * @param key The key of the process definition to change history time to live. (required)
     * @param historyTimeToLiveDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateHistoryTimeToLiveByProcessDefinitionKey",
        summary = "Update History Time to Live",
        description = "Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/key/{key}/history-time-to-live",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateHistoryTimeToLiveByProcessDefinitionKey(
        @Parameter(name = "key", description = "The key of the process definition to change history time to live.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "HistoryTimeToLiveDto", description = "") @Valid @RequestBody(required = false) HistoryTimeToLiveDto historyTimeToLiveDto
    );


    /**
     * PUT /process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live : Update History Time to Live
     * Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
     *
     * @param key The key of the process definition to change history time to live. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param historyTimeToLiveDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId",
        summary = "Update History Time to Live",
        description = "Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition to change history time to live.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "HistoryTimeToLiveDto", description = "") @Valid @RequestBody(required = false) HistoryTimeToLiveDto historyTimeToLiveDto
    );


    /**
     * PUT /process-definition/suspended : Activate/Suspend By Key
     * Activates or suspends process definitions with the given process definition key.
     *
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the query parameters are invalid, for example if the provided &#x60;executionDate&#x60; parameter doesn&#39;t have the expected format or if the &#x60;processDefinitionKey&#x60; parameter is &#x60;null&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateProcessDefinitionSuspensionState",
        summary = "Activate/Suspend By Key",
        description = "Activates or suspends process definitions with the given process definition key.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if the provided `executionDate` parameter doesn't have the expected format or if the `processDefinitionKey` parameter is `null`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateProcessDefinitionSuspensionState(
        @Parameter(name = "ProcessDefinitionSuspensionStateDto", description = "**Note**: Unallowed property is `processDefinitionId`.") @Valid @RequestBody(required = false) ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );


    /**
     * PUT /process-definition/{id}/suspended : Activate/Suspend By Id
     * Activates or suspends a given process definition by id.
     *
     * @param id The id of the process definition to activate or suspend. (required)
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the query parameters are invalid, for example if the provided &#x60;executionDate&#x60; parameter doesn&#39;t have the expected format or if the &#x60;processDefinitionKey&#x60; parameter is &#x60;null&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateProcessDefinitionSuspensionStateById",
        summary = "Activate/Suspend By Id",
        description = "Activates or suspends a given process definition by id.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if the provided `executionDate` parameter doesn't have the expected format or if the `processDefinitionKey` parameter is `null`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/{id}/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateProcessDefinitionSuspensionStateById(
        @Parameter(name = "id", description = "The id of the process definition to activate or suspend.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProcessDefinitionSuspensionStateDto", description = "**Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.") @Valid @RequestBody(required = false) ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );


    /**
     * PUT /process-definition/key/{key}/suspended : Activate/Suspend by Id
     * Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
     *
     * @param key The key of the process definition (the latest version thereof) to be activated/suspended. (required)
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the query parameters are invalid, for example if the provided &#x60;executionDate&#x60; parameter doesn&#39;t have the expected format or if the &#x60;processDefinitionKey&#x60; parameter is &#x60;null&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateProcessDefinitionSuspensionStateByKey",
        summary = "Activate/Suspend by Id",
        description = "Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if the provided `executionDate` parameter doesn't have the expected format or if the `processDefinitionKey` parameter is `null`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/key/{key}/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateProcessDefinitionSuspensionStateByKey(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be activated/suspended.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "ProcessDefinitionSuspensionStateDto", description = "**Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.") @Valid @RequestBody(required = false) ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );


    /**
     * PUT /process-definition/key/{key}/tenant-id/{tenant-id}/suspended : Activate/Suspend by Id
     * Activates or suspends a given process definition by the latest version of the process definition for tenant.
     *
     * @param key The key of the process definition (the latest version thereof) to be activated/suspended. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the query parameters are invalid, for example if the provided &#x60;executionDate&#x60; parameter doesn&#39;t have the expected format or if the &#x60;processDefinitionKey&#x60; parameter is &#x60;null&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateProcessDefinitionSuspensionStateByKeyAndTenantId",
        summary = "Activate/Suspend by Id",
        description = "Activates or suspends a given process definition by the latest version of the process definition for tenant.",
        tags = { "Process Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if the provided `executionDate` parameter doesn't have the expected format or if the `processDefinitionKey` parameter is `null`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process-definition/key/{key}/tenant-id/{tenant-id}/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateProcessDefinitionSuspensionStateByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the process definition (the latest version thereof) to be activated/suspended.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the process definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "ProcessDefinitionSuspensionStateDto", description = "**Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.") @Valid @RequestBody(required = false) ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );

}
