/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CleanableHistoricDecisionInstanceReportResultDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Decision Definition", description = "the Historic Decision Definition API")
public interface HistoricDecisionDefinitionApi {

    /**
     * GET /history/decision-definition/cleanable-decision-instance-report : Get Cleanable Decision Instance Report
     * Retrieves a report about a decision definition and finished decision instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)),  so that you can tune the history time to live. These reports include the count of the finished historic decision instances, cleanable decision instances and basic decision definition data - id, key, name and version. The size of the result set can be retrieved by using the  [Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.
     *
     * @param decisionDefinitionIdIn Filter by decision definition ids. Must be a comma-separated list of decision definition ids. (optional)
     * @param decisionDefinitionKeyIn Filter by decision definition keys. Must be a comma-separated list of decision definition keys. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids. (optional)
     * @param withoutTenantId Only include decision definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60;  is the default behavior. (optional)
     * @param compact Only include decision instances which have more than zero finished instances. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "getCleanableHistoricDecisionInstanceReport",
        summary = "Get Cleanable Decision Instance Report",
        description = "Retrieves a report about a decision definition and finished decision instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)),  so that you can tune the history time to live. These reports include the count of the finished historic decision instances, cleanable decision instances and basic decision definition data - id, key, name and version. The size of the result set can be retrieved by using the  [Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.",
        tags = { "Historic Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CleanableHistoricDecisionInstanceReportResultDto.class)))
            }),
            @ApiResponse(responseCode = "500", description = "See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/decision-definition/cleanable-decision-instance-report",
        produces = { "application/json" }
    )
    ResponseEntity<List<CleanableHistoricDecisionInstanceReportResultDto>> getCleanableHistoricDecisionInstanceReport(
        @Parameter(name = "decisionDefinitionIdIn", description = "Filter by decision definition ids. Must be a comma-separated list of decision definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionIdIn", required = false) String decisionDefinitionIdIn,
        @Parameter(name = "decisionDefinitionKeyIn", description = "Filter by decision definition keys. Must be a comma-separated list of decision definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionKeyIn", required = false) String decisionDefinitionKeyIn,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include decision definitions which belong to no tenant. Value may only be `true`, as `false`  is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "compact", description = "Only include decision instances which have more than zero finished instances. Value may only be `true`,  as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "compact", required = false) Boolean compact,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /history/decision-definition/cleanable-decision-instance-report/count : Get Cleanable Decision Instance Report Count
     * Queries for the number of report results about a decision definition and finished decision instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/)  method.
     *
     * @param decisionDefinitionIdIn Filter by decision definition ids. Must be a comma-separated list of decision definition ids. (optional)
     * @param decisionDefinitionKeyIn Filter by decision definition keys. Must be a comma-separated list of decision definition keys. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids. (optional)
     * @param withoutTenantId Only include decision definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60;  is the default behavior. (optional)
     * @param compact Only include decision instances which have more than zero finished instances. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "getCleanableHistoricDecisionInstanceReportCount",
        summary = "Get Cleanable Decision Instance Report Count",
        description = "Queries for the number of report results about a decision definition and finished decision instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/)  method.",
        tags = { "Historic Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/decision-definition/cleanable-decision-instance-report/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getCleanableHistoricDecisionInstanceReportCount(
        @Parameter(name = "decisionDefinitionIdIn", description = "Filter by decision definition ids. Must be a comma-separated list of decision definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionIdIn", required = false) String decisionDefinitionIdIn,
        @Parameter(name = "decisionDefinitionKeyIn", description = "Filter by decision definition keys. Must be a comma-separated list of decision definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionKeyIn", required = false) String decisionDefinitionKeyIn,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include decision definitions which belong to no tenant. Value may only be `true`, as `false`  is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "compact", description = "Only include decision instances which have more than zero finished instances. Value may only be `true`,  as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "compact", required = false) Boolean compact
    );

}
