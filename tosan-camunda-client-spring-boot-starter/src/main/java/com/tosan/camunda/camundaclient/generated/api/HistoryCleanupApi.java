/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoryCleanupConfigurationDto;
import com.tosan.camunda.camundaclient.generated.model.JobDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "History Cleanup", description = "the History Cleanup API")
public interface HistoryCleanupApi {

    /**
     * POST /history/cleanup : Clean up history (POST)
     * Schedules asynchronous history cleanup (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).  **Note:** This endpoint will return at most a single history cleanup job. Since version &#x60;7.9.0&#x60; it is possible to configure multiple [parallel history cleanup jobs](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#parallel-execution). Use [&#x60;GET /history/cleanup/jobs&#x60;](https://docs.camunda.org/manual/7.17/reference/rest/history/history-cleanup/get-history-cleanup-jobs) to find all the available history cleanup jobs.
     *
     * @param immediatelyDue When true the job will be scheduled for nearest future. When &#x60;false&#x60;, the job will be scheduled for next batch window start time. Default is &#x60;true&#x60;. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid or the engine does not participate in history cleanup. See [Cleanup Execution Participation per Node](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#cleanup-execution-participation-per-node). (status code 400)
     */
    @Operation(
        operationId = "cleanupAsync",
        summary = "Clean up history (POST)",
        description = "Schedules asynchronous history cleanup (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).  **Note:** This endpoint will return at most a single history cleanup job. Since version `7.9.0` it is possible to configure multiple [parallel history cleanup jobs](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#parallel-execution). Use [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.17/reference/rest/history/history-cleanup/get-history-cleanup-jobs) to find all the available history cleanup jobs.",
        tags = { "History Cleanup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid or the engine does not participate in history cleanup. See [Cleanup Execution Participation per Node](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#cleanup-execution-participation-per-node).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/cleanup",
        produces = { "application/json" }
    )
    ResponseEntity<JobDto> cleanupAsync(
        @Parameter(name = "immediatelyDue", description = "When true the job will be scheduled for nearest future. When `false`, the job will be scheduled for next batch window start time. Default is `true`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "immediatelyDue", required = false) Boolean immediatelyDue
    );


    /**
     * GET /history/cleanup/job : Find clean up history job (GET)
     * **Deprecated!** Use &#x60;GET /history/cleanup/jobs&#x60; instead.  Finds history cleanup job (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).
     *
     * @return Request successful. (status code 200)
     *         or History clean up job does not exist. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "findCleanupJob",
        summary = "Find clean up history job (GET)",
        description = "**Deprecated!** Use `GET /history/cleanup/jobs` instead.  Finds history cleanup job (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).",
        tags = { "History Cleanup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "History clean up job does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/cleanup/job",
        produces = { "application/json" }
    )
    ResponseEntity<JobDto> findCleanupJob(
        
    );


    /**
     * GET /history/cleanup/jobs : Find clean up history jobs (GET)
     * Finds history cleanup jobs (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).
     *
     * @return Request successful. (status code 200)
     *         or History clean up jobs are empty. (status code 404)
     */
    @Operation(
        operationId = "findCleanupJobs",
        summary = "Find clean up history jobs (GET)",
        description = "Finds history cleanup jobs (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).",
        tags = { "History Cleanup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "History clean up jobs are empty.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/cleanup/jobs",
        produces = { "application/json" }
    )
    ResponseEntity<List<JobDto>> findCleanupJobs(
        
    );


    /**
     * GET /history/cleanup/configuration : Get History Cleanup Configuration
     * Retrieves history cleanup batch window configuration (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).
     *
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "getHistoryCleanupConfiguration",
        summary = "Get History Cleanup Configuration",
        description = "Retrieves history cleanup batch window configuration (See [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup)).",
        tags = { "History Cleanup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoryCleanupConfigurationDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/cleanup/configuration",
        produces = { "application/json" }
    )
    ResponseEntity<HistoryCleanupConfigurationDto> getHistoryCleanupConfiguration(
        
    );

}
