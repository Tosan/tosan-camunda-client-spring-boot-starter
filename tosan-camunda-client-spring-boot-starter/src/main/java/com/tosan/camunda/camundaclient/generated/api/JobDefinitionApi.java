/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.JobDefinitionDto;
import com.tosan.camunda.camundaclient.generated.model.JobDefinitionPriorityDto;
import com.tosan.camunda.camundaclient.generated.model.JobDefinitionQueryDto;
import com.tosan.camunda.camundaclient.generated.model.JobDefinitionSuspensionStateDto;
import com.tosan.camunda.camundaclient.generated.model.JobDefinitionsSuspensionStateDto;
import com.tosan.camunda.camundaclient.generated.model.RetriesDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Job Definition", description = "the Job Definition API")
public interface JobDefinitionApi {

    /**
     * GET /job-definition/{id} : Get Job Definition
     * Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
     *
     * @param id The id of the job definition to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Job definition with given id does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getJobDefinition",
        summary = "Get Job Definition",
        description = "Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Job definition with given id does not exist.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job-definition/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<JobDefinitionDto> getJobDefinition(
        @Parameter(name = "id", description = "The id of the job definition to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /job-definition : Get Job Definitions
     * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query-count/) method.
     *
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)
     * @param processDefinitionId Only include job definitions which exist for the given process definition id. (optional)
     * @param processDefinitionKey Only include job definitions which exist for the given process definition key. (optional)
     * @param jobType Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)
     * @param jobConfiguration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)
     * @param active Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)
     * @param tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getJobDefinitions",
        summary = "Get Job Definitions",
        description = "Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query-count/) method.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDefinitionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job-definition",
        produces = { "application/json" }
    )
    ResponseEntity<List<JobDefinitionDto>> getJobDefinitions(
        @Parameter(name = "jobDefinitionId", description = "Filter by job definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "activityIdIn", description = "Only include job definitions which belong to one of the passed and comma-separated activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "processDefinitionId", description = "Only include job definitions which exist for the given process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Only include job definitions which exist for the given process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "jobType", description = "Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobType", required = false) String jobType,
        @Parameter(name = "jobConfiguration", description = "Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobConfiguration", required = false) String jobConfiguration,
        @Parameter(name = "active", description = "Only include active job definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended job definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "withOverridingJobPriority", description = "Only include job definitions that have an overriding job priority defined. The only effective value is `true`. If set to `false`, this filter is not applied.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withOverridingJobPriority", required = false) Boolean withOverridingJobPriority,
        @Parameter(name = "tenantIdIn", description = "Only include job definitions which belong to one of the passed and comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include job definitions which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeJobDefinitionsWithoutTenantId", description = "Include job definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeJobDefinitionsWithoutTenantId", required = false) Boolean includeJobDefinitionsWithoutTenantId,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /job-definition/count : Get Job Definition Count
     * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query/) method.
     *
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)
     * @param processDefinitionId Only include job definitions which exist for the given process definition id. (optional)
     * @param processDefinitionKey Only include job definitions which exist for the given process definition key. (optional)
     * @param jobType Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)
     * @param jobConfiguration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)
     * @param active Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)
     * @param tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getJobDefinitionsCount",
        summary = "Get Job Definition Count",
        description = "Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query/) method.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job-definition/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getJobDefinitionsCount(
        @Parameter(name = "jobDefinitionId", description = "Filter by job definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "activityIdIn", description = "Only include job definitions which belong to one of the passed and comma-separated activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "processDefinitionId", description = "Only include job definitions which exist for the given process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Only include job definitions which exist for the given process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "jobType", description = "Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobType", required = false) String jobType,
        @Parameter(name = "jobConfiguration", description = "Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobConfiguration", required = false) String jobConfiguration,
        @Parameter(name = "active", description = "Only include active job definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended job definitions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "withOverridingJobPriority", description = "Only include job definitions that have an overriding job priority defined. The only effective value is `true`. If set to `false`, this filter is not applied.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withOverridingJobPriority", required = false) Boolean withOverridingJobPriority,
        @Parameter(name = "tenantIdIn", description = "Only include job definitions which belong to one of the passed and comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include job definitions which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeJobDefinitionsWithoutTenantId", description = "Include job definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeJobDefinitionsWithoutTenantId", required = false) Boolean includeJobDefinitionsWithoutTenantId
    );


    /**
     * POST /job-definition : Get Job Definitions (POST)
     * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param jobDefinitionQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryJobDefinitions",
        summary = "Get Job Definitions (POST)",
        description = "Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types `String`, `Number` or `Boolean`.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDefinitionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job-definition",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<JobDefinitionDto>> queryJobDefinitions(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "JobDefinitionQueryDto", description = "") @Valid @RequestBody(required = false) JobDefinitionQueryDto jobDefinitionQueryDto
    );


    /**
     * POST /job-definition/count : Get Job Definition Count (POST)
     * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query-count/) method.
     *
     * @param jobDefinitionQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryJobDefinitionsCount",
        summary = "Get Job Definition Count (POST)",
        description = "Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/job-definition/get-query-count/) method.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job-definition/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryJobDefinitionsCount(
        @Parameter(name = "JobDefinitionQueryDto", description = "") @Valid @RequestBody(required = false) JobDefinitionQueryDto jobDefinitionQueryDto
    );


    /**
     * PUT /job-definition/{id}/jobPriority : Set Job Definition Priority by Id
     * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
     *
     * @param id The id of the job definition to be updated. (required)
     * @param jobDefinitionPriorityDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Job definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "setJobPriorityJobDefinition",
        summary = "Set Job Definition Priority by Id",
        description = "Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions' existing jobs are updated accordingly. The priority can be reset by setting it to `null`, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Job definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job-definition/{id}/jobPriority",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setJobPriorityJobDefinition(
        @Parameter(name = "id", description = "The id of the job definition to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "JobDefinitionPriorityDto", description = "") @Valid @RequestBody(required = false) JobDefinitionPriorityDto jobDefinitionPriorityDto
    );


    /**
     * PUT /job-definition/{id}/retries : Set Job Retries By Job Definition Id
     * Sets the number of retries of all **failed** jobs associated with the given job definition id.
     *
     * @param id The id of the job definition to be updated. (required)
     * @param retriesDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "setJobRetriesJobDefinition",
        summary = "Set Job Retries By Job Definition Id",
        description = "Sets the number of retries of all **failed** jobs associated with the given job definition id.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "500", description = "The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job-definition/{id}/retries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setJobRetriesJobDefinition(
        @Parameter(name = "id", description = "The id of the job definition to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RetriesDto", description = "") @Valid @RequestBody(required = false) RetriesDto retriesDto
    );


    /**
     * PUT /job-definition/{id}/suspended : Activate/Suspend Job Definition By Id
     * Activates or suspends a given job definition by id.
     *
     * @param id The id of the job definition to activate or suspend. (required)
     * @param jobDefinitionSuspensionStateDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Returned if some of the request parameters are invalid, for example if the provided &#x60;executionDate&#x60; parameter doesn&#39;t have the expected format. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "updateSuspensionStateJobDefinition",
        summary = "Activate/Suspend Job Definition By Id",
        description = "Activates or suspends a given job definition by id.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid, for example if the provided `executionDate` parameter doesn't have the expected format. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job-definition/{id}/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateSuspensionStateJobDefinition(
        @Parameter(name = "id", description = "The id of the job definition to activate or suspend.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "JobDefinitionSuspensionStateDto", description = "") @Valid @RequestBody(required = false) JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto
    );


    /**
     * PUT /job-definition/suspended : Activate/Suspend Job Definitions
     * Activates or suspends job definitions with the given process definition id or process definition key.
     *
     * @param jobDefinitionsSuspensionStateDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Returned if some of the request parameters are invalid, for example if the provided &#x60;executionDate&#x60; parameter doesn&#39;t have the expected format. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "updateSuspensionStateJobDefinitions",
        summary = "Activate/Suspend Job Definitions",
        description = "Activates or suspends job definitions with the given process definition id or process definition key.",
        tags = { "Job Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid, for example if the provided `executionDate` parameter doesn't have the expected format. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job-definition/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateSuspensionStateJobDefinitions(
        @Parameter(name = "JobDefinitionsSuspensionStateDto", description = "") @Valid @RequestBody(required = false) JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto
    );

}
