/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AuthenticationResult;
import com.tosan.camunda.camundaclient.generated.model.BasicUserCredentialsDto;
import com.tosan.camunda.camundaclient.generated.model.CheckPasswordPolicyResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.IdentityServiceGroupInfoDto;
import com.tosan.camunda.camundaclient.generated.model.PasswordPolicyDto;
import com.tosan.camunda.camundaclient.generated.model.PasswordPolicyRequestDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Identity", description = "the Identity API")
public interface IdentityApi {

    /**
     * POST /identity/password-policy : Validate Password
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.17/user-guide/security/).
     *
     * @param passwordPolicyRequestDto  (optional)
     * @return Request successful. This example uses the built-in password policy that enforces a minimum password length, and some complexity rules. The checked password is myPassword which is not complex enough to match all of the policy rules. (status code 200)
     *         or No password policy was found to check the password against. (status code 404)
     */
    @Operation(
        operationId = "checkPassword",
        summary = "Validate Password",
        description = "A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.17/user-guide/security/).",
        tags = { "Identity" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. This example uses the built-in password policy that enforces a minimum password length, and some complexity rules. The checked password is myPassword which is not complex enough to match all of the policy rules.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckPasswordPolicyResultDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "No password policy was found to check the password against.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/identity/password-policy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CheckPasswordPolicyResultDto> checkPassword(
        @Parameter(name = "PasswordPolicyRequestDto", description = "") @Valid @RequestBody(required = false) PasswordPolicyRequestDto passwordPolicyRequestDto
    );


    /**
     * GET /identity/groups : Get a User&#39;s Groups
     * Gets the groups of a user by id and includes all users that share a group with the given user.
     *
     * @param userId The id of the user to get the groups for. (required)
     * @return Request successful. (status code 200)
     *         or If the &#x60;userId&#x60; query parameter is missing. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getGroupInfo",
        summary = "Get a User's Groups",
        description = "Gets the groups of a user by id and includes all users that share a group with the given user.",
        tags = { "Identity" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IdentityServiceGroupInfoDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "If the `userId` query parameter is missing. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/identity/groups",
        produces = { "application/json" }
    )
    ResponseEntity<IdentityServiceGroupInfoDto> getGroupInfo(
        @NotNull @Parameter(name = "userId", description = "The id of the user to get the groups for.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    );


    /**
     * GET /identity/password-policy : Get Password Policy
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.17/user-guide/security/).
     *
     * @return Request successful. This example uses the built-in password policy that enforces a minimum password length, and some complexity rules. (status code 200)
     *         or No password policy was found. (status code 404)
     */
    @Operation(
        operationId = "getPasswordPolicy",
        summary = "Get Password Policy",
        description = "A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.17/user-guide/security/).",
        tags = { "Identity" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. This example uses the built-in password policy that enforces a minimum password length, and some complexity rules.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PasswordPolicyDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "No password policy was found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/identity/password-policy",
        produces = { "application/json" }
    )
    ResponseEntity<PasswordPolicyDto> getPasswordPolicy(
        
    );


    /**
     * POST /identity/verify : Verify User
     * Verifies that user credentials are valid.
     *
     * @param basicUserCredentialsDto  (optional)
     * @return Request successful. (status code 200)
     *         or If body does not contain username or password. (status code 400)
     */
    @Operation(
        operationId = "verifyUser",
        summary = "Verify User",
        description = "Verifies that user credentials are valid.",
        tags = { "Identity" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthenticationResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "If body does not contain username or password.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/identity/verify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AuthenticationResult> verifyUser(
        @Parameter(name = "BasicUserCredentialsDto", description = "") @Valid @RequestBody(required = false) BasicUserCredentialsDto basicUserCredentialsDto
    );

}
