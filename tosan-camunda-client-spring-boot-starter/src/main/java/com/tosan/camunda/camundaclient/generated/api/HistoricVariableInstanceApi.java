/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricVariableInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricVariableInstanceQueryDto;
import org.springframework.core.io.Resource;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface HistoricVariableInstanceApi {

    Logger log = LoggerFactory.getLogger(HistoricVariableInstanceApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Delete Variable Instance", description = "Deletes a historic variable instance by id.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteHistoricVariableInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the variable instance.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Variable Instance", description = "Retrieves a historic variable by id.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricVariableInstanceDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<HistoricVariableInstanceDto> getHistoricVariableInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the variable instance.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine." ,schema=@Schema()) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues);


    @Operation(summary = "Get Variable Instance (Binary)", description = "Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "400", description = "Variable with given id exists but is not a binary variable. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance/{id}/data",
        produces = { "application/octet-stream", "*/*", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getHistoricVariableInstanceBinary(@Parameter(in = ParameterIn.PATH, description = "The id of the variable instance.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Variable Instances", description = "Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricVariableInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<HistoricVariableInstanceDto>> getHistoricVariableInstances(@Parameter(in = ParameterIn.QUERY, description = "Filter by variable name." ,schema=@Schema()) @Valid @RequestParam(value = "variableName", required = false) String variableName, @Parameter(in = ParameterIn.QUERY, description = "Restrict to variables with a name like the parameter." ,schema=@Schema()) @Valid @RequestParam(value = "variableNameLike", required = false) String variableNameLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by variable value. Is treated as a `String` object on server side." ,schema=@Schema()) @Valid @RequestParam(value = "variableValue", required = false) Object variableValue, @Parameter(in = ParameterIn.QUERY, description = "Match the variable name provided in `variableName` and `variableNameLike` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Match the variable value provided in `variableValue` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type 'serializable'." ,schema=@Schema()) @Valid @RequestParam(value = "variableTypeIn", required = false) String variableTypeIn, @Parameter(in = ParameterIn.QUERY, description = "Include variables that has already been deleted during the execution." ,schema=@Schema()) @Valid @RequestParam(value = "includeDeleted", required = false) Boolean includeDeleted, @Parameter(in = ParameterIn.QUERY, description = "Filter by the process instance the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma-separated process instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the process definition the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a key of the process definition the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated execution ids." ,schema=@Schema()) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the case instance the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids." ,schema=@Schema()) @Valid @RequestParam(value = "caseExecutionIdIn", required = false) String caseExecutionIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids." ,schema=@Schema()) @Valid @RequestParam(value = "caseActivityIdIn", required = false) String caseActivityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated task ids." ,schema=@Schema()) @Valid @RequestParam(value = "taskIdIn", required = false) String taskIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma- separated tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma-separated variable names." ,schema=@Schema()) @Valid @RequestParam(value = "variableNameIn", required = false) String variableNameIn, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "instanceId", "variableName", "tenantId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.QUERY, description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine." ,schema=@Schema()) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues);


    @Operation(summary = "Get Variable Instance Count", description = "Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query/) method.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getHistoricVariableInstancesCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by variable name." ,schema=@Schema()) @Valid @RequestParam(value = "variableName", required = false) String variableName, @Parameter(in = ParameterIn.QUERY, description = "Restrict to variables with a name like the parameter." ,schema=@Schema()) @Valid @RequestParam(value = "variableNameLike", required = false) String variableNameLike, @Parameter(in = ParameterIn.QUERY, description = "Filter by variable value. Is treated as a `String` object on server side." ,schema=@Schema()) @Valid @RequestParam(value = "variableValue", required = false) Object variableValue, @Parameter(in = ParameterIn.QUERY, description = "Match the variable name provided in `variableName` and `variableNameLike` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Match the variable value provided in `variableValue` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type 'serializable'." ,schema=@Schema()) @Valid @RequestParam(value = "variableTypeIn", required = false) String variableTypeIn, @Parameter(in = ParameterIn.QUERY, description = "Include variables that has already been deleted during the execution." ,schema=@Schema()) @Valid @RequestParam(value = "includeDeleted", required = false) Boolean includeDeleted, @Parameter(in = ParameterIn.QUERY, description = "Filter by the process instance the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma-separated process instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the process definition the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a key of the process definition the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated execution ids." ,schema=@Schema()) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the case instance the variable belongs to." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids." ,schema=@Schema()) @Valid @RequestParam(value = "caseExecutionIdIn", required = false) String caseExecutionIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids." ,schema=@Schema()) @Valid @RequestParam(value = "caseActivityIdIn", required = false) String caseActivityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated task ids." ,schema=@Schema()) @Valid @RequestParam(value = "taskIdIn", required = false) String taskIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma- separated tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Only include historic variable instances which belong to one of the passed and comma-separated variable names." ,schema=@Schema()) @Valid @RequestParam(value = "variableNameIn", required = false) String variableNameIn);


    @Operation(summary = "Get Variable Instances (POST)", description = "Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types `String`, `Number` or `Boolean`.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricVariableInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<HistoricVariableInstanceDto>> queryHistoricVariableInstances(@Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.QUERY, description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine." ,schema=@Schema()) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody HistoricVariableInstanceQueryDto body);


    @Operation(summary = "Get Variable Instance Count (POST)", description = "Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.", tags={ "Historic Variable Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/variable-instance/count",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CountResultDto> queryHistoricVariableInstancesCount(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody HistoricVariableInstanceQueryDto body);

}

