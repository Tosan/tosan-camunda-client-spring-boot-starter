/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricVariableInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricVariableInstanceQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Variable Instance", description = "the Historic Variable Instance API")
public interface HistoricVariableInstanceApi {

    /**
     * DELETE /history/variable-instance/{id} : Delete Variable Instance
     * Deletes a historic variable instance by id.
     *
     * @param id The id of the variable instance. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteHistoricVariableInstance",
        summary = "Delete Variable Instance",
        description = "Deletes a historic variable instance by id.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/history/variable-instance/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteHistoricVariableInstance(
        @Parameter(name = "id", description = "The id of the variable instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/variable-instance/{id} : Get Variable Instance
     * Retrieves a historic variable by id.
     *
     * @param id The id of the variable instance. (required)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @return Request successful. (status code 200)
     *         or Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricVariableInstance",
        summary = "Get Variable Instance",
        description = "Retrieves a historic variable by id.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricVariableInstanceDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/variable-instance/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<HistoricVariableInstanceDto> getHistoricVariableInstance(
        @Parameter(name = "id", description = "The id of the variable instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues
    );


    /**
     * GET /history/variable-instance/{id}/data : Get Variable Instance (Binary)
     * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
     *
     * @param id The id of the variable instance. (required)
     * @return Request successful. (status code 200)
     *         or Variable with given id exists but is not a binary variable. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricVariableInstanceBinary",
        summary = "Get Variable Instance (Binary)",
        description = "Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Variable with given id exists but is not a binary variable. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/variable-instance/{id}/data",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getHistoricVariableInstanceBinary(
        @Parameter(name = "id", description = "The id of the variable instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/variable-instance : Get Variable Instances
     * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     *
     * @param variableName Filter by variable name. (optional)
     * @param variableNameLike Restrict to variables with a name like the parameter. (optional)
     * @param variableValue Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param variableTypeIn Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param includeDeleted Include variables that has already been deleted during the execution. (optional)
     * @param processInstanceId Filter by the process instance the variable belongs to. (optional)
     * @param processInstanceIdIn Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param processDefinitionId Filter by the process definition the variable belongs to. (optional)
     * @param processDefinitionKey Filter by a key of the process definition the variable belongs to. (optional)
     * @param executionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param caseInstanceId Filter by the case instance the variable belongs to. (optional)
     * @param caseExecutionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param caseActivityIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param taskIdIn Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param activityInstanceIdIn Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param tenantIdIn Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param withoutTenantId Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param variableNameIn Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricVariableInstances",
        summary = "Get Variable Instances",
        description = "Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricVariableInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/variable-instance",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricVariableInstanceDto>> getHistoricVariableInstances(
        @Parameter(name = "variableName", description = "Filter by variable name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableName", required = false) String variableName,
        @Parameter(name = "variableNameLike", description = "Restrict to variables with a name like the parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNameLike", required = false) String variableNameLike,
        @Parameter(name = "variableValue", description = "Filter by variable value. Is treated as a `String` object on server side.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object variableValue,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match the variable name provided in `variableName` and `variableNameLike` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match the variable value provided in `variableValue` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase,
        @Parameter(name = "variableTypeIn", description = "Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type 'serializable'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableTypeIn", required = false) String variableTypeIn,
        @Parameter(name = "includeDeleted", description = "Include variables that has already been deleted during the execution.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDeleted", required = false) Boolean includeDeleted,
        @Parameter(name = "processInstanceId", description = "Filter by the process instance the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIdIn", description = "Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by a key of the process definition the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "executionIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn,
        @Parameter(name = "caseInstanceId", description = "Filter by the case instance the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseExecutionIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionIdIn", required = false) String caseExecutionIdIn,
        @Parameter(name = "caseActivityIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseActivityIdIn", required = false) String caseActivityIdIn,
        @Parameter(name = "taskIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated task ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskIdIn", required = false) String taskIdIn,
        @Parameter(name = "activityInstanceIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "tenantIdIn", description = "Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic variable instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "variableNameIn", description = "Only include historic variable instances which belong to one of the passed and comma-separated variable names.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNameIn", required = false) String variableNameIn,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues
    );


    /**
     * GET /history/variable-instance/count : Get Variable Instance Count
     * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query/) method.
     *
     * @param variableName Filter by variable name. (optional)
     * @param variableNameLike Restrict to variables with a name like the parameter. (optional)
     * @param variableValue Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param variableTypeIn Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param includeDeleted Include variables that has already been deleted during the execution. (optional)
     * @param processInstanceId Filter by the process instance the variable belongs to. (optional)
     * @param processInstanceIdIn Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param processDefinitionId Filter by the process definition the variable belongs to. (optional)
     * @param processDefinitionKey Filter by a key of the process definition the variable belongs to. (optional)
     * @param executionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param caseInstanceId Filter by the case instance the variable belongs to. (optional)
     * @param caseExecutionIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param caseActivityIdIn Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param taskIdIn Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param activityInstanceIdIn Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param tenantIdIn Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param withoutTenantId Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param variableNameIn Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricVariableInstancesCount",
        summary = "Get Variable Instance Count",
        description = "Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query/) method.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/variable-instance/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricVariableInstancesCount(
        @Parameter(name = "variableName", description = "Filter by variable name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableName", required = false) String variableName,
        @Parameter(name = "variableNameLike", description = "Restrict to variables with a name like the parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNameLike", required = false) String variableNameLike,
        @Parameter(name = "variableValue", description = "Filter by variable value. Is treated as a `String` object on server side.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object variableValue,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match the variable name provided in `variableName` and `variableNameLike` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match the variable value provided in `variableValue` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase,
        @Parameter(name = "variableTypeIn", description = "Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type 'serializable'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableTypeIn", required = false) String variableTypeIn,
        @Parameter(name = "includeDeleted", description = "Include variables that has already been deleted during the execution.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDeleted", required = false) Boolean includeDeleted,
        @Parameter(name = "processInstanceId", description = "Filter by the process instance the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIdIn", description = "Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by a key of the process definition the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "executionIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn,
        @Parameter(name = "caseInstanceId", description = "Filter by the case instance the variable belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseExecutionIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionIdIn", required = false) String caseExecutionIdIn,
        @Parameter(name = "caseActivityIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseActivityIdIn", required = false) String caseActivityIdIn,
        @Parameter(name = "taskIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated task ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskIdIn", required = false) String taskIdIn,
        @Parameter(name = "activityInstanceIdIn", description = "Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "tenantIdIn", description = "Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic variable instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "variableNameIn", description = "Only include historic variable instances which belong to one of the passed and comma-separated variable names.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNameIn", required = false) String variableNameIn
    );


    /**
     * POST /history/variable-instance : Get Variable Instances (POST)
     * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param historicVariableInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricVariableInstances",
        summary = "Get Variable Instances (POST)",
        description = "Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types `String`, `Number` or `Boolean`.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricVariableInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/variable-instance",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<HistoricVariableInstanceDto>> queryHistoricVariableInstances(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues,
        @Parameter(name = "HistoricVariableInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto
    );


    /**
     * POST /history/variable-instance/count : Get Variable Instance Count (POST)
     * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     *
     * @param historicVariableInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricVariableInstancesCount",
        summary = "Get Variable Instance Count (POST)",
        description = "Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.",
        tags = { "Historic Variable Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/variable-instance/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryHistoricVariableInstancesCount(
        @Parameter(name = "HistoricVariableInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto
    );

}
