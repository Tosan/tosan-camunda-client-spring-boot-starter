/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.DeleteHistoricProcessInstancesDto;
import com.tosan.camunda.camundaclient.generated.model.DurationReportResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricProcessInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricProcessInstanceQueryDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.SetRemovalTimeToHistoricProcessInstancesDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface HistoricProcessInstanceApi {

    Logger log = LoggerFactory.getLogger(HistoricProcessInstanceApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Delete", description = "Deletes a process instance from the history by id.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "404", description = "Not found Historic process instance with given id does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteHistoricProcessInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the historic process instance to be deleted.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "If set to `false`, the request will still be successful if the process id is not found." ,schema=@Schema()) @Valid @RequestParam(value = "failIfNotExists", required = false) Boolean failIfNotExists);


    @Operation(summary = "Delete Async (POST)", description = "Delete multiple historic process instances asynchronously (batch). At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds, nor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/delete",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> deleteHistoricProcessInstancesAsync(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody DeleteHistoricProcessInstancesDto body);


    @Operation(summary = "Delete Variable Instances", description = "Deletes all variables of a process instance from the history by id.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "404", description = "Not found Historic process instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#parse-exceptions) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/{id}/variable-instances",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteHistoricVariableInstancesOfHistoricProcessInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the process instance for which all historic variables are to be deleted.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get", description = "Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricProcessInstanceDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found Historic process instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<HistoricProcessInstanceDto> getHistoricProcessInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the historic process instance to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Duration Report", description = "Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DurationReportResultDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "If the authenticated user is unauthorized to read the history. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/report",
        produces = { "application/json", "application/csv", "text/csv" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DurationReportResultDto>> getHistoricProcessInstanceDurationReport(@NotNull @Parameter(in = ParameterIn.QUERY, description = "**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to `duration`." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "reportType", required = true) String reportType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "**Mandatory.** Specifies the granularity of the report. Valid values are `month` and `quarter`." ,required=true,schema=@Schema(allowableValues={ "month", "quarter" }
)) @Valid @RequestParam(value = "periodUnit", required = true) String periodUnit, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition ids. Must be a comma-separated list of process definition ids." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionIdIn", required = false) String processDefinitionIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition keys. Must be a comma-separated list of process definition keys." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started before the given date. By [default](), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedBefore", required = false) OffsetDateTime startedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedAfter", required = false) OffsetDateTime startedAfter);


    @Operation(summary = "Get List", description = "Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query-count/) method.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricProcessInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<HistoricProcessInstanceDto>> getHistoricProcessInstances(@Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "instanceId", "definitionId", "definitionKey", "definitionName", "definitionVersion", "businessKey", "startTime", "endTime", "duration", "tenantId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance ids. Filter by a comma-separated list of `Strings`." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds, @Parameter(in = ParameterIn.QUERY, description = "Filter by the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the key of the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name of the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition names that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike, @Parameter(in = ParameterIn.QUERY, description = "Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyNotIn", required = false) String processDefinitionKeyNotIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike, @Parameter(in = ParameterIn.QUERY, description = "Restrict the query to all process instances that are top level process instances." ,schema=@Schema()) @Valid @RequestParam(value = "rootProcessInstances", required = false) Boolean rootProcessInstances, @Parameter(in = ParameterIn.QUERY, description = "Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "finished", required = false) Boolean finished, @Parameter(in = ParameterIn.QUERY, description = "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withIncidents", required = false) Boolean withIncidents, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withRootIncidents", required = false) Boolean withRootIncidents, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types." ,schema=@Schema()) @Valid @RequestParam(value = "incidentType", required = false) String incidentType, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents." ,schema=@Schema(allowableValues={ "open", "resolved" }
)) @Valid @RequestParam(value = "incidentStatus", required = false) String incidentStatus, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message. Exact match." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedBefore", required = false) OffsetDateTime startedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedAfter", required = false) OffsetDateTime startedAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedBefore", required = false) OffsetDateTime finishedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedAfter", required = false) OffsetDateTime finishedAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedActivityAfter", required = false) OffsetDateTime executedActivityAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedActivityBefore", required = false) OffsetDateTime executedActivityBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedJobAfter", required = false) OffsetDateTime executedJobAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedJobBefore", required = false) OffsetDateTime executedJobBefore, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances that were started by the given user." ,schema=@Schema()) @Valid @RequestParam(value = "startedBy", required = false) String startedBy, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superProcessInstanceId", required = false) String superProcessInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to one process instance that has a sub process instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "subProcessInstanceId", required = false) String subProcessInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superCaseInstanceId", required = false) String superCaseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to one process instance that has a sub case instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "subCaseInstanceId", required = false) String subCaseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "executedActivityIdIn", required = false) String executedActivityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "activeActivityIdIn", required = false) String activeActivityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are active." ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are suspended." ,schema=@Schema()) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are completed." ,schema=@Schema()) @Valid @RequestParam(value = "completed", required = false) Boolean completed, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are externallyTerminated." ,schema=@Schema()) @Valid @RequestParam(value = "externallyTerminated", required = false) Boolean externallyTerminated, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are internallyTerminated." ,schema=@Schema()) @Valid @RequestParam(value = "internallyTerminated", required = false) Boolean internallyTerminated, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.  Key and value may not contain underscore or comma characters. " ,schema=@Schema()) @Valid @RequestParam(value = "variables", required = false) String variables, @Parameter(in = ParameterIn.QUERY, description = "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase);


    @Operation(summary = "Get List Count", description = "Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) method.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getHistoricProcessInstancesCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance ids. Filter by a comma-separated list of `Strings`." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds, @Parameter(in = ParameterIn.QUERY, description = "Filter by the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the key of the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name of the process definition the instances run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition names that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike, @Parameter(in = ParameterIn.QUERY, description = "Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyNotIn", required = false) String processDefinitionKeyNotIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance business key that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike, @Parameter(in = ParameterIn.QUERY, description = "Restrict the query to all process instances that are top level process instances." ,schema=@Schema()) @Valid @RequestParam(value = "rootProcessInstances", required = false) Boolean rootProcessInstances, @Parameter(in = ParameterIn.QUERY, description = "Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "finished", required = false) Boolean finished, @Parameter(in = ParameterIn.QUERY, description = "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withIncidents", required = false) Boolean withIncidents, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withRootIncidents", required = false) Boolean withRootIncidents, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types." ,schema=@Schema()) @Valid @RequestParam(value = "incidentType", required = false) String incidentType, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents." ,schema=@Schema(allowableValues={ "open", "resolved" }
)) @Valid @RequestParam(value = "incidentStatus", required = false) String incidentStatus, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message. Exact match." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage, @Parameter(in = ParameterIn.QUERY, description = "Filter by the incident message that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedBefore", required = false) OffsetDateTime startedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedAfter", required = false) OffsetDateTime startedAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedBefore", required = false) OffsetDateTime finishedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedAfter", required = false) OffsetDateTime finishedAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedActivityAfter", required = false) OffsetDateTime executedActivityAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedActivityBefore", required = false) OffsetDateTime executedActivityBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedJobAfter", required = false) OffsetDateTime executedJobAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "executedJobBefore", required = false) OffsetDateTime executedJobBefore, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances that were started by the given user." ,schema=@Schema()) @Valid @RequestParam(value = "startedBy", required = false) String startedBy, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superProcessInstanceId", required = false) String superProcessInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to one process instance that has a sub process instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "subProcessInstanceId", required = false) String subProcessInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "superCaseInstanceId", required = false) String superCaseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to one process instance that has a sub case instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "subCaseInstanceId", required = false) String subCaseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "executedActivityIdIn", required = false) String executedActivityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings`" ,schema=@Schema()) @Valid @RequestParam(value = "activeActivityIdIn", required = false) String activeActivityIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are active." ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are suspended." ,schema=@Schema()) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are completed." ,schema=@Schema()) @Valid @RequestParam(value = "completed", required = false) Boolean completed, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are externallyTerminated." ,schema=@Schema()) @Valid @RequestParam(value = "externallyTerminated", required = false) Boolean externallyTerminated, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that are internallyTerminated." ,schema=@Schema()) @Valid @RequestParam(value = "internallyTerminated", required = false) Boolean internallyTerminated, @Parameter(in = ParameterIn.QUERY, description = "Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.  Key and value may not contain underscore or comma characters. " ,schema=@Schema()) @Valid @RequestParam(value = "variables", required = false) String variables, @Parameter(in = ParameterIn.QUERY, description = "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase, @Parameter(in = ParameterIn.QUERY, description = "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal." ,schema=@Schema()) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase);


    @Operation(summary = "Get List (POST)", description = "Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricProcessInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<HistoricProcessInstanceDto>> queryHistoricProcessInstances(@Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody HistoricProcessInstanceQueryDto body);


    @Operation(summary = "Get List Count (POST)", description = "Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/post-process-instance-query-count/) method.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/count",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CountResultDto> queryHistoricProcessInstancesCount(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody HistoricProcessInstanceQueryDto body);


    @Operation(summary = "Set Removal Time Async (POST)", description = "Sets the removal time to multiple historic process instances asynchronously (batch).  At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.", tags={ "Historic Process Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid, e. g. if neither `historicProcessInstances` nor `historicProcessInstanceQuery` is present or if no mode is specified.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/process-instance/set-removal-time",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> setRemovalTimeAsync(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SetRemovalTimeToHistoricProcessInstancesDto body);

}

