/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.DeleteHistoricProcessInstancesDto;
import com.tosan.camunda.camundaclient.generated.model.DurationReportResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricProcessInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricProcessInstanceQueryDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.SetRemovalTimeToHistoricProcessInstancesDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Process Instance", description = "the Historic Process Instance API")
public interface HistoricProcessInstanceApi {

    /**
     * DELETE /history/process-instance/{id} : Delete
     * Deletes a process instance from the history by id.
     *
     * @param id The id of the historic process instance to be deleted. (required)
     * @param failIfNotExists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     * @return Request successful. (status code 204)
     *         or Not found Historic process instance with given id does not exist. (status code 404)
     */
    @Operation(
        operationId = "deleteHistoricProcessInstance",
        summary = "Delete",
        description = "Deletes a process instance from the history by id.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "404", description = "Not found Historic process instance with given id does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/history/process-instance/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteHistoricProcessInstance(
        @Parameter(name = "id", description = "The id of the historic process instance to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "failIfNotExists", description = "If set to `false`, the request will still be successful if the process id is not found.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failIfNotExists", required = false) Boolean failIfNotExists
    );


    /**
     * POST /history/process-instance/delete : Delete Async (POST)
     * Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
     *
     * @param deleteHistoricProcessInstancesDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds, nor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "deleteHistoricProcessInstancesAsync",
        summary = "Delete Async (POST)",
        description = "Delete multiple historic process instances asynchronously (batch). At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds, nor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/process-instance/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> deleteHistoricProcessInstancesAsync(
        @Parameter(name = "DeleteHistoricProcessInstancesDto", description = "") @Valid @RequestBody(required = false) DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto
    );


    /**
     * DELETE /history/process-instance/{id}/variable-instances : Delete Variable Instances
     * Deletes all variables of a process instance from the history by id.
     *
     * @param id The id of the process instance for which all historic variables are to be deleted. (required)
     * @return Request successful. (status code 204)
     *         or Not found Historic process instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#parse-exceptions) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteHistoricVariableInstancesOfHistoricProcessInstance",
        summary = "Delete Variable Instances",
        description = "Deletes all variables of a process instance from the history by id.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "404", description = "Not found Historic process instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#parse-exceptions) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/history/process-instance/{id}/variable-instances",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteHistoricVariableInstancesOfHistoricProcessInstance(
        @Parameter(name = "id", description = "The id of the process instance for which all historic variables are to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/process-instance/{id} : Get
     * Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
     *
     * @param id The id of the historic process instance to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Not Found Historic process instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricProcessInstance",
        summary = "Get",
        description = "Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricProcessInstanceDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found Historic process instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/process-instance/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<HistoricProcessInstanceDto> getHistoricProcessInstance(
        @Parameter(name = "id", description = "The id of the historic process instance to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/process-instance/report : Get Duration Report
     * Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
     *
     * @param reportType **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param periodUnit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param processDefinitionIdIn Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param processDefinitionKeyIn Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param startedBefore Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the authenticated user is unauthorized to read the history. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     */
    @Operation(
        operationId = "getHistoricProcessInstanceDurationReport",
        summary = "Get Duration Report",
        description = "Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DurationReportResultDto.class))),
                @Content(mediaType = "application/csv", array = @ArraySchema(schema = @Schema(implementation = DurationReportResultDto.class))),
                @Content(mediaType = "text/csv", array = @ArraySchema(schema = @Schema(implementation = DurationReportResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/csv", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "text/csv", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "If the authenticated user is unauthorized to read the history. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/csv", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "text/csv", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/process-instance/report",
        produces = { "application/json", "application/csv", "text/csv" }
    )
    ResponseEntity<List<DurationReportResultDto>> getHistoricProcessInstanceDurationReport(
        @NotNull @Parameter(name = "reportType", description = "**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to `duration`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "reportType", required = true) String reportType,
        @NotNull @Parameter(name = "periodUnit", description = "**Mandatory.** Specifies the granularity of the report. Valid values are `month` and `quarter`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "periodUnit", required = true) String periodUnit,
        @Parameter(name = "processDefinitionIdIn", description = "Filter by process definition ids. Must be a comma-separated list of process definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionIdIn", required = false) String processDefinitionIdIn,
        @Parameter(name = "processDefinitionKeyIn", description = "Filter by process definition keys. Must be a comma-separated list of process definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "startedBefore", description = "Restrict to instances that were started before the given date. By [default](), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter
    );


    /**
     * GET /history/process-instance : Get List
     * Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query-count/) method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processInstanceIds Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param processDefinitionId Filter by the process definition the instances run on. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the instances run on. (optional)
     * @param processDefinitionKeyIn Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param processDefinitionName Filter by the name of the process definition the instances run on. (optional)
     * @param processDefinitionNameLike Filter by process definition names that the parameter is a substring of. (optional)
     * @param processDefinitionKeyNotIn Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param processInstanceBusinessKey Filter by process instance business key. (optional)
     * @param processInstanceBusinessKeyIn Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param processInstanceBusinessKeyLike Filter by process instance business key that the parameter is a substring of. (optional)
     * @param rootProcessInstances Restrict the query to all process instances that are top level process instances. (optional)
     * @param finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withIncidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withRootIncidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentStatus Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedActivityAfter Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedActivityBefore Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedJobAfter Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedJobBefore Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedBy Only include process instances that were started by the given user. (optional)
     * @param superProcessInstanceId Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param subProcessInstanceId Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param superCaseInstanceId Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param subCaseInstanceId Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param caseInstanceId Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param tenantIdIn Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param withoutTenantId Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param executedActivityIdIn Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param activeActivityIdIn Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param active Restrict to instances that are active. (optional)
     * @param suspended Restrict to instances that are suspended. (optional)
     * @param completed Restrict to instances that are completed. (optional)
     * @param externallyTerminated Restrict to instances that are externallyTerminated. (optional)
     * @param internallyTerminated Restrict to instances that are internallyTerminated. (optional)
     * @param variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)
     * @param variableNamesIgnoreCase Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricProcessInstances",
        summary = "Get List",
        description = "Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query-count/) method.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricProcessInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/process-instance",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricProcessInstanceDto>> getHistoricProcessInstances(
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIds", description = "Filter by process instance ids. Filter by a comma-separated list of `Strings`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the instances run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the instances run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processDefinitionKeyIn", description = "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "processDefinitionName", description = "Filter by the name of the process definition the instances run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,
        @Parameter(name = "processDefinitionNameLike", description = "Filter by process definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,
        @Parameter(name = "processDefinitionKeyNotIn", description = "Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyNotIn", required = false) String processDefinitionKeyNotIn,
        @Parameter(name = "processInstanceBusinessKey", description = "Filter by process instance business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,
        @Parameter(name = "processInstanceBusinessKeyIn", description = "Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn,
        @Parameter(name = "processInstanceBusinessKeyLike", description = "Filter by process instance business key that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,
        @Parameter(name = "rootProcessInstances", description = "Restrict the query to all process instances that are top level process instances.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootProcessInstances", required = false) Boolean rootProcessInstances,
        @Parameter(name = "finished", description = "Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finished", required = false) Boolean finished,
        @Parameter(name = "unfinished", description = "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished,
        @Parameter(name = "withIncidents", description = "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withIncidents", required = false) Boolean withIncidents,
        @Parameter(name = "withRootIncidents", description = "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRootIncidents", required = false) Boolean withRootIncidents,
        @Parameter(name = "incidentType", description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentStatus", description = "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentStatus", required = false) String incidentStatus,
        @Parameter(name = "incidentMessage", description = "Filter by the incident message. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Filter by the incident message that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "startedBefore", description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter,
        @Parameter(name = "finishedBefore", description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedBefore,
        @Parameter(name = "finishedAfter", description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedAfter,
        @Parameter(name = "executedActivityAfter", description = "Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedActivityAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedActivityAfter,
        @Parameter(name = "executedActivityBefore", description = "Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedActivityBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedActivityBefore,
        @Parameter(name = "executedJobAfter", description = "Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedJobAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedJobAfter,
        @Parameter(name = "executedJobBefore", description = "Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedJobBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedJobBefore,
        @Parameter(name = "startedBy", description = "Only include process instances that were started by the given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBy", required = false) String startedBy,
        @Parameter(name = "superProcessInstanceId", description = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "superProcessInstanceId", required = false) String superProcessInstanceId,
        @Parameter(name = "subProcessInstanceId", description = "Restrict query to one process instance that has a sub process instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subProcessInstanceId", required = false) String subProcessInstanceId,
        @Parameter(name = "superCaseInstanceId", description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "superCaseInstanceId", required = false) String superCaseInstanceId,
        @Parameter(name = "subCaseInstanceId", description = "Restrict query to one process instance that has a sub case instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subCaseInstanceId", required = false) String subCaseInstanceId,
        @Parameter(name = "caseInstanceId", description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "tenantIdIn", description = "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "executedActivityIdIn", description = "Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedActivityIdIn", required = false) String executedActivityIdIn,
        @Parameter(name = "activeActivityIdIn", description = "Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activeActivityIdIn", required = false) String activeActivityIdIn,
        @Parameter(name = "active", description = "Restrict to instances that are active.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Restrict to instances that are suspended.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "completed", description = "Restrict to instances that are completed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completed", required = false) Boolean completed,
        @Parameter(name = "externallyTerminated", description = "Restrict to instances that are externallyTerminated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externallyTerminated", required = false) Boolean externallyTerminated,
        @Parameter(name = "internallyTerminated", description = "Restrict to instances that are internallyTerminated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "internallyTerminated", required = false) Boolean internallyTerminated,
        @Parameter(name = "variables", description = "Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.  Key and value may not contain underscore or comma characters. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variables", required = false) String variables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase
    );


    /**
     * GET /history/process-instance/count : Get List Count
     * Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) method.
     *
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processInstanceIds Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param processDefinitionId Filter by the process definition the instances run on. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the instances run on. (optional)
     * @param processDefinitionKeyIn Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param processDefinitionName Filter by the name of the process definition the instances run on. (optional)
     * @param processDefinitionNameLike Filter by process definition names that the parameter is a substring of. (optional)
     * @param processDefinitionKeyNotIn Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param processInstanceBusinessKey Filter by process instance business key. (optional)
     * @param processInstanceBusinessKeyIn Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param processInstanceBusinessKeyLike Filter by process instance business key that the parameter is a substring of. (optional)
     * @param rootProcessInstances Restrict the query to all process instances that are top level process instances. (optional)
     * @param finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withIncidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withRootIncidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentStatus Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedActivityAfter Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedActivityBefore Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedJobAfter Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param executedJobBefore Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedBy Only include process instances that were started by the given user. (optional)
     * @param superProcessInstanceId Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param subProcessInstanceId Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param superCaseInstanceId Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param subCaseInstanceId Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param caseInstanceId Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param tenantIdIn Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param withoutTenantId Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param executedActivityIdIn Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param activeActivityIdIn Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param active Restrict to instances that are active. (optional)
     * @param suspended Restrict to instances that are suspended. (optional)
     * @param completed Restrict to instances that are completed. (optional)
     * @param externallyTerminated Restrict to instances that are externallyTerminated. (optional)
     * @param internallyTerminated Restrict to instances that are internallyTerminated. (optional)
     * @param variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)
     * @param variableNamesIgnoreCase Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricProcessInstancesCount",
        summary = "Get List Count",
        description = "Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) method.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/process-instance/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricProcessInstancesCount(
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIds", description = "Filter by process instance ids. Filter by a comma-separated list of `Strings`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the instances run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the instances run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processDefinitionKeyIn", description = "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "processDefinitionName", description = "Filter by the name of the process definition the instances run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,
        @Parameter(name = "processDefinitionNameLike", description = "Filter by process definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,
        @Parameter(name = "processDefinitionKeyNotIn", description = "Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyNotIn", required = false) String processDefinitionKeyNotIn,
        @Parameter(name = "processInstanceBusinessKey", description = "Filter by process instance business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,
        @Parameter(name = "processInstanceBusinessKeyIn", description = "Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn,
        @Parameter(name = "processInstanceBusinessKeyLike", description = "Filter by process instance business key that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,
        @Parameter(name = "rootProcessInstances", description = "Restrict the query to all process instances that are top level process instances.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootProcessInstances", required = false) Boolean rootProcessInstances,
        @Parameter(name = "finished", description = "Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finished", required = false) Boolean finished,
        @Parameter(name = "unfinished", description = "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished,
        @Parameter(name = "withIncidents", description = "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withIncidents", required = false) Boolean withIncidents,
        @Parameter(name = "withRootIncidents", description = "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRootIncidents", required = false) Boolean withRootIncidents,
        @Parameter(name = "incidentType", description = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentStatus", description = "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentStatus", required = false) String incidentStatus,
        @Parameter(name = "incidentMessage", description = "Filter by the incident message. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Filter by the incident message that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "startedBefore", description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter,
        @Parameter(name = "finishedBefore", description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedBefore,
        @Parameter(name = "finishedAfter", description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedAfter,
        @Parameter(name = "executedActivityAfter", description = "Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedActivityAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedActivityAfter,
        @Parameter(name = "executedActivityBefore", description = "Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedActivityBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedActivityBefore,
        @Parameter(name = "executedJobAfter", description = "Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedJobAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedJobAfter,
        @Parameter(name = "executedJobBefore", description = "Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedJobBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executedJobBefore,
        @Parameter(name = "startedBy", description = "Only include process instances that were started by the given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBy", required = false) String startedBy,
        @Parameter(name = "superProcessInstanceId", description = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "superProcessInstanceId", required = false) String superProcessInstanceId,
        @Parameter(name = "subProcessInstanceId", description = "Restrict query to one process instance that has a sub process instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subProcessInstanceId", required = false) String subProcessInstanceId,
        @Parameter(name = "superCaseInstanceId", description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "superCaseInstanceId", required = false) String superCaseInstanceId,
        @Parameter(name = "subCaseInstanceId", description = "Restrict query to one process instance that has a sub case instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subCaseInstanceId", required = false) String subCaseInstanceId,
        @Parameter(name = "caseInstanceId", description = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "tenantIdIn", description = "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "executedActivityIdIn", description = "Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executedActivityIdIn", required = false) String executedActivityIdIn,
        @Parameter(name = "activeActivityIdIn", description = "Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activeActivityIdIn", required = false) String activeActivityIdIn,
        @Parameter(name = "active", description = "Restrict to instances that are active.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Restrict to instances that are suspended.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "completed", description = "Restrict to instances that are completed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completed", required = false) Boolean completed,
        @Parameter(name = "externallyTerminated", description = "Restrict to instances that are externallyTerminated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externallyTerminated", required = false) Boolean externallyTerminated,
        @Parameter(name = "internallyTerminated", description = "Restrict to instances that are internallyTerminated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "internallyTerminated", required = false) Boolean internallyTerminated,
        @Parameter(name = "variables", description = "Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.  Key and value may not contain underscore or comma characters. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variables", required = false) String variables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase
    );


    /**
     * POST /history/process-instance : Get List (POST)
     * Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param historicProcessInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricProcessInstances",
        summary = "Get List (POST)",
        description = "Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricProcessInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/process-instance",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<HistoricProcessInstanceDto>> queryHistoricProcessInstances(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "HistoricProcessInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto
    );


    /**
     * POST /history/process-instance/count : Get List Count (POST)
     * Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/post-process-instance-query-count/) method.
     *
     * @param historicProcessInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricProcessInstancesCount",
        summary = "Get List Count (POST)",
        description = "Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/process-instance/post-process-instance-query-count/) method.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/process-instance/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryHistoricProcessInstancesCount(
        @Parameter(name = "HistoricProcessInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto
    );


    /**
     * POST /history/process-instance/set-removal-time : Set Removal Time Async (POST)
     * Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     *
     * @param setRemovalTimeToHistoricProcessInstancesDto  (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid, e. g. if neither &#x60;historicProcessInstances&#x60; nor &#x60;historicProcessInstanceQuery&#x60; is present or if no mode is specified.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "setRemovalTimeAsync",
        summary = "Set Removal Time Async (POST)",
        description = "Sets the removal time to multiple historic process instances asynchronously (batch).  At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.",
        tags = { "Historic Process Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid, e. g. if neither `historicProcessInstances` nor `historicProcessInstanceQuery` is present or if no mode is specified.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/process-instance/set-removal-time",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> setRemovalTimeAsync(
        @Parameter(name = "SetRemovalTimeToHistoricProcessInstancesDto", description = "") @Valid @RequestBody(required = false) SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto
    );

}
