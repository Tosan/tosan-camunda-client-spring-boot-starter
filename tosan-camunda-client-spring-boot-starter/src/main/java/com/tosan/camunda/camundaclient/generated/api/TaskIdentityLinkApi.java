/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.IdentityLinkDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Task Identity Link", description = "the Task Identity Link API")
public interface TaskIdentityLinkApi {

    /**
     * POST /task/{id}/identity-links : Add
     * Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
     *
     * @param id The id of the task to add a link to. (required)
     * @param identityLinkDto  (optional)
     * @return Request successful. (status code 204)
     *         or Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "addIdentityLink",
        summary = "Add",
        description = "Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.",
        tags = { "Task Identity Link" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/identity-links",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> addIdentityLink(
        @Parameter(name = "id", description = "The id of the task to add a link to.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "IdentityLinkDto", description = "") @Valid @RequestBody(required = false) IdentityLinkDto identityLinkDto
    );


    /**
     * POST /task/{id}/identity-links/delete : Delete
     * Removes an identity link from a task by id
     *
     * @param id The id of the task to remove a link from. (required)
     * @param identityLinkDto  (optional)
     * @return Request successful. (status code 204)
     *         or Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "deleteIdentityLink",
        summary = "Delete",
        description = "Removes an identity link from a task by id",
        tags = { "Task Identity Link" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/identity-links/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> deleteIdentityLink(
        @Parameter(name = "id", description = "The id of the task to remove a link from.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "IdentityLinkDto", description = "") @Valid @RequestBody(required = false) IdentityLinkDto identityLinkDto
    );


    /**
     * GET /task/{id}/identity-links : Get List
     * Gets the identity links for a task by id, which are the users and groups that are in *some* relation to it (including assignee and owner).
     *
     * @param id The id of the task to retrieve the identity links for. (required)
     * @param type Filter by the type of links to include. (optional)
     * @return Request successful. (status code 200)
     *         or Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getIdentityLinks",
        summary = "Get List",
        description = "Gets the identity links for a task by id, which are the users and groups that are in *some* relation to it (including assignee and owner).",
        tags = { "Task Identity Link" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IdentityLinkDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/identity-links",
        produces = { "application/json" }
    )
    ResponseEntity<List<IdentityLinkDto>> getIdentityLinks(
        @Parameter(name = "id", description = "The id of the task to retrieve the identity links for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "type", description = "Filter by the type of links to include.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type
    );

}
