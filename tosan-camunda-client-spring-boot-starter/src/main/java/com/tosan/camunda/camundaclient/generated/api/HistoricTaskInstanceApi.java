/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricTaskInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricTaskInstanceQueryDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricTaskInstanceReportResultDto;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Task Instance", description = "the Historic Task Instance API")
public interface HistoricTaskInstanceApi {

    /**
     * GET /history/task/report : Get Task Report (Historic)
     * Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
     *
     * @param reportType **Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)
     * @param periodUnit When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)
     * @param completedBefore Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param completedAfter Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param groupBy When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;completedAfter&#x60; parameter is supplied, but the date format is wrong. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricTaskInstanceReport",
        summary = "Get Task Report (Historic)",
        description = "Retrieves a report of completed tasks. When the report type is set to `count`, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to `duration`, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.",
        tags = { "Historic Task Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricTaskInstanceReportResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `completedAfter` parameter is supplied, but the date format is wrong. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/task/report",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricTaskInstanceReportResultDto>> getHistoricTaskInstanceReport(
        @Parameter(name = "reportType", description = "**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to `duration`. For a report of the completed tasks in a specific timespan the value must be set to `count`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "reportType", required = false) String reportType,
        @Parameter(name = "periodUnit", description = "When the report type is set to `duration`, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are `month` and `quarter`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "periodUnit", required = false) String periodUnit,
        @Parameter(name = "completedBefore", description = "Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime completedBefore,
        @Parameter(name = "completedAfter", description = "Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime completedAfter,
        @Parameter(name = "groupBy", description = "When the report type is set to `count`, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are `taskName` and `processDefinition`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupBy", required = false) String groupBy
    );


    /**
     * GET /history/task : Get Tasks (Historic)
     * Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query-count/) method.
     *
     * @param taskId Filter by task id. (optional)
     * @param taskParentTaskId Filter by parent task id. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processInstanceBusinessKey Filter by process instance business key. (optional)
     * @param processInstanceBusinessKeyIn Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)
     * @param processInstanceBusinessKeyLike Filter by  process instance business key that has the parameter value as a substring. (optional)
     * @param executionId Filter by the id of the execution that executed the task. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key. (optional)
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name. (optional)
     * @param caseInstanceId Filter by case instance id. (optional)
     * @param caseExecutionId Filter by the id of the case execution that executed the task. (optional)
     * @param caseDefinitionId Filter by case definition id. (optional)
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key. (optional)
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name. (optional)
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)
     * @param taskName Restrict to tasks that have the given name. (optional)
     * @param taskNameLike Restrict to tasks that have a name with the given parameter value as substring. (optional)
     * @param taskDescription Restrict to tasks that have the given description. (optional)
     * @param taskDescriptionLike Restrict to tasks that have a description that has the parameter value as a substring. (optional)
     * @param taskDefinitionKey Restrict to tasks that have the given key. (optional)
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)
     * @param taskDeleteReason Restrict to tasks that have the given delete reason. (optional)
     * @param taskDeleteReasonLike Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)
     * @param taskAssignee Restrict to tasks that the given user is assigned to. (optional)
     * @param taskAssigneeLike Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)
     * @param taskOwner Restrict to tasks that the given user owns. (optional)
     * @param taskOwnerLike Restrict to tasks that are owned by users with the parameter value as a substring. (optional)
     * @param taskPriority Restrict to tasks that have the given priority. (optional)
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)
     * @param finished Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param unfinished Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param processFinished Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param processUnfinished Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param taskDueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskDueDateBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskDueDateAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param withoutTaskDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param taskFollowUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskFollowUpDateBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskFollowUpDateAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedBefore Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedBefore Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedAfter Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param processVariables Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param taskInvolvedUser Restrict to tasks with a historic identity link to the given user. (optional)
     * @param taskInvolvedGroup Restrict to tasks with a historic identity link to the given group. (optional)
     * @param taskHadCandidateUser Restrict to tasks with a historic identity link to the given candidate user. (optional)
     * @param taskHadCandidateGroup Restrict to tasks with a historic identity link to the given candidate group. (optional)
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricTaskInstances",
        summary = "Get Tasks (Historic)",
        description = "Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query-count/) method.",
        tags = { "Historic Task Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricTaskInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/task",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricTaskInstanceDto>> getHistoricTaskInstances(
        @Parameter(name = "taskId", description = "Filter by task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "taskParentTaskId", description = "Filter by parent task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskParentTaskId", required = false) String taskParentTaskId,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceBusinessKey", description = "Filter by process instance business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,
        @Parameter(name = "processInstanceBusinessKeyIn", description = "Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn,
        @Parameter(name = "processInstanceBusinessKeyLike", description = "Filter by  process instance business key that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,
        @Parameter(name = "executionId", description = "Filter by the id of the execution that executed the task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Restrict to tasks that belong to a process definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processDefinitionName", description = "Restrict to tasks that belong to a process definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,
        @Parameter(name = "caseInstanceId", description = "Filter by case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseExecutionId", description = "Filter by the id of the case execution that executed the task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId,
        @Parameter(name = "caseDefinitionId", description = "Filter by case definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseDefinitionKey", description = "Restrict to tasks that belong to a case definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionKey", required = false) String caseDefinitionKey,
        @Parameter(name = "caseDefinitionName", description = "Restrict to tasks that belong to a case definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionName", required = false) String caseDefinitionName,
        @Parameter(name = "activityInstanceIdIn", description = "Only include tasks which belong to one of the passed comma-separated activity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "taskName", description = "Restrict to tasks that have the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskName", required = false) String taskName,
        @Parameter(name = "taskNameLike", description = "Restrict to tasks that have a name with the given parameter value as substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskNameLike", required = false) String taskNameLike,
        @Parameter(name = "taskDescription", description = "Restrict to tasks that have the given description.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDescription", required = false) String taskDescription,
        @Parameter(name = "taskDescriptionLike", description = "Restrict to tasks that have a description that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDescriptionLike", required = false) String taskDescriptionLike,
        @Parameter(name = "taskDefinitionKey", description = "Restrict to tasks that have the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,
        @Parameter(name = "taskDefinitionKeyIn", description = "Restrict to tasks that have one of the passed comma-separated task definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKeyIn", required = false) String taskDefinitionKeyIn,
        @Parameter(name = "taskDeleteReason", description = "Restrict to tasks that have the given delete reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDeleteReason", required = false) String taskDeleteReason,
        @Parameter(name = "taskDeleteReasonLike", description = "Restrict to tasks that have a delete reason that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDeleteReasonLike", required = false) String taskDeleteReasonLike,
        @Parameter(name = "taskAssignee", description = "Restrict to tasks that the given user is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee,
        @Parameter(name = "taskAssigneeLike", description = "Restrict to tasks that are assigned to users with the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskAssigneeLike", required = false) String taskAssigneeLike,
        @Parameter(name = "taskOwner", description = "Restrict to tasks that the given user owns.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskOwner", required = false) String taskOwner,
        @Parameter(name = "taskOwnerLike", description = "Restrict to tasks that are owned by users with the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskOwnerLike", required = false) String taskOwnerLike,
        @Parameter(name = "taskPriority", description = "Restrict to tasks that have the given priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskPriority", required = false) Integer taskPriority,
        @Parameter(name = "assigned", description = "If set to `true`, restricts the query to all tasks that are assigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigned", required = false) Boolean assigned,
        @Parameter(name = "unassigned", description = "If set to `true`, restricts the query to all tasks that are unassigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unassigned", required = false) Boolean unassigned,
        @Parameter(name = "finished", description = "Only include finished tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finished", required = false) Boolean finished,
        @Parameter(name = "unfinished", description = "Only include unfinished tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished,
        @Parameter(name = "processFinished", description = "Only include tasks of finished processes. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processFinished", required = false) Boolean processFinished,
        @Parameter(name = "processUnfinished", description = "Only include tasks of unfinished processes. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processUnfinished", required = false) Boolean processUnfinished,
        @Parameter(name = "taskDueDate", description = "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDueDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskDueDate,
        @Parameter(name = "taskDueDateBefore", description = "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDueDateBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskDueDateBefore,
        @Parameter(name = "taskDueDateAfter", description = "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDueDateAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskDueDateAfter,
        @Parameter(name = "withoutTaskDueDate", description = "Only include tasks which have no due date. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTaskDueDate", required = false) Boolean withoutTaskDueDate,
        @Parameter(name = "taskFollowUpDate", description = "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskFollowUpDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskFollowUpDate,
        @Parameter(name = "taskFollowUpDateBefore", description = "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskFollowUpDateBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskFollowUpDateBefore,
        @Parameter(name = "taskFollowUpDateAfter", description = "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskFollowUpDateAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskFollowUpDateAfter,
        @Parameter(name = "startedBefore", description = "Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter,
        @Parameter(name = "finishedBefore", description = "Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedBefore,
        @Parameter(name = "finishedAfter", description = "Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedAfter,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic task instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "taskVariables", description = "Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`.  `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskVariables", required = false) String taskVariables,
        @Parameter(name = "processVariables", description = "Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`; * `notLike`.  `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processVariables", required = false) String processVariables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match the variable name provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match the variable value provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase,
        @Parameter(name = "taskInvolvedUser", description = "Restrict to tasks with a historic identity link to the given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskInvolvedUser", required = false) String taskInvolvedUser,
        @Parameter(name = "taskInvolvedGroup", description = "Restrict to tasks with a historic identity link to the given group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskInvolvedGroup", required = false) String taskInvolvedGroup,
        @Parameter(name = "taskHadCandidateUser", description = "Restrict to tasks with a historic identity link to the given candidate user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskHadCandidateUser", required = false) String taskHadCandidateUser,
        @Parameter(name = "taskHadCandidateGroup", description = "Restrict to tasks with a historic identity link to the given candidate group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskHadCandidateGroup", required = false) String taskHadCandidateGroup,
        @Parameter(name = "withCandidateGroups", description = "Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withCandidateGroups", required = false) Boolean withCandidateGroups,
        @Parameter(name = "withoutCandidateGroups", description = "Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutCandidateGroups", required = false) Boolean withoutCandidateGroups,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /history/task/count : Get Task Count
     * Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query/) method.
     *
     * @param taskId Filter by task id. (optional)
     * @param taskParentTaskId Filter by parent task id. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processInstanceBusinessKey Filter by process instance business key. (optional)
     * @param processInstanceBusinessKeyIn Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)
     * @param processInstanceBusinessKeyLike Filter by  process instance business key that has the parameter value as a substring. (optional)
     * @param executionId Filter by the id of the execution that executed the task. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key. (optional)
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name. (optional)
     * @param caseInstanceId Filter by case instance id. (optional)
     * @param caseExecutionId Filter by the id of the case execution that executed the task. (optional)
     * @param caseDefinitionId Filter by case definition id. (optional)
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key. (optional)
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name. (optional)
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)
     * @param taskName Restrict to tasks that have the given name. (optional)
     * @param taskNameLike Restrict to tasks that have a name with the given parameter value as substring. (optional)
     * @param taskDescription Restrict to tasks that have the given description. (optional)
     * @param taskDescriptionLike Restrict to tasks that have a description that has the parameter value as a substring. (optional)
     * @param taskDefinitionKey Restrict to tasks that have the given key. (optional)
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)
     * @param taskDeleteReason Restrict to tasks that have the given delete reason. (optional)
     * @param taskDeleteReasonLike Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)
     * @param taskAssignee Restrict to tasks that the given user is assigned to. (optional)
     * @param taskAssigneeLike Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)
     * @param taskOwner Restrict to tasks that the given user owns. (optional)
     * @param taskOwnerLike Restrict to tasks that are owned by users with the parameter value as a substring. (optional)
     * @param taskPriority Restrict to tasks that have the given priority. (optional)
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)
     * @param finished Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param unfinished Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param processFinished Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param processUnfinished Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param taskDueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskDueDateBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskDueDateAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param withoutTaskDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param taskFollowUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskFollowUpDateBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param taskFollowUpDateAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedBefore Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedBefore Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedAfter Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param processVariables Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param taskInvolvedUser Restrict to tasks with a historic identity link to the given user. (optional)
     * @param taskInvolvedGroup Restrict to tasks with a historic identity link to the given group. (optional)
     * @param taskHadCandidateUser Restrict to tasks with a historic identity link to the given candidate user. (optional)
     * @param taskHadCandidateGroup Restrict to tasks with a historic identity link to the given candidate group. (optional)
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricTaskInstancesCount",
        summary = "Get Task Count",
        description = "Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query/) method.",
        tags = { "Historic Task Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/task/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricTaskInstancesCount(
        @Parameter(name = "taskId", description = "Filter by task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "taskParentTaskId", description = "Filter by parent task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskParentTaskId", required = false) String taskParentTaskId,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceBusinessKey", description = "Filter by process instance business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,
        @Parameter(name = "processInstanceBusinessKeyIn", description = "Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn,
        @Parameter(name = "processInstanceBusinessKeyLike", description = "Filter by  process instance business key that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,
        @Parameter(name = "executionId", description = "Filter by the id of the execution that executed the task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Restrict to tasks that belong to a process definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processDefinitionName", description = "Restrict to tasks that belong to a process definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,
        @Parameter(name = "caseInstanceId", description = "Filter by case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseExecutionId", description = "Filter by the id of the case execution that executed the task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId,
        @Parameter(name = "caseDefinitionId", description = "Filter by case definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseDefinitionKey", description = "Restrict to tasks that belong to a case definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionKey", required = false) String caseDefinitionKey,
        @Parameter(name = "caseDefinitionName", description = "Restrict to tasks that belong to a case definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionName", required = false) String caseDefinitionName,
        @Parameter(name = "activityInstanceIdIn", description = "Only include tasks which belong to one of the passed comma-separated activity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "taskName", description = "Restrict to tasks that have the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskName", required = false) String taskName,
        @Parameter(name = "taskNameLike", description = "Restrict to tasks that have a name with the given parameter value as substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskNameLike", required = false) String taskNameLike,
        @Parameter(name = "taskDescription", description = "Restrict to tasks that have the given description.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDescription", required = false) String taskDescription,
        @Parameter(name = "taskDescriptionLike", description = "Restrict to tasks that have a description that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDescriptionLike", required = false) String taskDescriptionLike,
        @Parameter(name = "taskDefinitionKey", description = "Restrict to tasks that have the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,
        @Parameter(name = "taskDefinitionKeyIn", description = "Restrict to tasks that have one of the passed comma-separated task definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKeyIn", required = false) String taskDefinitionKeyIn,
        @Parameter(name = "taskDeleteReason", description = "Restrict to tasks that have the given delete reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDeleteReason", required = false) String taskDeleteReason,
        @Parameter(name = "taskDeleteReasonLike", description = "Restrict to tasks that have a delete reason that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDeleteReasonLike", required = false) String taskDeleteReasonLike,
        @Parameter(name = "taskAssignee", description = "Restrict to tasks that the given user is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee,
        @Parameter(name = "taskAssigneeLike", description = "Restrict to tasks that are assigned to users with the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskAssigneeLike", required = false) String taskAssigneeLike,
        @Parameter(name = "taskOwner", description = "Restrict to tasks that the given user owns.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskOwner", required = false) String taskOwner,
        @Parameter(name = "taskOwnerLike", description = "Restrict to tasks that are owned by users with the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskOwnerLike", required = false) String taskOwnerLike,
        @Parameter(name = "taskPriority", description = "Restrict to tasks that have the given priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskPriority", required = false) Integer taskPriority,
        @Parameter(name = "assigned", description = "If set to `true`, restricts the query to all tasks that are assigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigned", required = false) Boolean assigned,
        @Parameter(name = "unassigned", description = "If set to `true`, restricts the query to all tasks that are unassigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unassigned", required = false) Boolean unassigned,
        @Parameter(name = "finished", description = "Only include finished tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finished", required = false) Boolean finished,
        @Parameter(name = "unfinished", description = "Only include unfinished tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished,
        @Parameter(name = "processFinished", description = "Only include tasks of finished processes. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processFinished", required = false) Boolean processFinished,
        @Parameter(name = "processUnfinished", description = "Only include tasks of unfinished processes. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processUnfinished", required = false) Boolean processUnfinished,
        @Parameter(name = "taskDueDate", description = "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDueDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskDueDate,
        @Parameter(name = "taskDueDateBefore", description = "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDueDateBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskDueDateBefore,
        @Parameter(name = "taskDueDateAfter", description = "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDueDateAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskDueDateAfter,
        @Parameter(name = "withoutTaskDueDate", description = "Only include tasks which have no due date. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTaskDueDate", required = false) Boolean withoutTaskDueDate,
        @Parameter(name = "taskFollowUpDate", description = "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskFollowUpDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskFollowUpDate,
        @Parameter(name = "taskFollowUpDateBefore", description = "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskFollowUpDateBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskFollowUpDateBefore,
        @Parameter(name = "taskFollowUpDateAfter", description = "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskFollowUpDateAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime taskFollowUpDateAfter,
        @Parameter(name = "startedBefore", description = "Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter,
        @Parameter(name = "finishedBefore", description = "Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedBefore,
        @Parameter(name = "finishedAfter", description = "Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedAfter,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic task instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "taskVariables", description = "Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`.  `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskVariables", required = false) String taskVariables,
        @Parameter(name = "processVariables", description = "Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`; * `notLike`.  `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processVariables", required = false) String processVariables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match the variable name provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match the variable value provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase,
        @Parameter(name = "taskInvolvedUser", description = "Restrict to tasks with a historic identity link to the given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskInvolvedUser", required = false) String taskInvolvedUser,
        @Parameter(name = "taskInvolvedGroup", description = "Restrict to tasks with a historic identity link to the given group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskInvolvedGroup", required = false) String taskInvolvedGroup,
        @Parameter(name = "taskHadCandidateUser", description = "Restrict to tasks with a historic identity link to the given candidate user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskHadCandidateUser", required = false) String taskHadCandidateUser,
        @Parameter(name = "taskHadCandidateGroup", description = "Restrict to tasks with a historic identity link to the given candidate group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskHadCandidateGroup", required = false) String taskHadCandidateGroup,
        @Parameter(name = "withCandidateGroups", description = "Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withCandidateGroups", required = false) Boolean withCandidateGroups,
        @Parameter(name = "withoutCandidateGroups", description = "Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutCandidateGroups", required = false) Boolean withoutCandidateGroups
    );


    /**
     * POST /history/task : Get Tasks (Historic) (POST)
     * Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/post-task-query-count/) method.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param historicTaskInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricTaskInstances",
        summary = "Get Tasks (Historic) (POST)",
        description = "Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/post-task-query-count/) method.",
        tags = { "Historic Task Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricTaskInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/task",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<HistoricTaskInstanceDto>> queryHistoricTaskInstances(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "HistoricTaskInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto
    );


    /**
     * POST /history/task/count : Get Task Count (POST)
     * Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/post-task-query/) method and takes the same parameters.
     *
     * @param historicTaskInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricTaskInstancesCount",
        summary = "Get Task Count (POST)",
        description = "Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/task/post-task-query/) method and takes the same parameters.",
        tags = { "Historic Task Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/task/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryHistoricTaskInstancesCount(
        @Parameter(name = "HistoricTaskInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto
    );

}
