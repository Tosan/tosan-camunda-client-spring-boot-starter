/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AuthorizationExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.CompleteTaskDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.FormDto;
import com.tosan.camunda.camundaclient.generated.model.TaskBpmnErrorDto;
import com.tosan.camunda.camundaclient.generated.model.TaskDto;
import com.tosan.camunda.camundaclient.generated.model.TaskEscalationDto;
import com.tosan.camunda.camundaclient.generated.model.TaskQueryDto;
import com.tosan.camunda.camundaclient.generated.model.UserIdDto;
import com.tosan.camunda.camundaclient.generated.model.VariableValueDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Task", description = "the Task API")
public interface TaskApi {

    /**
     * POST /task/{id}/claim : Claim
     * Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.17/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
     *
     * @param id The id of the task to claim. (required)
     * @param userIdDto Provide the id of the user that claims the task. (optional)
     * @return Request successful. (status code 204)
     *         or Task with given id does not exist or claiming was not successful. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "claim",
        summary = "Claim",
        description = "Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.17/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "500", description = "Task with given id does not exist or claiming was not successful. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/claim",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> claim(
        @Parameter(name = "id", description = "The id of the task to claim.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserIdDto", description = "Provide the id of the user that claims the task.") @Valid @RequestBody(required = false) UserIdDto userIdDto
    );


    /**
     * POST /task/{id}/complete : Complete
     * Completes a task and updates process variables.
     *
     * @param id The id of the task to complete. (required)
     * @param completeTaskDto  (optional)
     * @return Request successful. The response contains the process variables. (status code 200)
     *         or Request successful. The response contains no variables. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the task does not exist or the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "complete",
        summary = "Complete",
        description = "Completes a task and updates process variables.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The response contains the process variables.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "204", description = "Request successful. The response contains no variables."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "If the task does not exist or the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/complete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> complete(
        @Parameter(name = "id", description = "The id of the task to complete.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CompleteTaskDto", description = "") @Valid @RequestBody(required = false) CompleteTaskDto completeTaskDto
    );


    /**
     * POST /task/create : Create
     * Creates a new task.
     *
     * @param taskDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if a not valid &#x60;delegationState&#x60; is supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create",
        description = "Creates a new task.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if a not valid `delegationState` is supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> createTask(
        @Parameter(name = "TaskDto", description = "") @Valid @RequestBody(required = false) TaskDto taskDto
    );


    /**
     * POST /task/{id}/delegate : Delegate
     * Delegates a task to another user.
     *
     * @param id The id of the task to delegate. (required)
     * @param userIdDto Provide the id of the user that the task should be delegated to. (optional)
     * @return Request successful. (status code 204)
     *         or If the task does not exist or delegation was not successful. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "delegateTask",
        summary = "Delegate",
        description = "Delegates a task to another user.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "500", description = "If the task does not exist or delegation was not successful. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/delegate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> delegateTask(
        @Parameter(name = "id", description = "The id of the task to delegate.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserIdDto", description = "Provide the id of the user that the task should be delegated to.") @Valid @RequestBody(required = false) UserIdDto userIdDto
    );


    /**
     * DELETE /task/{id} : Delete
     * Removes a task by id.
     *
     * @param id The id of the task to be removed. (required)
     * @return Request successful. (status code 204)
     *         or Bad Request. The Task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The Task with the given id cannot be deleted because it is part of a running process or case instance. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "Delete",
        description = "Removes a task by id.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Bad Request. The Task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The Task with the given id cannot be deleted because it is part of a running process or case instance. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteTask(
        @Parameter(name = "id", description = "The id of the task to be removed.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /task/{id}/deployed-form : Get Deployed Form
     * Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
     *
     * @param id The id of the task to get the deployed form for. (required)
     * @return Request successful. (status code 200)
     *         or The form key has wrong format. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The deployed form cannot be retrieved due to missing permissions on task resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or No deployed form for a given task exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDeployedForm",
        summary = "Get Deployed Form",
        description = "Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "The form key has wrong format. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The deployed form cannot be retrieved due to missing permissions on task resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = AuthorizationExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "No deployed form for a given task exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/deployed-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDeployedForm(
        @Parameter(name = "id", description = "The id of the task to get the deployed form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /task/{id}/form : Get Form Key
     * Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
     *
     * @param id The id of the task to retrieve the form for. (required)
     * @return Request successful. (status code 200)
     *         or Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getForm",
        summary = "Get Form Key",
        description = "Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/form",
        produces = { "application/json" }
    )
    ResponseEntity<FormDto> getForm(
        @Parameter(name = "id", description = "The id of the task to retrieve the form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /task/{id}/form-variables : Get Task Form Variables
     * Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param id The id of the task to retrieve the variables for. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Request successful. A JSON object containing a property for each variable returned. (status code 200)
     *         or  id is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getFormVariables",
        summary = "Get Task Form Variables",
        description = "Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. A JSON object containing a property for each variable returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "404", description = " id is null or does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/form-variables",
        produces = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> getFormVariables(
        @Parameter(name = "id", description = "The id of the task to retrieve the variables for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "variableNames", description = "A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNames", required = false) String variableNames,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false, defaultValue = "true") Boolean deserializeValues
    );


    /**
     * GET /task/{id}/rendered-form : Get Rendered Form
     * Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
     *
     * @param id The id of the task to get the rendered form for. (required)
     * @return Request successful. (status code 200)
     *         or The task with the given id does not exist or has no form field metadata defined for this task. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getRenderedForm",
        summary = "Get Rendered Form",
        description = "Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "The task with the given id does not exist or has no form field metadata defined for this task. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/xhtml+xml", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/rendered-form",
        produces = { "application/xhtml+xml", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getRenderedForm(
        @Parameter(name = "id", description = "The id of the task to get the rendered form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /task/{id} : Get
     * Retrieves a task by id.
     *
     * @param id The id of the task to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get",
        description = "Retrieves a task by id.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<TaskDto> getTask(
        @Parameter(name = "id", description = "The id of the task to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /task : Get List
     * Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     *
     * @param taskId Restrict to task with the given id. (optional)
     * @param taskIdIn Restrict to tasks with any of the given ids. (optional)
     * @param processInstanceId Restrict to tasks that belong to process instances with the given id. (optional)
     * @param processInstanceIdIn Restrict to tasks that belong to process instances with the given ids. (optional)
     * @param processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key. (optional)
     * @param processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)
     * @param processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)
     * @param processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)
     * @param processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param processDefinitionId Restrict to tasks that belong to a process definition with the given id. (optional)
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key. (optional)
     * @param processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name. (optional)
     * @param processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)
     * @param executionId Restrict to tasks that belong to an execution with the given id. (optional)
     * @param caseInstanceId Restrict to tasks that belong to case instances with the given id. (optional)
     * @param caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key. (optional)
     * @param caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)
     * @param caseDefinitionId Restrict to tasks that belong to a case definition with the given id. (optional)
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key. (optional)
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name. (optional)
     * @param caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)
     * @param caseExecutionId Restrict to tasks that belong to a case execution with the given id. (optional)
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)
     * @param tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)
     * @param withoutTenantId Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param assignee Restrict to tasks that the given user is assigned to. (optional)
     * @param assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)
     * @param assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)
     * @param assigneeNotIn Only include tasks which are not assigned to one of the passed and comma-separated user ids. (optional)
     * @param owner Restrict to tasks that the given user owns. (optional)
     * @param ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param candidateGroup Only include tasks that are offered to the given group. (optional)
     * @param candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param candidateUser Only include tasks that are offered to the given user or to one of his groups. (optional)
     * @param candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)
     * @param involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)
     * @param involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)
     * @param taskDefinitionKey Restrict to tasks that have the given key. (optional)
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)
     * @param taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring. (optional)
     * @param name Restrict to tasks that have the given name. (optional)
     * @param nameNotEqual Restrict to tasks that do not have the given name. (optional)
     * @param nameLike Restrict to tasks that have a name with the given parameter value as substring. (optional)
     * @param nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring. (optional)
     * @param description Restrict to tasks that have the given description. (optional)
     * @param descriptionLike Restrict to tasks that have a description that has the parameter value as a substring. (optional)
     * @param priority Restrict to tasks that have the given priority. (optional)
     * @param maxPriority Restrict to tasks that have a lower or equal priority. (optional)
     * @param minPriority Restrict to tasks that have a higher or equal priority. (optional)
     * @param dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)
     * @param dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)
     * @param dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param withoutDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)
     * @param followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)
     * @param followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)
     * @param followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)
     * @param followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)
     * @param createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)
     * @param createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)
     * @param createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param delegationState Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)
     * @param candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)
     * @param candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param withCandidateUsers Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param withoutCandidateUsers Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)
     * @param variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)
     * @param parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getTasks",
        summary = "Get List",
        description = "Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task",
        produces = { "application/json" }
    )
    ResponseEntity<List<TaskDto>> getTasks(
        @Parameter(name = "taskId", description = "Restrict to task with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "taskIdIn", description = "Restrict to tasks with any of the given ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskIdIn", required = false) String taskIdIn,
        @Parameter(name = "processInstanceId", description = "Restrict to tasks that belong to process instances with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIdIn", description = "Restrict to tasks that belong to process instances with the given ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn,
        @Parameter(name = "processInstanceBusinessKey", description = "Restrict to tasks that belong to process instances with the given business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,
        @Parameter(name = "processInstanceBusinessKeyExpression", description = "Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyExpression", required = false) String processInstanceBusinessKeyExpression,
        @Parameter(name = "processInstanceBusinessKeyIn", description = "Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn,
        @Parameter(name = "processInstanceBusinessKeyLike", description = "Restrict to tasks that have a process instance business key that has the parameter  value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,
        @Parameter(name = "processInstanceBusinessKeyLikeExpression", description = "Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLikeExpression", required = false) String processInstanceBusinessKeyLikeExpression,
        @Parameter(name = "processDefinitionId", description = "Restrict to tasks that belong to a process definition with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Restrict to tasks that belong to a process definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processDefinitionKeyIn", description = "Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "processDefinitionName", description = "Restrict to tasks that belong to a process definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,
        @Parameter(name = "processDefinitionNameLike", description = "Restrict to tasks that have a process definition name that has the parameter value as  a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,
        @Parameter(name = "executionId", description = "Restrict to tasks that belong to an execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "caseInstanceId", description = "Restrict to tasks that belong to case instances with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseInstanceBusinessKey", description = "Restrict to tasks that belong to case instances with the given business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceBusinessKey", required = false) String caseInstanceBusinessKey,
        @Parameter(name = "caseInstanceBusinessKeyLike", description = "Restrict to tasks that have a case instance business key that has the parameter value  as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceBusinessKeyLike", required = false) String caseInstanceBusinessKeyLike,
        @Parameter(name = "caseDefinitionId", description = "Restrict to tasks that belong to a case definition with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseDefinitionKey", description = "Restrict to tasks that belong to a case definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionKey", required = false) String caseDefinitionKey,
        @Parameter(name = "caseDefinitionName", description = "Restrict to tasks that belong to a case definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionName", required = false) String caseDefinitionName,
        @Parameter(name = "caseDefinitionNameLike", description = "Restrict to tasks that have a case definition name that has the parameter value as a  substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionNameLike", required = false) String caseDefinitionNameLike,
        @Parameter(name = "caseExecutionId", description = "Restrict to tasks that belong to a case execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId,
        @Parameter(name = "activityInstanceIdIn", description = "Only include tasks which belong to one of the passed and comma-separated activity  instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "tenantIdIn", description = "Only include tasks which belong to one of the passed and comma-separated  tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false, defaultValue = "false") Boolean withoutTenantId,
        @Parameter(name = "assignee", description = "Restrict to tasks that the given user is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assignee", required = false) String assignee,
        @Parameter(name = "assigneeExpression", description = "Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeExpression", required = false) String assigneeExpression,
        @Parameter(name = "assigneeLike", description = "Restrict to tasks that have an assignee that has the parameter  value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeLike", required = false) String assigneeLike,
        @Parameter(name = "assigneeLikeExpression", description = "Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeLikeExpression", required = false) String assigneeLikeExpression,
        @Parameter(name = "assigneeIn", description = "Only include tasks which are assigned to one of the passed and  comma-separated user ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeIn", required = false) String assigneeIn,
        @Parameter(name = "assigneeNotIn", description = "Only include tasks which are not assigned to one of the passed and comma-separated user ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeNotIn", required = false) String assigneeNotIn,
        @Parameter(name = "owner", description = "Restrict to tasks that the given user owns.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "owner", required = false) String owner,
        @Parameter(name = "ownerExpression", description = "Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ownerExpression", required = false) String ownerExpression,
        @Parameter(name = "candidateGroup", description = "Only include tasks that are offered to the given group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroup", required = false) String candidateGroup,
        @Parameter(name = "candidateGroupExpression", description = "Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroupExpression", required = false) String candidateGroupExpression,
        @Parameter(name = "candidateUser", description = "Only include tasks that are offered to the given user or to one of his groups.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateUser", required = false) String candidateUser,
        @Parameter(name = "candidateUserExpression", description = "Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateUserExpression", required = false) String candidateUserExpression,
        @Parameter(name = "includeAssignedTasks", description = "Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeAssignedTasks", required = false, defaultValue = "false") Boolean includeAssignedTasks,
        @Parameter(name = "involvedUser", description = "Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "involvedUser", required = false) String involvedUser,
        @Parameter(name = "involvedUserExpression", description = "Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "involvedUserExpression", required = false) String involvedUserExpression,
        @Parameter(name = "assigned", description = "If set to `true`, restricts the query to all tasks that are assigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigned", required = false, defaultValue = "false") Boolean assigned,
        @Parameter(name = "unassigned", description = "If set to `true`, restricts the query to all tasks that are unassigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unassigned", required = false, defaultValue = "false") Boolean unassigned,
        @Parameter(name = "taskDefinitionKey", description = "Restrict to tasks that have the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,
        @Parameter(name = "taskDefinitionKeyIn", description = "Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKeyIn", required = false) String taskDefinitionKeyIn,
        @Parameter(name = "taskDefinitionKeyLike", description = "Restrict to tasks that have a key that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKeyLike", required = false) String taskDefinitionKeyLike,
        @Parameter(name = "name", description = "Restrict to tasks that have the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameNotEqual", description = "Restrict to tasks that do not have the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameNotEqual", required = false) String nameNotEqual,
        @Parameter(name = "nameLike", description = "Restrict to tasks that have a name with the given parameter value as substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "nameNotLike", description = "Restrict to tasks that do not have a name with the given parameter value as substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameNotLike", required = false) String nameNotLike,
        @Parameter(name = "description", description = "Restrict to tasks that have the given description.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = false) String description,
        @Parameter(name = "descriptionLike", description = "Restrict to tasks that have a description that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "descriptionLike", required = false) String descriptionLike,
        @Parameter(name = "priority", description = "Restrict to tasks that have the given priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priority", required = false) Integer priority,
        @Parameter(name = "maxPriority", description = "Restrict to tasks that have a lower or equal priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxPriority", required = false) Integer maxPriority,
        @Parameter(name = "minPriority", description = "Restrict to tasks that have a higher or equal priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minPriority", required = false) Integer minPriority,
        @Parameter(name = "dueDate", description = "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueDate", required = false) String dueDate,
        @Parameter(name = "dueDateExpression", description = "Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueDateExpression", required = false) String dueDateExpression,
        @Parameter(name = "dueAfter", description = "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueAfter", required = false) String dueAfter,
        @Parameter(name = "dueAfterExpression", description = "Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueAfterExpression", required = false) String dueAfterExpression,
        @Parameter(name = "dueBefore", description = "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueBefore", required = false) String dueBefore,
        @Parameter(name = "dueBeforeExpression", description = "Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueBeforeExpression", required = false) String dueBeforeExpression,
        @Parameter(name = "withoutDueDate", description = "Only include tasks which have no due date. Value may only be `true`,  as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutDueDate", required = false, defaultValue = "false") Boolean withoutDueDate,
        @Parameter(name = "followUpDate", description = "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpDate", required = false) String followUpDate,
        @Parameter(name = "followUpDateExpression", description = "Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpDateExpression", required = false) String followUpDateExpression,
        @Parameter(name = "followUpAfter", description = "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpAfter", required = false) String followUpAfter,
        @Parameter(name = "followUpAfterExpression", description = "Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpAfterExpression", required = false) String followUpAfterExpression,
        @Parameter(name = "followUpBefore", description = "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBefore", required = false) String followUpBefore,
        @Parameter(name = "followUpBeforeExpression", description = "Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBeforeExpression", required = false) String followUpBeforeExpression,
        @Parameter(name = "followUpBeforeOrNotExistent", description = "Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBeforeOrNotExistent", required = false) String followUpBeforeOrNotExistent,
        @Parameter(name = "followUpBeforeOrNotExistentExpression", description = "Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBeforeOrNotExistentExpression", required = false) String followUpBeforeOrNotExistentExpression,
        @Parameter(name = "createdOn", description = "Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOn", required = false) String createdOn,
        @Parameter(name = "createdOnExpression", description = "Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOnExpression", required = false) String createdOnExpression,
        @Parameter(name = "createdAfter", description = "Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAfter", required = false) String createdAfter,
        @Parameter(name = "createdAfterExpression", description = "Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAfterExpression", required = false) String createdAfterExpression,
        @Parameter(name = "createdBefore", description = "Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdBefore", required = false) String createdBefore,
        @Parameter(name = "createdBeforeExpression", description = "Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdBeforeExpression", required = false) String createdBeforeExpression,
        @Parameter(name = "delegationState", description = "Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "delegationState", required = false) String delegationState,
        @Parameter(name = "candidateGroups", description = "Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroups", required = false) String candidateGroups,
        @Parameter(name = "candidateGroupsExpression", description = "Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroupsExpression", required = false) String candidateGroupsExpression,
        @Parameter(name = "withCandidateGroups", description = "Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withCandidateGroups", required = false, defaultValue = "false") Boolean withCandidateGroups,
        @Parameter(name = "withoutCandidateGroups", description = "Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutCandidateGroups", required = false, defaultValue = "false") Boolean withoutCandidateGroups,
        @Parameter(name = "withCandidateUsers", description = "Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withCandidateUsers", required = false, defaultValue = "false") Boolean withCandidateUsers,
        @Parameter(name = "withoutCandidateUsers", description = "Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutCandidateUsers", required = false, defaultValue = "false") Boolean withoutCandidateUsers,
        @Parameter(name = "active", description = "Only include active tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false, defaultValue = "false") Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false, defaultValue = "false") Boolean suspended,
        @Parameter(name = "taskVariables", description = "Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskVariables", required = false) String taskVariables,
        @Parameter(name = "processVariables", description = "Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`; `notLike`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processVariables", required = false) String processVariables,
        @Parameter(name = "caseInstanceVariables", description = "Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceVariables", required = false) String caseInstanceVariables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false, defaultValue = "false") Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false, defaultValue = "false") Boolean variableValuesIgnoreCase,
        @Parameter(name = "parentTaskId", description = "Restrict query to all tasks that are sub tasks of the given task. Takes a task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "parentTaskId", required = false) String parentTaskId,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /task/count : Get List Count
     * Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.17/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     *
     * @param taskId Restrict to task with the given id. (optional)
     * @param taskIdIn Restrict to tasks with any of the given ids. (optional)
     * @param processInstanceId Restrict to tasks that belong to process instances with the given id. (optional)
     * @param processInstanceIdIn Restrict to tasks that belong to process instances with the given ids. (optional)
     * @param processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key. (optional)
     * @param processInstanceBusinessKeyExpression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)
     * @param processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)
     * @param processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)
     * @param processInstanceBusinessKeyLikeExpression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param processDefinitionId Restrict to tasks that belong to a process definition with the given id. (optional)
     * @param processDefinitionKey Restrict to tasks that belong to a process definition with the given key. (optional)
     * @param processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)
     * @param processDefinitionName Restrict to tasks that belong to a process definition with the given name. (optional)
     * @param processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)
     * @param executionId Restrict to tasks that belong to an execution with the given id. (optional)
     * @param caseInstanceId Restrict to tasks that belong to case instances with the given id. (optional)
     * @param caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key. (optional)
     * @param caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)
     * @param caseDefinitionId Restrict to tasks that belong to a case definition with the given id. (optional)
     * @param caseDefinitionKey Restrict to tasks that belong to a case definition with the given key. (optional)
     * @param caseDefinitionName Restrict to tasks that belong to a case definition with the given name. (optional)
     * @param caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)
     * @param caseExecutionId Restrict to tasks that belong to a case execution with the given id. (optional)
     * @param activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)
     * @param tenantIdIn Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)
     * @param withoutTenantId Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param assignee Restrict to tasks that the given user is assigned to. (optional)
     * @param assigneeExpression Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param assigneeLike Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)
     * @param assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param assigneeIn Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)
     * @param assigneeNotIn Only include tasks which are not assigned to one of the passed and comma-separated user ids. (optional)
     * @param owner Restrict to tasks that the given user owns. (optional)
     * @param ownerExpression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param candidateGroup Only include tasks that are offered to the given group. (optional)
     * @param candidateGroupExpression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param candidateUser Only include tasks that are offered to the given user or to one of his groups. (optional)
     * @param candidateUserExpression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)
     * @param includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)
     * @param involvedUser Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)
     * @param involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)
     * @param assigned If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)
     * @param unassigned If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)
     * @param taskDefinitionKey Restrict to tasks that have the given key. (optional)
     * @param taskDefinitionKeyIn Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)
     * @param taskDefinitionKeyLike Restrict to tasks that have a key that has the parameter value as a substring. (optional)
     * @param name Restrict to tasks that have the given name. (optional)
     * @param nameNotEqual Restrict to tasks that do not have the given name. (optional)
     * @param nameLike Restrict to tasks that have a name with the given parameter value as substring. (optional)
     * @param nameNotLike Restrict to tasks that do not have a name with the given parameter value as substring. (optional)
     * @param description Restrict to tasks that have the given description. (optional)
     * @param descriptionLike Restrict to tasks that have a description that has the parameter value as a substring. (optional)
     * @param priority Restrict to tasks that have the given priority. (optional)
     * @param maxPriority Restrict to tasks that have a lower or equal priority. (optional)
     * @param minPriority Restrict to tasks that have a higher or equal priority. (optional)
     * @param dueDate Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param dueDateExpression Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param dueAfter Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)
     * @param dueAfterExpression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param dueBefore Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)
     * @param dueBeforeExpression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param withoutDueDate Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param followUpDate Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)
     * @param followUpDateExpression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param followUpAfter Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)
     * @param followUpAfterExpression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param followUpBefore Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)
     * @param followUpBeforeExpression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param followUpBeforeOrNotExistent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)
     * @param followUpBeforeOrNotExistentExpression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param createdOn Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)
     * @param createdOnExpression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param createdAfter Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)
     * @param createdAfterExpression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param createdBefore Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)
     * @param createdBeforeExpression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)
     * @param delegationState Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)
     * @param candidateGroups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)
     * @param candidateGroupsExpression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)
     * @param withCandidateGroups Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param withoutCandidateGroups Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param withCandidateUsers Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param withoutCandidateUsers Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)
     * @param taskVariables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param processVariables Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param caseInstanceVariables Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)
     * @param variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)
     * @param parentTaskId Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getTasksCount",
        summary = "Get List Count",
        description = "Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.17/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getTasksCount(
        @Parameter(name = "taskId", description = "Restrict to task with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "taskIdIn", description = "Restrict to tasks with any of the given ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskIdIn", required = false) String taskIdIn,
        @Parameter(name = "processInstanceId", description = "Restrict to tasks that belong to process instances with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIdIn", description = "Restrict to tasks that belong to process instances with the given ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIdIn", required = false) String processInstanceIdIn,
        @Parameter(name = "processInstanceBusinessKey", description = "Restrict to tasks that belong to process instances with the given business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,
        @Parameter(name = "processInstanceBusinessKeyExpression", description = "Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyExpression", required = false) String processInstanceBusinessKeyExpression,
        @Parameter(name = "processInstanceBusinessKeyIn", description = "Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyIn", required = false) String processInstanceBusinessKeyIn,
        @Parameter(name = "processInstanceBusinessKeyLike", description = "Restrict to tasks that have a process instance business key that has the parameter  value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,
        @Parameter(name = "processInstanceBusinessKeyLikeExpression", description = "Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceBusinessKeyLikeExpression", required = false) String processInstanceBusinessKeyLikeExpression,
        @Parameter(name = "processDefinitionId", description = "Restrict to tasks that belong to a process definition with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Restrict to tasks that belong to a process definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processDefinitionKeyIn", description = "Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "processDefinitionName", description = "Restrict to tasks that belong to a process definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,
        @Parameter(name = "processDefinitionNameLike", description = "Restrict to tasks that have a process definition name that has the parameter value as  a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,
        @Parameter(name = "executionId", description = "Restrict to tasks that belong to an execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "caseInstanceId", description = "Restrict to tasks that belong to case instances with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseInstanceBusinessKey", description = "Restrict to tasks that belong to case instances with the given business key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceBusinessKey", required = false) String caseInstanceBusinessKey,
        @Parameter(name = "caseInstanceBusinessKeyLike", description = "Restrict to tasks that have a case instance business key that has the parameter value  as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceBusinessKeyLike", required = false) String caseInstanceBusinessKeyLike,
        @Parameter(name = "caseDefinitionId", description = "Restrict to tasks that belong to a case definition with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseDefinitionKey", description = "Restrict to tasks that belong to a case definition with the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionKey", required = false) String caseDefinitionKey,
        @Parameter(name = "caseDefinitionName", description = "Restrict to tasks that belong to a case definition with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionName", required = false) String caseDefinitionName,
        @Parameter(name = "caseDefinitionNameLike", description = "Restrict to tasks that have a case definition name that has the parameter value as a  substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionNameLike", required = false) String caseDefinitionNameLike,
        @Parameter(name = "caseExecutionId", description = "Restrict to tasks that belong to a case execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId,
        @Parameter(name = "activityInstanceIdIn", description = "Only include tasks which belong to one of the passed and comma-separated activity  instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "tenantIdIn", description = "Only include tasks which belong to one of the passed and comma-separated  tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false, defaultValue = "false") Boolean withoutTenantId,
        @Parameter(name = "assignee", description = "Restrict to tasks that the given user is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assignee", required = false) String assignee,
        @Parameter(name = "assigneeExpression", description = "Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeExpression", required = false) String assigneeExpression,
        @Parameter(name = "assigneeLike", description = "Restrict to tasks that have an assignee that has the parameter  value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeLike", required = false) String assigneeLike,
        @Parameter(name = "assigneeLikeExpression", description = "Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeLikeExpression", required = false) String assigneeLikeExpression,
        @Parameter(name = "assigneeIn", description = "Only include tasks which are assigned to one of the passed and  comma-separated user ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeIn", required = false) String assigneeIn,
        @Parameter(name = "assigneeNotIn", description = "Only include tasks which are not assigned to one of the passed and comma-separated user ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigneeNotIn", required = false) String assigneeNotIn,
        @Parameter(name = "owner", description = "Restrict to tasks that the given user owns.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "owner", required = false) String owner,
        @Parameter(name = "ownerExpression", description = "Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ownerExpression", required = false) String ownerExpression,
        @Parameter(name = "candidateGroup", description = "Only include tasks that are offered to the given group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroup", required = false) String candidateGroup,
        @Parameter(name = "candidateGroupExpression", description = "Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroupExpression", required = false) String candidateGroupExpression,
        @Parameter(name = "candidateUser", description = "Only include tasks that are offered to the given user or to one of his groups.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateUser", required = false) String candidateUser,
        @Parameter(name = "candidateUserExpression", description = "Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateUserExpression", required = false) String candidateUserExpression,
        @Parameter(name = "includeAssignedTasks", description = "Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeAssignedTasks", required = false, defaultValue = "false") Boolean includeAssignedTasks,
        @Parameter(name = "involvedUser", description = "Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "involvedUser", required = false) String involvedUser,
        @Parameter(name = "involvedUserExpression", description = "Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "involvedUserExpression", required = false) String involvedUserExpression,
        @Parameter(name = "assigned", description = "If set to `true`, restricts the query to all tasks that are assigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assigned", required = false, defaultValue = "false") Boolean assigned,
        @Parameter(name = "unassigned", description = "If set to `true`, restricts the query to all tasks that are unassigned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unassigned", required = false, defaultValue = "false") Boolean unassigned,
        @Parameter(name = "taskDefinitionKey", description = "Restrict to tasks that have the given key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,
        @Parameter(name = "taskDefinitionKeyIn", description = "Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKeyIn", required = false) String taskDefinitionKeyIn,
        @Parameter(name = "taskDefinitionKeyLike", description = "Restrict to tasks that have a key that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskDefinitionKeyLike", required = false) String taskDefinitionKeyLike,
        @Parameter(name = "name", description = "Restrict to tasks that have the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameNotEqual", description = "Restrict to tasks that do not have the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameNotEqual", required = false) String nameNotEqual,
        @Parameter(name = "nameLike", description = "Restrict to tasks that have a name with the given parameter value as substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "nameNotLike", description = "Restrict to tasks that do not have a name with the given parameter value as substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameNotLike", required = false) String nameNotLike,
        @Parameter(name = "description", description = "Restrict to tasks that have the given description.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = false) String description,
        @Parameter(name = "descriptionLike", description = "Restrict to tasks that have a description that has the parameter value as a substring.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "descriptionLike", required = false) String descriptionLike,
        @Parameter(name = "priority", description = "Restrict to tasks that have the given priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priority", required = false) Integer priority,
        @Parameter(name = "maxPriority", description = "Restrict to tasks that have a lower or equal priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxPriority", required = false) Integer maxPriority,
        @Parameter(name = "minPriority", description = "Restrict to tasks that have a higher or equal priority.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minPriority", required = false) Integer minPriority,
        @Parameter(name = "dueDate", description = "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueDate", required = false) String dueDate,
        @Parameter(name = "dueDateExpression", description = "Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueDateExpression", required = false) String dueDateExpression,
        @Parameter(name = "dueAfter", description = "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueAfter", required = false) String dueAfter,
        @Parameter(name = "dueAfterExpression", description = "Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueAfterExpression", required = false) String dueAfterExpression,
        @Parameter(name = "dueBefore", description = "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueBefore", required = false) String dueBefore,
        @Parameter(name = "dueBeforeExpression", description = "Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueBeforeExpression", required = false) String dueBeforeExpression,
        @Parameter(name = "withoutDueDate", description = "Only include tasks which have no due date. Value may only be `true`,  as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutDueDate", required = false, defaultValue = "false") Boolean withoutDueDate,
        @Parameter(name = "followUpDate", description = "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpDate", required = false) String followUpDate,
        @Parameter(name = "followUpDateExpression", description = "Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpDateExpression", required = false) String followUpDateExpression,
        @Parameter(name = "followUpAfter", description = "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpAfter", required = false) String followUpAfter,
        @Parameter(name = "followUpAfterExpression", description = "Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpAfterExpression", required = false) String followUpAfterExpression,
        @Parameter(name = "followUpBefore", description = "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBefore", required = false) String followUpBefore,
        @Parameter(name = "followUpBeforeExpression", description = "Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBeforeExpression", required = false) String followUpBeforeExpression,
        @Parameter(name = "followUpBeforeOrNotExistent", description = "Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBeforeOrNotExistent", required = false) String followUpBeforeOrNotExistent,
        @Parameter(name = "followUpBeforeOrNotExistentExpression", description = "Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "followUpBeforeOrNotExistentExpression", required = false) String followUpBeforeOrNotExistentExpression,
        @Parameter(name = "createdOn", description = "Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOn", required = false) String createdOn,
        @Parameter(name = "createdOnExpression", description = "Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdOnExpression", required = false) String createdOnExpression,
        @Parameter(name = "createdAfter", description = "Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAfter", required = false) String createdAfter,
        @Parameter(name = "createdAfterExpression", description = "Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAfterExpression", required = false) String createdAfterExpression,
        @Parameter(name = "createdBefore", description = "Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdBefore", required = false) String createdBefore,
        @Parameter(name = "createdBeforeExpression", description = "Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdBeforeExpression", required = false) String createdBeforeExpression,
        @Parameter(name = "delegationState", description = "Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "delegationState", required = false) String delegationState,
        @Parameter(name = "candidateGroups", description = "Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroups", required = false) String candidateGroups,
        @Parameter(name = "candidateGroupsExpression", description = "Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "candidateGroupsExpression", required = false) String candidateGroupsExpression,
        @Parameter(name = "withCandidateGroups", description = "Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withCandidateGroups", required = false, defaultValue = "false") Boolean withCandidateGroups,
        @Parameter(name = "withoutCandidateGroups", description = "Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutCandidateGroups", required = false, defaultValue = "false") Boolean withoutCandidateGroups,
        @Parameter(name = "withCandidateUsers", description = "Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withCandidateUsers", required = false, defaultValue = "false") Boolean withCandidateUsers,
        @Parameter(name = "withoutCandidateUsers", description = "Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutCandidateUsers", required = false, defaultValue = "false") Boolean withoutCandidateUsers,
        @Parameter(name = "active", description = "Only include active tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false, defaultValue = "false") Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended tasks. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false, defaultValue = "false") Boolean suspended,
        @Parameter(name = "taskVariables", description = "Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskVariables", required = false) String taskVariables,
        @Parameter(name = "processVariables", description = "Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`; `notLike`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processVariables", required = false) String processVariables,
        @Parameter(name = "caseInstanceVariables", description = "Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.  **Note**: Values are always treated as String objects on server side.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceVariables", required = false) String caseInstanceVariables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false, defaultValue = "false") Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false, defaultValue = "false") Boolean variableValuesIgnoreCase,
        @Parameter(name = "parentTaskId", description = "Restrict query to all tasks that are sub tasks of the given task. Takes a task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "parentTaskId", required = false) String parentTaskId
    );


    /**
     * POST /task/{id}/bpmnError : Handle BPMN Error
     * Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.17/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
     *
     * @param id The id of the task a BPMN error is reported for. (required)
     * @param taskBpmnErrorDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the &#x60;errorCode&#x60; or &#x60;id&#x60; are not present in the request. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the authenticated user is unauthorized to update the task. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Returned if the task does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "handleBpmnError",
        summary = "Handle BPMN Error",
        description = "Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.17/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the `errorCode` or `id` are not present in the request. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "If the authenticated user is unauthorized to update the task. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/bpmnError",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> handleBpmnError(
        @Parameter(name = "id", description = "The id of the task a BPMN error is reported for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TaskBpmnErrorDto", description = "") @Valid @RequestBody(required = false) TaskBpmnErrorDto taskBpmnErrorDto
    );


    /**
     * POST /task/{id}/bpmnEscalation : Handle BPMN Escalation
     * Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.17/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
     *
     * @param id The id of the task in which context a BPMN escalation is reported. (required)
     * @param taskEscalationDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if the &lt;code&gt;escalationCode&lt;/code&gt; is not provided in the request. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the authenticated user is unauthorized to update the process instance. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     *         or Returned if the task does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "handleEscalation",
        summary = "Handle BPMN Escalation",
        description = "Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.17/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the <code>escalationCode</code> is not provided in the request. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "If the authenticated user is unauthorized to update the process instance. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/bpmnEscalation",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> handleEscalation(
        @Parameter(name = "id", description = "The id of the task in which context a BPMN escalation is reported.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TaskEscalationDto", description = "") @Valid @RequestBody(required = false) TaskEscalationDto taskEscalationDto
    );


    /**
     * POST /task : Get List (POST)
     * Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.17/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.17/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param taskQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryTasks",
        summary = "Get List (POST)",
        description = "Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.17/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.17/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) in the user guide for details.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<TaskDto>> queryTasks(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "TaskQueryDto", description = "") @Valid @RequestBody(required = false) TaskQueryDto taskQueryDto
    );


    /**
     * POST /task/count : Get List Count (POST)
     * Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.17/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     *
     * @param taskQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryTasksCount",
        summary = "Get List Count (POST)",
        description = "Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.17/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as `assigneeExpression`) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.17/user-guide/process-engine/securing-custom-code/) in the user guide for details.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryTasksCount(
        @Parameter(name = "TaskQueryDto", description = "") @Valid @RequestBody(required = false) TaskQueryDto taskQueryDto
    );


    /**
     * POST /task/{id}/resolve : Resolve
     * Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
     *
     * @param id The id of the task to resolve. (required)
     * @param completeTaskDto  (optional)
     * @return Request successful. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the task does not exist or the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "resolve",
        summary = "Resolve",
        description = "Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "If the task does not exist or the corresponding process instance could not be resumed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/resolve",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resolve(
        @Parameter(name = "id", description = "The id of the task to resolve.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CompleteTaskDto", description = "") @Valid @RequestBody(required = false) CompleteTaskDto completeTaskDto
    );


    /**
     * POST /task/{id}/assignee : Set Assignee
     * Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.17/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
     *
     * @param id The id of the task to set the assignee for. (required)
     * @param userIdDto Provide the id of the user that will be the assignee of the task. (optional)
     * @return Request successful. (status code 204)
     *         or Task with given id does not exist or setting the assignee was not successful. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "setAssignee",
        summary = "Set Assignee",
        description = "Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.17/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "500", description = "Task with given id does not exist or setting the assignee was not successful. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/assignee",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setAssignee(
        @Parameter(name = "id", description = "The id of the task to set the assignee for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserIdDto", description = "Provide the id of the user that will be the assignee of the task.") @Valid @RequestBody(required = false) UserIdDto userIdDto
    );


    /**
     * POST /task/{id}/submit-form : Submit Form
     * Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/) for more information.
     *
     * @param id The id of the task to submit the form for. (required)
     * @param completeTaskDto  (optional)
     * @return Request successful. The response contains the process variables. (status code 200)
     *         or Request successful. The response contains no variables. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the task does not exist or the corresponding process instance could not be resumed successfully.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "submit",
        summary = "Submit Form",
        description = "Completes a task and updates process variables using a form submit. There are two difference between this method and the `complete` method:  * If the task is in state `PENDING` - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/) for more information.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The response contains the process variables.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "204", description = "Request successful. The response contains no variables."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "If the task does not exist or the corresponding process instance could not be resumed successfully.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/submit-form",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> submit(
        @Parameter(name = "id", description = "The id of the task to submit the form for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CompleteTaskDto", description = "") @Valid @RequestBody(required = false) CompleteTaskDto completeTaskDto
    );


    /**
     * POST /task/{id}/unclaim : Unclaim
     * Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
     *
     * @param id The id of the task to unclaim. (required)
     * @return Request successful. (status code 204)
     *         or The Task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "unclaim",
        summary = "Unclaim",
        description = "Resets a task's assignee. If successful, the task is not assigned to a user.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "500", description = "The Task with the given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/unclaim",
        produces = { "application/json" }
    )
    ResponseEntity<Void> unclaim(
        @Parameter(name = "id", description = "The id of the task to unclaim.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * PUT /task/{id} : Update
     * Updates a task.
     *
     * @param id The id of the task to be updated. (required)
     * @param taskDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if a not valid &#x60;delegationState&#x60; is supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or If the corresponding task cannot be found. (status code 404)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update",
        description = "Updates a task.",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if a not valid `delegationState` is supplied. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "If the corresponding task cannot be found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateTask(
        @Parameter(name = "id", description = "The id of the task to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TaskDto", description = "") @Valid @RequestBody(required = false) TaskDto taskDto
    );

}
