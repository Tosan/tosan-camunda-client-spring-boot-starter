/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationExecutionDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationPlanDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationPlanGenerationDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationPlanReportDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface MigrationApi {

    Logger log = LoggerFactory.getLogger(MigrationApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Execute Migration Plan", description = "Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.17/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).", tags={ "Migration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = "The request is not valid if one or more of the following statements apply:  * The provided migration plan is not valid, so an exception of type `MigrationPlanValidationException` is returned. * The provided migration plan is not valid for a specific process instance it is applied to, so an exception of type `MigratingProcessInstanceValidationException` is returned. * In case additional parameters of the request are unexpected, an exception of type `InvalidRequestException` is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/migration/execute",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> executeMigrationPlan(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MigrationExecutionDto body);


    @Operation(summary = "Execute Migration Plan Async (Batch)", description = "Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.17/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).", tags={ "Migration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The request is not valid if one or more of the following statements apply:  * The provided migration plan is not valid, so an exception of type `MigrationPlanValidationException` is returned. * In case additional parameters of the request are unexpected, an exception of type `InvalidRequestException` is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/migration/executeAsync",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> executeMigrationPlanAsync(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MigrationExecutionDto body);


    @Operation(summary = "Generate Migration Plan", description = "Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.", tags={ "Migration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MigrationPlanDto.class))),
        
        @ApiResponse(responseCode = "400", description = " The requested migration was invalid. See [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/migration/generate",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MigrationPlanDto> generateMigrationPlan(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MigrationPlanGenerationDto body);


    @Operation(summary = "Validate Migration Plan", description = "Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.", tags={ "Migration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful. The validation report was returned.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MigrationPlanReportDto.class))),
        
        @ApiResponse(responseCode = "400", description = "In case additional parameters of the request are unexpected, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/migration/validate",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MigrationPlanReportDto> validateMigrationPlan(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MigrationPlanDto body);

}

