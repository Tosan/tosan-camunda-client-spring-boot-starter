/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationExecutionDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationPlanDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationPlanGenerationDto;
import com.tosan.camunda.camundaclient.generated.model.MigrationPlanReportDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Migration", description = "the Migration API")
public interface MigrationApi {

    /**
     * POST /migration/execute : Execute Migration Plan
     * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.17/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     *
     * @param migrationExecutionDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The request is not valid if one or more of the following statements apply:  * The provided migration plan is not valid, so an exception of type &#x60;MigrationPlanValidationException&#x60; is returned. * The provided migration plan is not valid for a specific process instance it is applied to, so an exception of type &#x60;MigratingProcessInstanceValidationException&#x60; is returned. * In case additional parameters of the request are unexpected, an exception of type &#x60;InvalidRequestException&#x60; is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "executeMigrationPlan",
        summary = "Execute Migration Plan",
        description = "Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.17/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).",
        tags = { "Migration" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "The request is not valid if one or more of the following statements apply:  * The provided migration plan is not valid, so an exception of type `MigrationPlanValidationException` is returned. * The provided migration plan is not valid for a specific process instance it is applied to, so an exception of type `MigratingProcessInstanceValidationException` is returned. * In case additional parameters of the request are unexpected, an exception of type `InvalidRequestException` is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/migration/execute",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> executeMigrationPlan(
        @Parameter(name = "MigrationExecutionDto", description = "") @Valid @RequestBody(required = false) MigrationExecutionDto migrationExecutionDto
    );


    /**
     * POST /migration/executeAsync : Execute Migration Plan Async (Batch)
     * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.17/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     *
     * @param migrationExecutionDto  (optional)
     * @return Request successful. (status code 200)
     *         or The request is not valid if one or more of the following statements apply:  * The provided migration plan is not valid, so an exception of type &#x60;MigrationPlanValidationException&#x60; is returned. * In case additional parameters of the request are unexpected, an exception of type &#x60;InvalidRequestException&#x60; is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "executeMigrationPlanAsync",
        summary = "Execute Migration Plan Async (Batch)",
        description = "Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.17/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).",
        tags = { "Migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request is not valid if one or more of the following statements apply:  * The provided migration plan is not valid, so an exception of type `MigrationPlanValidationException` is returned. * In case additional parameters of the request are unexpected, an exception of type `InvalidRequestException` is returned.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/migration/executeAsync",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> executeMigrationPlanAsync(
        @Parameter(name = "MigrationExecutionDto", description = "") @Valid @RequestBody(required = false) MigrationExecutionDto migrationExecutionDto
    );


    /**
     * POST /migration/generate : Generate Migration Plan
     * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
     *
     * @param migrationPlanGenerationDto  (optional)
     * @return Request successful. (status code 200)
     *         or  The requested migration was invalid. See [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.  (status code 400)
     */
    @Operation(
        operationId = "generateMigrationPlan",
        summary = "Generate Migration Plan",
        description = "Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.",
        tags = { "Migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MigrationPlanDto.class))
            }),
            @ApiResponse(responseCode = "400", description = " The requested migration was invalid. See [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/migration/generate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MigrationPlanDto> generateMigrationPlan(
        @Parameter(name = "MigrationPlanGenerationDto", description = "") @Valid @RequestBody(required = false) MigrationPlanGenerationDto migrationPlanGenerationDto
    );


    /**
     * POST /migration/validate : Validate Migration Plan
     * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
     *
     * @param migrationPlanDto  (optional)
     * @return Request successful. The validation report was returned. (status code 200)
     *         or In case additional parameters of the request are unexpected, an exception of type &#x60;InvalidRequestException&#x60; is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "validateMigrationPlan",
        summary = "Validate Migration Plan",
        description = "Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.",
        tags = { "Migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The validation report was returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MigrationPlanReportDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "In case additional parameters of the request are unexpected, an exception of type `InvalidRequestException` is returned. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/migration/validate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MigrationPlanReportDto> validateMigrationPlan(
        @Parameter(name = "MigrationPlanDto", description = "") @Valid @RequestBody(required = false) MigrationPlanDto migrationPlanDto
    );

}
