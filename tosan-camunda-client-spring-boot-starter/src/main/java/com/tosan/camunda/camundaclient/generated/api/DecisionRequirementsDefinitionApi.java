/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.DecisionRequirementsDefinitionDto;
import com.tosan.camunda.camundaclient.generated.model.DecisionRequirementsDefinitionXmlDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Decision Requirements Definition", description = "the Decision Requirements Definition API")
public interface DecisionRequirementsDefinitionApi {

    /**
     * GET /decision-requirements-definition/{id} : Get Decision Requirements Definition by ID
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
     *
     * @param id The id of the decision requirements definition to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionById",
        summary = "Get Decision Requirements Definition by ID",
        description = "Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionRequirementsDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionRequirementsDefinitionDto> getDecisionRequirementsDefinitionById(
        @Parameter(name = "id", description = "The id of the decision requirements definition to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /decision-requirements-definition/key/{key} : Get Decision Requirements Definition by Key
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionByKey",
        summary = "Get Decision Requirements Definition by Key",
        description = "Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionRequirementsDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/key/{key}",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionRequirementsDefinitionDto> getDecisionRequirementsDefinitionByKey(
        @Parameter(name = "key", description = "The key of the decision requirements definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /decision-requirements-definition/key/{key}/tenant-id/{tenant-id} : Get Decision Requirements Definition by Key and Tenant ID
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionByKeyAndTenantId",
        summary = "Get Decision Requirements Definition by Key and Tenant ID",
        description = "Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionRequirementsDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionRequirementsDefinitionDto> getDecisionRequirementsDefinitionByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the decision requirements definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant to which the decision requirements definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /decision-requirements-definition/{id}/diagram : Get Decision Requirements Diagram by ID
     * Retrieves the diagram of a decision requirements definition.
     *
     * @param id The id of the decision requirements definition. (required)
     * @return The image diagram of the decision requirements definition. (status code 200)
     *         or The decision requirements definition doesn&#39;t have an associated diagram. This method returns no content. (status code 204)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionDiagramById",
        summary = "Get Decision Requirements Diagram by ID",
        description = "Retrieves the diagram of a decision requirements definition.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The image diagram of the decision requirements definition.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The decision requirements definition doesn't have an associated diagram. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/{id}/diagram",
        produces = { "image/*", "application/octet-stream", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDecisionRequirementsDefinitionDiagramById(
        @Parameter(name = "id", description = "The id of the decision requirements definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /decision-requirements-definition/key/{key}/diagram : Get Decision Requirements Diagram by Key
     * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @return The image diagram of the decision requirements definition. (status code 200)
     *         or The decision requirements definition doesn&#39;t have an associated diagram. This method returns no content. (status code 204)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionDiagramByKey",
        summary = "Get Decision Requirements Diagram by Key",
        description = "Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The image diagram of the decision requirements definition.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The decision requirements definition doesn't have an associated diagram. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/key/{key}/diagram",
        produces = { "image/*", "application/octet-stream", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDecisionRequirementsDefinitionDiagramByKey(
        @Parameter(name = "key", description = "The key of the decision requirements definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram : Get Decision Requirements Diagram by Key and Tenant ID
     * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to. (required)
     * @return The image diagram of the decision requirements definition. (status code 200)
     *         or The decision requirements definition doesn&#39;t have an associated diagram. This method returns no content. (status code 204)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionDiagramByKeyAndTenantId",
        summary = "Get Decision Requirements Diagram by Key and Tenant ID",
        description = "Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The image diagram of the decision requirements definition.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The decision requirements definition doesn't have an associated diagram. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram",
        produces = { "image/*", "application/octet-stream", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the decision requirements definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant to which the decision requirements definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /decision-requirements-definition/{id}/xml : Get DMN XML by ID
     * Retrieves the DMN XML of a decision requirements definition.
     *
     * @param id The id of the decision requirements definition. (required)
     * @return Request successful. (status code 200)
     *         or Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionDmnXmlById",
        summary = "Get DMN XML by ID",
        description = "Retrieves the DMN XML of a decision requirements definition.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionRequirementsDefinitionXmlDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/{id}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionRequirementsDefinitionXmlDto> getDecisionRequirementsDefinitionDmnXmlById(
        @Parameter(name = "id", description = "The id of the decision requirements definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /decision-requirements-definition/key/{key}/xml : Get DMN XML by Key
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or  Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.  (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionDmnXmlByKey",
        summary = "Get DMN XML by Key",
        description = "Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionRequirementsDefinitionXmlDto.class))
            }),
            @ApiResponse(responseCode = "404", description = " Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/key/{key}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionRequirementsDefinitionXmlDto> getDecisionRequirementsDefinitionDmnXmlByKey(
        @Parameter(name = "key", description = "The key of the decision requirements definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml : Get DMN XML by Key and Tenant ID
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or  Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.  (status code 404)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId",
        summary = "Get DMN XML by Key and Tenant ID",
        description = "Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionRequirementsDefinitionXmlDto.class))
            }),
            @ApiResponse(responseCode = "404", description = " Decision requirements definition with given id or key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionRequirementsDefinitionXmlDto> getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the decision requirements definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant to which the decision requirements definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /decision-requirements-definition : Get Decision Requirements Definitions
     * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/decision-requirements-definition/get-query-count/) method.
     *
     * @param decisionRequirementsDefinitionId Filter by decision requirements definition id. (optional)
     * @param decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids. (optional)
     * @param name Filter by decision requirements definition name. (optional)
     * @param nameLike Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param keyLike Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param category Filter by decision requirements definition category. Exact match. (optional)
     * @param categoryLike Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param version Filter by decision requirements definition version. (optional)
     * @param latestVersion Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeDecisionRequirementsDefinitionsWithoutTenantId Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitions",
        summary = "Get Decision Requirements Definitions",
        description = "Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/decision-requirements-definition/get-query-count/) method.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DecisionRequirementsDefinitionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition",
        produces = { "application/json" }
    )
    ResponseEntity<List<DecisionRequirementsDefinitionDto>> getDecisionRequirementsDefinitions(
        @Parameter(name = "decisionRequirementsDefinitionId", description = "Filter by decision requirements definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionId", required = false) String decisionRequirementsDefinitionId,
        @Parameter(name = "decisionRequirementsDefinitionIdIn", description = "Filter by decision requirements definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionIdIn", required = false) String decisionRequirementsDefinitionIdIn,
        @Parameter(name = "name", description = "Filter by decision requirements definition name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by decision requirements definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "deploymentId", description = "Filter by the id of the deployment a decision requirement definition belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "key", description = "Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "keyLike", description = "Filter by decision requirements definition keys that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyLike", required = false) String keyLike,
        @Parameter(name = "category", description = "Filter by decision requirements definition category. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryLike", description = "Filter by decision requirements definition categories that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryLike", required = false) String categoryLike,
        @Parameter(name = "version", description = "Filter by decision requirements definition version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersion", description = "Only include those decision requirements definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersion", required = false) Boolean latestVersion,
        @Parameter(name = "resourceName", description = "Filter by the name of the decision requirements definition resource. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceName", required = false) String resourceName,
        @Parameter(name = "resourceNameLike", description = "Filter by names of those decision requirements definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceNameLike", required = false) String resourceNameLike,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include decision requirements definitions which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeDecisionRequirementsDefinitionsWithoutTenantId", description = "Include decision requirements definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDecisionRequirementsDefinitionsWithoutTenantId", required = false) Boolean includeDecisionRequirementsDefinitionsWithoutTenantId,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /decision-requirements-definition/count : Get Decision Requirements Definition Count
     * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.17/reference/rest/decision-requirements-definition/get-query/) method.
     *
     * @param decisionRequirementsDefinitionId Filter by decision requirements definition id. (optional)
     * @param decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids. (optional)
     * @param name Filter by decision requirements definition name. (optional)
     * @param nameLike Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param keyLike Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param category Filter by decision requirements definition category. Exact match. (optional)
     * @param categoryLike Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param version Filter by decision requirements definition version. (optional)
     * @param latestVersion Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeDecisionRequirementsDefinitionsWithoutTenantId Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getDecisionRequirementsDefinitionsCount",
        summary = "Get Decision Requirements Definition Count",
        description = "Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.17/reference/rest/decision-requirements-definition/get-query/) method.",
        tags = { "Decision Requirements Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-requirements-definition/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getDecisionRequirementsDefinitionsCount(
        @Parameter(name = "decisionRequirementsDefinitionId", description = "Filter by decision requirements definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionId", required = false) String decisionRequirementsDefinitionId,
        @Parameter(name = "decisionRequirementsDefinitionIdIn", description = "Filter by decision requirements definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionIdIn", required = false) String decisionRequirementsDefinitionIdIn,
        @Parameter(name = "name", description = "Filter by decision requirements definition name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by decision requirements definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "deploymentId", description = "Filter by the id of the deployment a decision requirement definition belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "key", description = "Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "keyLike", description = "Filter by decision requirements definition keys that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyLike", required = false) String keyLike,
        @Parameter(name = "category", description = "Filter by decision requirements definition category. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryLike", description = "Filter by decision requirements definition categories that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryLike", required = false) String categoryLike,
        @Parameter(name = "version", description = "Filter by decision requirements definition version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersion", description = "Only include those decision requirements definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersion", required = false) Boolean latestVersion,
        @Parameter(name = "resourceName", description = "Filter by the name of the decision requirements definition resource. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceName", required = false) String resourceName,
        @Parameter(name = "resourceNameLike", description = "Filter by names of those decision requirements definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceNameLike", required = false) String resourceNameLike,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include decision requirements definitions which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeDecisionRequirementsDefinitionsWithoutTenantId", description = "Include decision requirements definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDecisionRequirementsDefinitionsWithoutTenantId", required = false) Boolean includeDecisionRequirementsDefinitionsWithoutTenantId
    );

}
