/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AuthorizationExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.CommentDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Task Comment", description = "the Task Comment API")
public interface TaskCommentApi {

    /**
     * POST /task/{id}/comment/create : Create
     * Creates a comment for a task by id.
     *
     * @param id The id of the task to add the comment to. (required)
     * @param commentDto **Note:** Only the &#x60;message&#x60; and &#x60;processInstanceId&#x60; properties will be used. Every other property passed to this endpoint will be ignored. (optional)
     * @return Request successful. (status code 200)
     *         or The task does not exist or no comment message was submitted. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The history of the engine is disabled. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 403)
     */
    @Operation(
        operationId = "createComment",
        summary = "Create",
        description = "Creates a comment for a task by id.",
        tags = { "Task Comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "The task does not exist or no comment message was submitted. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The history of the engine is disabled. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/{id}/comment/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CommentDto> createComment(
        @Parameter(name = "id", description = "The id of the task to add the comment to.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CommentDto", description = "**Note:** Only the `message` and `processInstanceId` properties will be used. Every other property passed to this endpoint will be ignored.") @Valid @RequestBody(required = false) CommentDto commentDto
    );


    /**
     * GET /task/{id}/comment/{commentId} : Get
     * Retrieves a task comment by task id and comment id.
     *
     * @param id The id of the task. (required)
     * @param commentId The id of the comment to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or The task or comment with given task and comment id does not exist, or the history of the engine is disabled. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getComment",
        summary = "Get",
        description = "Retrieves a task comment by task id and comment id.",
        tags = { "Task Comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The task or comment with given task and comment id does not exist, or the history of the engine is disabled. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/comment/{commentId}",
        produces = { "application/json" }
    )
    ResponseEntity<CommentDto> getComment(
        @Parameter(name = "id", description = "The id of the task.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "commentId", description = "The id of the comment to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("commentId") String commentId
    );


    /**
     * GET /task/{id}/comment : Get List
     * Gets the comments for a task by id.
     *
     * @param id The id of the task to retrieve the comments for. (required)
     * @return Request successful. (status code 200)
     *         or No task exists for the given task id. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getComments",
        summary = "Get List",
        description = "Gets the comments for a task by id.",
        tags = { "Task Comment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CommentDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No task exists for the given task id. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{id}/comment",
        produces = { "application/json" }
    )
    ResponseEntity<List<CommentDto>> getComments(
        @Parameter(name = "id", description = "The id of the task to retrieve the comments for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );

}
