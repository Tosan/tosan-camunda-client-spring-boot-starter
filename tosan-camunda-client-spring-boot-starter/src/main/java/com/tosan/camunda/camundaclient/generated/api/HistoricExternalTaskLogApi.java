/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricExternalTaskLogDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricExternalTaskLogQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic External Task Log", description = "the Historic External Task Log API")
public interface HistoricExternalTaskLogApi {

    /**
     * GET /history/external-task-log/{id}/error-details : Get External Task Log Error Details
     * Retrieves the corresponding error details of the passed historic external task log by id.
     *
     * @param id The id of the historic external task log to get the error details for. (required)
     * @return Request successful. (status code 200)
     *         or Historic external task log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getErrorDetailsHistoricExternalTaskLog",
        summary = "Get External Task Log Error Details",
        description = "Retrieves the corresponding error details of the passed historic external task log by id.",
        tags = { "Historic External Task Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Historic external task log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/external-task-log/{id}/error-details",
        produces = { "text/plain", "application/json" }
    )
    ResponseEntity<Object> getErrorDetailsHistoricExternalTaskLog(
        @Parameter(name = "id", description = "The id of the historic external task log to get the error details for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/external-task-log/{id} : Get External Task Log
     * Retrieves a historic external task log by id.
     *
     * @param id The id of the log entry. (required)
     * @return Request successful. (status code 200)
     *         or Historic external task log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricExternalTaskLog",
        summary = "Get External Task Log",
        description = "Retrieves a historic external task log by id.",
        tags = { "Historic External Task Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricExternalTaskLogDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Historic external task log with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/external-task-log/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<HistoricExternalTaskLogDto> getHistoricExternalTaskLog(
        @Parameter(name = "id", description = "The id of the log entry.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/external-task-log : Get External Task Logs
     * Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
     *
     * @param logId Filter by historic external task log id. (optional)
     * @param externalTaskId Filter by external task id. (optional)
     * @param topicName Filter by an external task topic. (optional)
     * @param workerId Filter by the id of the worker that the task was most recently locked by. (optional)
     * @param errorMessage Filter by external task exception message. (optional)
     * @param activityIdIn Only include historic external task logs which belong to one of the passed activity ids. (optional)
     * @param activityInstanceIdIn Only include historic external task logs which belong to one of the passed activity instance ids. (optional)
     * @param executionIdIn Only include historic external task logs which belong to one of the passed execution ids. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Filter by process definition key. (optional)
     * @param tenantIdIn Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param priorityLowerThanOrEquals Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityHigherThanOrEquals Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricExternalTaskLogs",
        summary = "Get External Task Logs",
        description = "Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.",
        tags = { "Historic External Task Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricExternalTaskLogDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/external-task-log",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricExternalTaskLogDto>> getHistoricExternalTaskLogs(
        @Parameter(name = "logId", description = "Filter by historic external task log id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "logId", required = false) String logId,
        @Parameter(name = "externalTaskId", description = "Filter by external task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId,
        @Parameter(name = "topicName", description = "Filter by an external task topic.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "topicName", required = false) String topicName,
        @Parameter(name = "workerId", description = "Filter by the id of the worker that the task was most recently locked by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workerId", required = false) String workerId,
        @Parameter(name = "errorMessage", description = "Filter by external task exception message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "errorMessage", required = false) String errorMessage,
        @Parameter(name = "activityIdIn", description = "Only include historic external task logs which belong to one of the passed activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "activityInstanceIdIn", description = "Only include historic external task logs which belong to one of the passed activity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "executionIdIn", description = "Only include historic external task logs which belong to one of the passed execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "tenantIdIn", description = "Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic external task log entries that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "priorityLowerThanOrEquals", description = "Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals,
        @Parameter(name = "priorityHigherThanOrEquals", description = "Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals,
        @Parameter(name = "creationLog", description = "Only include creation logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "creationLog", required = false) Boolean creationLog,
        @Parameter(name = "failureLog", description = "Only include failure logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failureLog", required = false) Boolean failureLog,
        @Parameter(name = "successLog", description = "Only include success logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "successLog", required = false) Boolean successLog,
        @Parameter(name = "deletionLog", description = "Only include deletion logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deletionLog", required = false) Boolean deletionLog,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /history/external-task-log/count : Get External Task Log Count
     * Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query/) method.
     *
     * @param logId Filter by historic external task log id. (optional)
     * @param externalTaskId Filter by external task id. (optional)
     * @param topicName Filter by an external task topic. (optional)
     * @param workerId Filter by the id of the worker that the task was most recently locked by. (optional)
     * @param errorMessage Filter by external task exception message. (optional)
     * @param activityIdIn Only include historic external task logs which belong to one of the passed activity ids. (optional)
     * @param activityInstanceIdIn Only include historic external task logs which belong to one of the passed activity instance ids. (optional)
     * @param executionIdIn Only include historic external task logs which belong to one of the passed execution ids. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Filter by process definition key. (optional)
     * @param tenantIdIn Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param priorityLowerThanOrEquals Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityHigherThanOrEquals Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param creationLog Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param failureLog Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param successLog Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param deletionLog Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. (status code 400)
     */
    @Operation(
        operationId = "getHistoricExternalTaskLogsCount",
        summary = "Get External Task Log Count",
        description = "Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query/) method.",
        tags = { "Historic External Task Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/external-task-log/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricExternalTaskLogsCount(
        @Parameter(name = "logId", description = "Filter by historic external task log id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "logId", required = false) String logId,
        @Parameter(name = "externalTaskId", description = "Filter by external task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId,
        @Parameter(name = "topicName", description = "Filter by an external task topic.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "topicName", required = false) String topicName,
        @Parameter(name = "workerId", description = "Filter by the id of the worker that the task was most recently locked by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workerId", required = false) String workerId,
        @Parameter(name = "errorMessage", description = "Filter by external task exception message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "errorMessage", required = false) String errorMessage,
        @Parameter(name = "activityIdIn", description = "Only include historic external task logs which belong to one of the passed activity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "activityInstanceIdIn", description = "Only include historic external task logs which belong to one of the passed activity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "executionIdIn", description = "Only include historic external task logs which belong to one of the passed execution ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionIdIn", required = false) String executionIdIn,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "tenantIdIn", description = "Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic external task log entries that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "priorityLowerThanOrEquals", description = "Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals,
        @Parameter(name = "priorityHigherThanOrEquals", description = "Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals,
        @Parameter(name = "creationLog", description = "Only include creation logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "creationLog", required = false) Boolean creationLog,
        @Parameter(name = "failureLog", description = "Only include failure logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failureLog", required = false) Boolean failureLog,
        @Parameter(name = "successLog", description = "Only include success logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "successLog", required = false) Boolean successLog,
        @Parameter(name = "deletionLog", description = "Only include deletion logs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deletionLog", required = false) Boolean deletionLog
    );


    /**
     * POST /history/external-task-log : Get External Task Logs (POST)
     * Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param historicExternalTaskLogQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricExternalTaskLogs",
        summary = "Get External Task Logs (POST)",
        description = "Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types `String`, `Number` or `Boolean`.",
        tags = { "Historic External Task Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricExternalTaskLogDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/external-task-log",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<HistoricExternalTaskLogDto>> queryHistoricExternalTaskLogs(
        @Parameter(name = "HistoricExternalTaskLogQueryDto", description = "") @Valid @RequestBody(required = false) HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto
    );


    /**
     * POST /history/external-task-log/count : Get External Task Log Count (POST)
     * Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
     *
     * @param historicExternalTaskLogQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricExternalTaskLogsCount",
        summary = "Get External Task Log Count (POST)",
        description = "Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.",
        tags = { "Historic External Task Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/external-task-log/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryHistoricExternalTaskLogsCount(
        @Parameter(name = "HistoricExternalTaskLogQueryDto", description = "") @Valid @RequestBody(required = false) HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto
    );

}
