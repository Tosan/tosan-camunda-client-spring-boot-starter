/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.EventSubscriptionDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Event Subscription", description = "the Event Subscription API")
public interface EventSubscriptionApi {

    /**
     * GET /event-subscription : Get List
     * Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.17/reference/rest/event-subscription/get-query-count/) method.
     *
     * @param eventSubscriptionId Only select subscription with the given id. (optional)
     * @param eventName Only select subscriptions for events with the given name. (optional)
     * @param eventType Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param executionId Only select subscriptions that belong to an execution with the given id. (optional)
     * @param processInstanceId Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param activityId Only select subscriptions that belong to an activity with the given id. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param withoutTenantId Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeEventSubscriptionsWithoutTenantId Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getEventSubscriptions",
        summary = "Get List",
        description = "Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.17/reference/rest/event-subscription/get-query-count/) method.",
        tags = { "Event Subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EventSubscriptionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/event-subscription",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventSubscriptionDto>> getEventSubscriptions(
        @Parameter(name = "eventSubscriptionId", description = "Only select subscription with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventSubscriptionId", required = false) String eventSubscriptionId,
        @Parameter(name = "eventName", description = "Only select subscriptions for events with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventName", required = false) String eventName,
        @Parameter(name = "eventType", description = "Only select subscriptions for events with the given type. Valid values: `message`, `signal`, `compensate` and `conditional`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventType", required = false) String eventType,
        @Parameter(name = "executionId", description = "Only select subscriptions that belong to an execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processInstanceId", description = "Only select subscriptions that belong to a process instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "activityId", description = "Only select subscriptions that belong to an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeEventSubscriptionsWithoutTenantId", description = "Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeEventSubscriptionsWithoutTenantId", required = false) Boolean includeEventSubscriptionsWithoutTenantId,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /event-subscription/count : Get List Count
     * Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.17/reference/rest/event-subscription/get-query/) method.
     *
     * @param eventSubscriptionId Only select subscription with the given id. (optional)
     * @param eventName Only select subscriptions for events with the given name. (optional)
     * @param eventType Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param executionId Only select subscriptions that belong to an execution with the given id. (optional)
     * @param processInstanceId Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param activityId Only select subscriptions that belong to an activity with the given id. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param withoutTenantId Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeEventSubscriptionsWithoutTenantId Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getEventSubscriptionsCount",
        summary = "Get List Count",
        description = "Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.17/reference/rest/event-subscription/get-query/) method.",
        tags = { "Event Subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/event-subscription/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getEventSubscriptionsCount(
        @Parameter(name = "eventSubscriptionId", description = "Only select subscription with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventSubscriptionId", required = false) String eventSubscriptionId,
        @Parameter(name = "eventName", description = "Only select subscriptions for events with the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventName", required = false) String eventName,
        @Parameter(name = "eventType", description = "Only select subscriptions for events with the given type. Valid values: `message`, `signal`, `compensate` and `conditional`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventType", required = false) String eventType,
        @Parameter(name = "executionId", description = "Only select subscriptions that belong to an execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processInstanceId", description = "Only select subscriptions that belong to a process instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "activityId", description = "Only select subscriptions that belong to an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeEventSubscriptionsWithoutTenantId", description = "Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeEventSubscriptionsWithoutTenantId", required = false) Boolean includeEventSubscriptionsWithoutTenantId
    );

}
