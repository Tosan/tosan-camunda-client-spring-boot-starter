/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.EventSubscriptionDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface EventSubscriptionApi {

    Logger log = LoggerFactory.getLogger(EventSubscriptionApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Get List", description = "Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.17/reference/rest/event-subscription/get-query-count/) method.", tags={ "Event Subscription" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EventSubscriptionDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/event-subscription",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EventSubscriptionDto>> getEventSubscriptions(@Parameter(in = ParameterIn.QUERY, description = "Only select subscription with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "eventSubscriptionId", required = false) String eventSubscriptionId, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions for events with the given name." ,schema=@Schema()) @Valid @RequestParam(value = "eventName", required = false) String eventName, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions for events with the given type. Valid values: `message`, `signal`, `compensate` and `conditional`." ,schema=@Schema(allowableValues={ "message", "signal", "compensate", "conditional" }
)) @Valid @RequestParam(value = "eventType", required = false) String eventType, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions that belong to an execution with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions that belong to a process instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions that belong to an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "includeEventSubscriptionsWithoutTenantId", required = false) Boolean includeEventSubscriptionsWithoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "created", "tenantId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Get List Count", description = "Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.17/reference/rest/event-subscription/get-query/) method.", tags={ "Event Subscription" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/event-subscription/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getEventSubscriptionsCount(@Parameter(in = ParameterIn.QUERY, description = "Only select subscription with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "eventSubscriptionId", required = false) String eventSubscriptionId, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions for events with the given name." ,schema=@Schema()) @Valid @RequestParam(value = "eventName", required = false) String eventName, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions for events with the given type. Valid values: `message`, `signal`, `compensate` and `conditional`." ,schema=@Schema(allowableValues={ "message", "signal", "compensate", "conditional" }
)) @Valid @RequestParam(value = "eventType", required = false) String eventType, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions that belong to an execution with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions that belong to a process instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions that belong to an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "includeEventSubscriptionsWithoutTenantId", required = false) Boolean includeEventSubscriptionsWithoutTenantId);

}

