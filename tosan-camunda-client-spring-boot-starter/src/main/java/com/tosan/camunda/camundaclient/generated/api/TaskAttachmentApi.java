/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AttachmentDto;
import com.tosan.camunda.camundaclient.generated.model.AuthorizationExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import org.springframework.core.io.Resource;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface TaskAttachmentApi {

    Logger log = LoggerFactory.getLogger(TaskAttachmentApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Create", description = "Creates an attachment for a task.", tags={ "Task Attachment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AttachmentDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The task does not exists or task id is null. No content or url to remote content exists. See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))) })
    @RequestMapping(value = "/task/{id}/attachment/create",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<AttachmentDto> addAttachment(@Parameter(in = ParameterIn.PATH, description = "The id of the task to add the attachment to.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="attachment-name", required=false)  String attachmentName, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="attachment-description", required=false)  String attachmentDescription, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="attachment-type", required=false)  String attachmentType, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="url", required=false)  String url, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile content);


    @Operation(summary = "Delete", description = "Removes an attachment from a task by id.", tags={ "Task Attachment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "403", description = "The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "A Task Attachment for the given task id and attachment id does not exist. See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/task/{id}/attachment/{attachmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAttachment(@Parameter(in = ParameterIn.PATH, description = "The id of the task.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the attachment to be removed.", required=true, schema=@Schema()) @PathVariable("attachmentId") String attachmentId);


    @Operation(summary = "Get", description = "Retrieves a task attachment by task id and attachment id.", tags={ "Task Attachment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AttachmentDto.class))),
        
        @ApiResponse(responseCode = "404", description = "The attachment for the given task and attachment id does not exist or the history of the engine is disabled.  See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/task/{id}/attachment/{attachmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AttachmentDto> getAttachment(@Parameter(in = ParameterIn.PATH, description = "The id of the task.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the attachment to be retrieved.", required=true, schema=@Schema()) @PathVariable("attachmentId") String attachmentId);


    @Operation(summary = "Get (Binary)", description = "Retrieves the binary content of a task attachment by task id and attachment id.", tags={ "Task Attachment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "404", description = "The attachment content for the given task id and attachment id does not exist, or the history of the engine is disabled.  See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/task/{id}/attachment/{attachmentId}/data",
        produces = { "application/octet-stream", "text/plain", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getAttachmentData(@Parameter(in = ParameterIn.PATH, description = "The id of the task.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the attachment to be retrieved.", required=true, schema=@Schema()) @PathVariable("attachmentId") String attachmentId);


    @Operation(summary = "Get List", description = "Gets the attachments for a task.", tags={ "Task Attachment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AttachmentDto.class)))),
        
        @ApiResponse(responseCode = "404", description = "No task exists for the given task id. See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/task/{id}/attachment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AttachmentDto>> getAttachments(@Parameter(in = ParameterIn.PATH, description = "The id of the task to retrieve the attachments for.", required=true, schema=@Schema()) @PathVariable("id") String id);

}

