/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.JobDto;
import com.tosan.camunda.camundaclient.generated.model.JobDuedateDto;
import com.tosan.camunda.camundaclient.generated.model.JobQueryDto;
import com.tosan.camunda.camundaclient.generated.model.JobSuspensionStateDto;
import com.tosan.camunda.camundaclient.generated.model.PriorityDto;
import com.tosan.camunda.camundaclient.generated.model.RetriesDto;
import com.tosan.camunda.camundaclient.generated.model.SetJobRetriesDto;
import com.tosan.camunda.camundaclient.generated.model.SuspensionStateDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Job", description = "the Job API")
public interface JobApi {

    /**
     * POST /job/{id}/execute : Execute Job
     * Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
     *
     * @param id The id of the job to be executed. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The job could not be executed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "executeJob",
        summary = "Execute Job",
        description = "Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The job could not be executed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{id}/execute",
        produces = { "application/json" }
    )
    ResponseEntity<Void> executeJob(
        @Parameter(name = "id", description = "The id of the job to be executed.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /job/{id} : Get Job
     * Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
     *
     * @param id The id of the job to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getJob",
        summary = "Get Job",
        description = "Retrieves a job by id, according to the `Job` interface in the engine.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<JobDto> getJob(
        @Parameter(name = "id", description = "The id of the job to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /job : Get Jobs
     * Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query-count/) method.
     *
     * @param jobId Filter by job id. (optional)
     * @param jobIds Filter by a comma-separated list of job ids. (optional)
     * @param jobDefinitionId Only select jobs which exist for the given job definition. (optional)
     * @param processInstanceId Only select jobs which exist for the given process instance. (optional)
     * @param processInstanceIds Only select jobs which exist for the given comma-separated list of process instance ids. (optional)
     * @param executionId Only select jobs which exist for the given execution. (optional)
     * @param processDefinitionId Filter by the id of the process definition the jobs run on. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the jobs run on. (optional)
     * @param activityId Only select jobs which exist for an activity with the given id. (optional)
     * @param withRetriesLeft Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param executable Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param timers Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param messages Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param dueDates Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param createTimes Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param withException Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param exceptionMessage Only select jobs that failed due to an exception with the given message. (optional)
     * @param failedActivityId Only select jobs that failed due to an exception at an activity with the given id. (optional)
     * @param noRetriesLeft Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param active Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param tenantIdIn Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeJobsWithoutTenantId Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;, or if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getJobs",
        summary = "Get Jobs",
        description = "Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query-count/) method.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job",
        produces = { "application/json" }
    )
    ResponseEntity<List<JobDto>> getJobs(
        @Parameter(name = "jobId", description = "Filter by job id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) String jobId,
        @Parameter(name = "jobIds", description = "Filter by a comma-separated list of job ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobIds", required = false) String jobIds,
        @Parameter(name = "jobDefinitionId", description = "Only select jobs which exist for the given job definition.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "processInstanceId", description = "Only select jobs which exist for the given process instance.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIds", description = "Only select jobs which exist for the given comma-separated list of process instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds,
        @Parameter(name = "executionId", description = "Only select jobs which exist for the given execution.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processDefinitionId", description = "Filter by the id of the process definition the jobs run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the jobs run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "activityId", description = "Only select jobs which exist for an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "withRetriesLeft", description = "Only select jobs which have retries left. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft,
        @Parameter(name = "executable", description = "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due date is in the past. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executable", required = false) Boolean executable,
        @Parameter(name = "timers", description = "Only select jobs that are timers. Cannot be used together with `messages`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timers", required = false) Boolean timers,
        @Parameter(name = "messages", description = "Only select jobs that are messages. Cannot be used together with `timers`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "messages", required = false) Boolean messages,
        @Parameter(name = "dueDates", description = "Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueDates", required = false) String dueDates,
        @Parameter(name = "createTimes", description = "Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createTimes", required = false) String createTimes,
        @Parameter(name = "withException", description = "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withException", required = false) Boolean withException,
        @Parameter(name = "exceptionMessage", description = "Only select jobs that failed due to an exception with the given message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exceptionMessage", required = false) String exceptionMessage,
        @Parameter(name = "failedActivityId", description = "Only select jobs that failed due to an exception at an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId,
        @Parameter(name = "noRetriesLeft", description = "Only select jobs which have no retries left. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "noRetriesLeft", required = false) Boolean noRetriesLeft,
        @Parameter(name = "active", description = "Only include active jobs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "priorityLowerThanOrEquals", description = "Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals,
        @Parameter(name = "priorityHigherThanOrEquals", description = "Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals,
        @Parameter(name = "tenantIdIn", description = "Only include jobs which belong to one of the passed comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeJobsWithoutTenantId", description = "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeJobsWithoutTenantId", required = false) Boolean includeJobsWithoutTenantId,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /job/count : Get Job Count
     * Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query/) method.
     *
     * @param jobId Filter by job id. (optional)
     * @param jobIds Filter by a comma-separated list of job ids. (optional)
     * @param jobDefinitionId Only select jobs which exist for the given job definition. (optional)
     * @param processInstanceId Only select jobs which exist for the given process instance. (optional)
     * @param processInstanceIds Only select jobs which exist for the given comma-separated list of process instance ids. (optional)
     * @param executionId Only select jobs which exist for the given execution. (optional)
     * @param processDefinitionId Filter by the id of the process definition the jobs run on. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the jobs run on. (optional)
     * @param activityId Only select jobs which exist for an activity with the given id. (optional)
     * @param withRetriesLeft Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param executable Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param timers Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param messages Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param dueDates Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param createTimes Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param withException Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param exceptionMessage Only select jobs that failed due to an exception with the given message. (optional)
     * @param failedActivityId Only select jobs that failed due to an exception at an activity with the given id. (optional)
     * @param noRetriesLeft Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param active Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param tenantIdIn Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeJobsWithoutTenantId Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example, if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getJobsCount",
        summary = "Get Job Count",
        description = "Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query/) method.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example, if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getJobsCount(
        @Parameter(name = "jobId", description = "Filter by job id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) String jobId,
        @Parameter(name = "jobIds", description = "Filter by a comma-separated list of job ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobIds", required = false) String jobIds,
        @Parameter(name = "jobDefinitionId", description = "Only select jobs which exist for the given job definition.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "processInstanceId", description = "Only select jobs which exist for the given process instance.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processInstanceIds", description = "Only select jobs which exist for the given comma-separated list of process instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds,
        @Parameter(name = "executionId", description = "Only select jobs which exist for the given execution.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "processDefinitionId", description = "Filter by the id of the process definition the jobs run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the jobs run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "activityId", description = "Only select jobs which exist for an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "withRetriesLeft", description = "Only select jobs which have retries left. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft,
        @Parameter(name = "executable", description = "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due date is in the past. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executable", required = false) Boolean executable,
        @Parameter(name = "timers", description = "Only select jobs that are timers. Cannot be used together with `messages`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timers", required = false) Boolean timers,
        @Parameter(name = "messages", description = "Only select jobs that are messages. Cannot be used together with `timers`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "messages", required = false) Boolean messages,
        @Parameter(name = "dueDates", description = "Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dueDates", required = false) String dueDates,
        @Parameter(name = "createTimes", description = "Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createTimes", required = false) String createTimes,
        @Parameter(name = "withException", description = "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withException", required = false) Boolean withException,
        @Parameter(name = "exceptionMessage", description = "Only select jobs that failed due to an exception with the given message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exceptionMessage", required = false) String exceptionMessage,
        @Parameter(name = "failedActivityId", description = "Only select jobs that failed due to an exception at an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId,
        @Parameter(name = "noRetriesLeft", description = "Only select jobs which have no retries left. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "noRetriesLeft", required = false) Boolean noRetriesLeft,
        @Parameter(name = "active", description = "Only include active jobs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "priorityLowerThanOrEquals", description = "Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals,
        @Parameter(name = "priorityHigherThanOrEquals", description = "Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals,
        @Parameter(name = "tenantIdIn", description = "Only include jobs which belong to one of the passed comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeJobsWithoutTenantId", description = "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeJobsWithoutTenantId", required = false) Boolean includeJobsWithoutTenantId
    );


    /**
     * GET /job/{id}/stacktrace : Get Exception Stacktrace
     * Retrieves the exception stacktrace corresponding to the passed job id.
     *
     * @param id The id of the job to get the exception stacktrace for. (required)
     * @return Request successful. (status code 200)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getStacktrace",
        summary = "Get Exception Stacktrace",
        description = "Retrieves the exception stacktrace corresponding to the passed job id.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{id}/stacktrace",
        produces = { "text/plain", "application/json" }
    )
    ResponseEntity<Object> getStacktrace(
        @Parameter(name = "id", description = "The id of the job to get the exception stacktrace for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /job : Get Jobs (POST)
     * Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param jobQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;, or if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryJobs",
        summary = "Get Jobs (POST)",
        description = "Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types `String`, `Number` or `Boolean`.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<JobDto>> queryJobs(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "JobQueryDto", description = "") @Valid @RequestBody(required = false) JobQueryDto jobQueryDto
    );


    /**
     * POST /job/count : Get Job Count (POST)
     * Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.17/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query-count/) method.
     *
     * @param jobQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example, if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryJobsCount",
        summary = "Get Job Count (POST)",
        description = "Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.17/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query-count/) method.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example, if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryJobsCount(
        @Parameter(name = "JobQueryDto", description = "") @Valid @RequestBody(required = false) JobQueryDto jobQueryDto
    );


    /**
     * POST /job/{id}/duedate/recalculate : Recalculate Job Due Date
     * Recalculates the due date of a job by id.
     *
     * @param id The id of the job to be updated. (required)
     * @param creationDateBased Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The due date could not be recalculated successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "recalculateDuedate",
        summary = "Recalculate Job Due Date",
        description = "Recalculates the due date of a job by id.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The due date could not be recalculated successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{id}/duedate/recalculate",
        produces = { "application/json" }
    )
    ResponseEntity<Void> recalculateDuedate(
        @Parameter(name = "id", description = "The id of the job to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "creationDateBased", description = "Recalculate the due date based on the creation date of the job or the current date. Value may only be `false`, as `true` is the default behavior. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "creationDateBased", required = false) Boolean creationDateBased
    );


    /**
     * PUT /job/{id}/duedate : Set Job Due Date
     * Updates the due date of a job by id.
     *
     * @param id The id of the job to be updated. (required)
     * @param jobDuedateDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The due date could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "setJobDuedate",
        summary = "Set Job Due Date",
        description = "Updates the due date of a job by id.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The due date could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job/{id}/duedate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setJobDuedate(
        @Parameter(name = "id", description = "The id of the job to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "JobDuedateDto", description = "") @Valid @RequestBody(required = false) JobDuedateDto jobDuedateDto
    );


    /**
     * PUT /job/{id}/priority : Set Job Priority
     * Sets the execution priority of a job by id.
     *
     * @param id The id of the job to be updated. (required)
     * @param priorityDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The priority could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "setJobPriority",
        summary = "Set Job Priority",
        description = "Sets the execution priority of a job by id.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The priority could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job/{id}/priority",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setJobPriority(
        @Parameter(name = "id", description = "The id of the job to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "PriorityDto", description = "") @Valid @RequestBody(required = false) PriorityDto priorityDto
    );


    /**
     * PUT /job/{id}/retries : Set Job Retries
     * Sets the retries of the job to the given number of retries by id.
     *
     * @param id The id of the job to be updated. (required)
     * @param retriesDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     *         or The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "setJobRetries",
        summary = "Set Job Retries",
        description = "Sets the retries of the job to the given number of retries by id.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job/{id}/retries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setJobRetries(
        @Parameter(name = "id", description = "The id of the job to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RetriesDto", description = "") @Valid @RequestBody(required = false) RetriesDto retriesDto
    );


    /**
     * POST /job/retries : Set Job Retries Async (POST)
     * Create a batch to set retries of jobs asynchronously.
     *
     * @param setJobRetriesDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if neither processInstanceIds nor processInstanceQuery is present. Or if the retry count is not specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "setJobRetriesAsyncOperation",
        summary = "Set Job Retries Async (POST)",
        description = "Create a batch to set retries of jobs asynchronously.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if neither processInstanceIds nor processInstanceQuery is present. Or if the retry count is not specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/retries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> setJobRetriesAsyncOperation(
        @Parameter(name = "SetJobRetriesDto", description = "") @Valid @RequestBody(required = false) SetJobRetriesDto setJobRetriesDto
    );


    /**
     * PUT /job/{id}/suspended : Activate/Suspend Job By Id
     * Activates or suspends a given job by id.
     *
     * @param id The id of the job to activate or suspend. (required)
     * @param suspensionStateDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     */
    @Operation(
        operationId = "updateJobSuspensionState",
        summary = "Activate/Suspend Job By Id",
        description = "Activates or suspends a given job by id.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job/{id}/suspended",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateJobSuspensionState(
        @Parameter(name = "id", description = "The id of the job to activate or suspend.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "SuspensionStateDto", description = "") @Valid @RequestBody(required = false) SuspensionStateDto suspensionStateDto
    );


    /**
     * PUT /job/suspended : Activate/Suspend Jobs
     * Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
     *
     * @param jobSuspensionStateDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Returned if the request parameters are invalid, for example, if &#x60;jobDefinitionId&#x60; and &#x60;processDefinitionId&#x60; are both specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "updateSuspensionStateBy",
        summary = "Activate/Suspend Jobs",
        description = "Activates or suspends jobs matching the given criterion. This can only be on of: * `jobDefinitionId` * `processDefinitionId` * `processInstanceId` * `processDefinitionKey`",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "Returned if the request parameters are invalid, for example, if `jobDefinitionId` and `processDefinitionId` are both specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/job/suspended",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateSuspensionStateBy(
        @Parameter(name = "JobSuspensionStateDto", description = "") @Valid @RequestBody(required = false) JobSuspensionStateDto jobSuspensionStateDto
    );

}
