/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.JobDto;
import com.tosan.camunda.camundaclient.generated.model.JobDuedateDto;
import com.tosan.camunda.camundaclient.generated.model.JobQueryDto;
import com.tosan.camunda.camundaclient.generated.model.JobSuspensionStateDto;
import com.tosan.camunda.camundaclient.generated.model.PriorityDto;
import com.tosan.camunda.camundaclient.generated.model.RetriesDto;
import com.tosan.camunda.camundaclient.generated.model.SetJobRetriesDto;
import com.tosan.camunda.camundaclient.generated.model.SuspensionStateDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface JobApi {

    Logger log = LoggerFactory.getLogger(JobApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Execute Job", description = "Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The job could not be executed successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}/execute",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> executeJob(@Parameter(in = ParameterIn.PATH, description = "The id of the job to be executed.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Job", description = "Retrieves a job by id, according to the `Job` interface in the engine.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JobDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JobDto> getJob(@Parameter(in = ParameterIn.PATH, description = "The id of the job to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Jobs", description = "Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query-count/) method.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<JobDto>> getJobs(@Parameter(in = ParameterIn.QUERY, description = "Filter by job id." ,schema=@Schema()) @Valid @RequestParam(value = "jobId", required = false) String jobId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of job ids." ,schema=@Schema()) @Valid @RequestParam(value = "jobIds", required = false) String jobIds, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given job definition." ,schema=@Schema()) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given process instance." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given comma-separated list of process instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given execution." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the process definition the jobs run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the key of the process definition the jobs run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which have retries left. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due date is in the past. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "executable", required = false) Boolean executable, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that are timers. Cannot be used together with `messages`. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "timers", required = false) Boolean timers, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that are messages. Cannot be used together with `timers`. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "messages", required = false) Boolean messages, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters." ,schema=@Schema()) @Valid @RequestParam(value = "dueDates", required = false) String dueDates, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters." ,schema=@Schema()) @Valid @RequestParam(value = "createTimes", required = false) String createTimes, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withException", required = false) Boolean withException, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that failed due to an exception with the given message." ,schema=@Schema()) @Valid @RequestParam(value = "exceptionMessage", required = false) String exceptionMessage, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that failed due to an exception at an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which have no retries left. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "noRetriesLeft", required = false) Boolean noRetriesLeft, @Parameter(in = ParameterIn.QUERY, description = "Only include active jobs. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active, @Parameter(in = ParameterIn.QUERY, description = "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value." ,schema=@Schema()) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value." ,schema=@Schema()) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs which belong to one of the passed comma-separated tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "includeJobsWithoutTenantId", required = false) Boolean includeJobsWithoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "jobId", "executionId", "processInstanceId", "processDefinitionId", "processDefinitionKey", "jobPriority", "jobRetries", "jobDueDate", "tenantId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Get Job Count", description = "Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query/) method.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example, if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getJobsCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by job id." ,schema=@Schema()) @Valid @RequestParam(value = "jobId", required = false) String jobId, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of job ids." ,schema=@Schema()) @Valid @RequestParam(value = "jobIds", required = false) String jobIds, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given job definition." ,schema=@Schema()) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given process instance." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given comma-separated list of process instance ids." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceIds", required = false) String processInstanceIds, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for the given execution." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the process definition the jobs run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the key of the process definition the jobs run on." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which exist for an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which have retries left. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withRetriesLeft", required = false) Boolean withRetriesLeft, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due date is in the past. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "executable", required = false) Boolean executable, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that are timers. Cannot be used together with `messages`. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "timers", required = false) Boolean timers, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that are messages. Cannot be used together with `timers`. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "messages", required = false) Boolean messages, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters." ,schema=@Schema()) @Valid @RequestParam(value = "dueDates", required = false) String dueDates, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form `operator_value`. `operator` is the comparison operator to be used and `value` the date value as string.  Valid operator values are: `gt` - greater than; `lt` - lower than. `value` may not contain underscore or comma characters." ,schema=@Schema()) @Valid @RequestParam(value = "createTimes", required = false) String createTimes, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withException", required = false) Boolean withException, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that failed due to an exception with the given message." ,schema=@Schema()) @Valid @RequestParam(value = "exceptionMessage", required = false) String exceptionMessage, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs that failed due to an exception at an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId, @Parameter(in = ParameterIn.QUERY, description = "Only select jobs which have no retries left. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "noRetriesLeft", required = false) Boolean noRetriesLeft, @Parameter(in = ParameterIn.QUERY, description = "Only include active jobs. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active, @Parameter(in = ParameterIn.QUERY, description = "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value." ,schema=@Schema()) @Valid @RequestParam(value = "priorityLowerThanOrEquals", required = false) Long priorityLowerThanOrEquals, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value." ,schema=@Schema()) @Valid @RequestParam(value = "priorityHigherThanOrEquals", required = false) Long priorityHigherThanOrEquals, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs which belong to one of the passed comma-separated tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId, @Parameter(in = ParameterIn.QUERY, description = "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "includeJobsWithoutTenantId", required = false) Boolean includeJobsWithoutTenantId);


    @Operation(summary = "Get Exception Stacktrace", description = "Retrieves the exception stacktrace corresponding to the passed job id.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}/stacktrace",
        produces = { "text/plain", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> getStacktrace(@Parameter(in = ParameterIn.PATH, description = "The id of the job to get the exception stacktrace for.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Jobs (POST)", description = "Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types `String`, `Number` or `Boolean`.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<JobDto>> queryJobs(@Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody JobQueryDto body);


    @Operation(summary = "Get Job Count (POST)", description = "Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.17/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.17/reference/rest/job/get-query-count/) method.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example, if an invalid operator for due date comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/count",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CountResultDto> queryJobsCount(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody JobQueryDto body);


    @Operation(summary = "Recalculate Job Due Date", description = "Recalculates the due date of a job by id.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The due date could not be recalculated successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}/duedate/recalculate",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> recalculateDuedate(@Parameter(in = ParameterIn.PATH, description = "The id of the job to be updated.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Recalculate the due date based on the creation date of the job or the current date. Value may only be `false`, as `true` is the default behavior. " ,schema=@Schema()) @Valid @RequestParam(value = "creationDateBased", required = false) Boolean creationDateBased);


    @Operation(summary = "Set Job Due Date", description = "Updates the due date of a job by id.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The due date could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}/duedate",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setJobDuedate(@Parameter(in = ParameterIn.PATH, description = "The id of the job to be updated.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody JobDuedateDto body);


    @Operation(summary = "Set Job Priority", description = "Sets the execution priority of a job by id.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The priority could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}/priority",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setJobPriority(@Parameter(in = ParameterIn.PATH, description = "The id of the job to be updated.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody PriorityDto body);


    @Operation(summary = "Set Job Retries", description = "Sets the retries of the job to the given number of retries by id.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "404", description = "Job with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The retries could not be set successfully. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/{id}/retries",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setJobRetries(@Parameter(in = ParameterIn.PATH, description = "The id of the job to be updated.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody RetriesDto body);


    @Operation(summary = "Set Job Retries Async (POST)", description = "Create a batch to set retries of jobs asynchronously.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if neither processInstanceIds nor processInstanceQuery is present. Or if the retry count is not specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/retries",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BatchDto> setJobRetriesAsyncOperation(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SetJobRetriesDto body);


    @Operation(summary = "Activate/Suspend Job By Id", description = "Activates or suspends a given job by id.", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content.") })
    @RequestMapping(value = "/job/{id}/suspended",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateJobSuspensionState(@Parameter(in = ParameterIn.PATH, description = "The id of the job to activate or suspend.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SuspensionStateDto body);


    @Operation(summary = "Activate/Suspend Jobs", description = "Activates or suspends jobs matching the given criterion. This can only be on of: * `jobDefinitionId` * `processDefinitionId` * `processInstanceId` * `processDefinitionKey`", tags={ "Job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = "Returned if the request parameters are invalid, for example, if `jobDefinitionId` and `processDefinitionId` are both specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/job/suspended",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSuspensionStateBy(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody JobSuspensionStateDto body);

}

