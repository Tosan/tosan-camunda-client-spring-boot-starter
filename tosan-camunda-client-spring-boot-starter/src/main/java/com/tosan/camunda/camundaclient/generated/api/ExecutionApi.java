/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.CreateIncidentDto;
import com.tosan.camunda.camundaclient.generated.model.EventSubscriptionDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.ExecutionDto;
import com.tosan.camunda.camundaclient.generated.model.ExecutionQueryDto;
import com.tosan.camunda.camundaclient.generated.model.ExecutionTriggerDto;
import com.tosan.camunda.camundaclient.generated.model.IncidentDto;
import com.tosan.camunda.camundaclient.generated.model.PatchVariablesDto;
import com.tosan.camunda.camundaclient.generated.model.VariableValueDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Execution", description = "the Execution API")
public interface ExecutionApi {

    /**
     * POST /execution/{id}/create-incident : Create Incident
     * Creates a custom incident with given properties.
     *
     * @param id The id of the execution to create a new incident for. (required)
     * @param createIncidentDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if the incident type is null, the execution does not exist or the execution is not related to any activity. (status code 400)
     */
    @Operation(
        operationId = "createIncident",
        summary = "Create Incident",
        description = "Creates a custom incident with given properties.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IncidentDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the incident type is null, the execution does not exist or the execution is not related to any activity.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution/{id}/create-incident",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<IncidentDto> createIncident(
        @Parameter(name = "id", description = "The id of the execution to create a new incident for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CreateIncidentDto", description = "") @Valid @RequestBody(required = false) CreateIncidentDto createIncidentDto
    );


    /**
     * DELETE /execution/{id}/localVariables/{varName} : Delete Local Execution Variable
     * Deletes a variable in the context of a given execution by id. Deletion does not propagate upwards in the execution hierarchy.
     *
     * @param id The id of the execution to delete the variable from. (required)
     * @param varName The name of the variable to delete. (required)
     * @return Request successful. This method returns no content. (status code 204)
     */
    @Operation(
        operationId = "deleteLocalExecutionVariable",
        summary = "Delete Local Execution Variable",
        description = "Deletes a variable in the context of a given execution by id. Deletion does not propagate upwards in the execution hierarchy.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/execution/{id}/localVariables/{varName}"
    )
    ResponseEntity<Void> deleteLocalExecutionVariable(
        @Parameter(name = "id", description = "The id of the execution to delete the variable from.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "varName", description = "The name of the variable to delete.", required = true, in = ParameterIn.PATH) @PathVariable("varName") String varName
    );


    /**
     * GET /execution/{id} : Get Execution
     * Retrieves an execution by id, according to the &#x60;Execution&#x60; interface in the engine.
     *
     * @param id The id of the execution to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Execution with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getExecution",
        summary = "Get Execution",
        description = "Retrieves an execution by id, according to the `Execution` interface in the engine.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExecutionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Execution with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ExecutionDto> getExecution(
        @Parameter(name = "id", description = "The id of the execution to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /execution : Get Executions
     * Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get Execution Count](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query-count/) method.
     *
     * @param businessKey Filter by the business key of the process instances the executions belong to. (optional)
     * @param processDefinitionId Filter by the process definition the executions run on. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the executions run on. (optional)
     * @param processInstanceId Filter by the id of the process instance the execution belongs to. (optional)
     * @param activityId Filter by the id of the activity the execution currently executes. (optional)
     * @param signalEventSubscriptionName Select only those executions that expect a signal of the given name. (optional)
     * @param messageEventSubscriptionName Select only those executions that expect a message of the given name. (optional)
     * @param active Only include active executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids. (optional)
     * @param variables Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param processVariables Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match all variable values provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getExecutions",
        summary = "Get Executions",
        description = "Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get Execution Count](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query-count/) method.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ExecutionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution",
        produces = { "application/json" }
    )
    ResponseEntity<List<ExecutionDto>> getExecutions(
        @Parameter(name = "businessKey", description = "Filter by the business key of the process instances the executions belong to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "businessKey", required = false) String businessKey,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the executions run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the executions run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processInstanceId", description = "Filter by the id of the process instance the execution belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "activityId", description = "Filter by the id of the activity the execution currently executes.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "signalEventSubscriptionName", description = "Select only those executions that expect a signal of the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "signalEventSubscriptionName", required = false) String signalEventSubscriptionName,
        @Parameter(name = "messageEventSubscriptionName", description = "Select only those executions that expect a message of the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "messageEventSubscriptionName", required = false) String messageEventSubscriptionName,
        @Parameter(name = "active", description = "Only include active executions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended executions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "incidentId", description = "Filter by the incident id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentId", required = false) String incidentId,
        @Parameter(name = "incidentType", description = "Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentMessage", description = "Filter by the incident message. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Filter by the incident message that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "variables", description = "Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variables", required = false) String variables,
        @Parameter(name = "processVariables", description = "Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processVariables", required = false) String processVariables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match all variable names provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match all variable values provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /execution/count : Get Execution Count
     * Queries for the number of executions that fulfill given parameters. Takes the same parameters as the [Get Executions](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query/) method.
     *
     * @param businessKey Filter by the business key of the process instances the executions belong to. (optional)
     * @param processDefinitionId Filter by the process definition the executions run on. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the executions run on. (optional)
     * @param processInstanceId Filter by the id of the process instance the execution belongs to. (optional)
     * @param activityId Filter by the id of the activity the execution currently executes. (optional)
     * @param signalEventSubscriptionName Select only those executions that expect a signal of the given name. (optional)
     * @param messageEventSubscriptionName Select only those executions that expect a message of the given name. (optional)
     * @param active Only include active executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids. (optional)
     * @param variables Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param processVariables Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match all variable values provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getExecutionsCount",
        summary = "Get Execution Count",
        description = "Queries for the number of executions that fulfill given parameters. Takes the same parameters as the [Get Executions](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query/) method.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getExecutionsCount(
        @Parameter(name = "businessKey", description = "Filter by the business key of the process instances the executions belong to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "businessKey", required = false) String businessKey,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the executions run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the executions run on.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processInstanceId", description = "Filter by the id of the process instance the execution belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "activityId", description = "Filter by the id of the activity the execution currently executes.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "signalEventSubscriptionName", description = "Select only those executions that expect a signal of the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "signalEventSubscriptionName", required = false) String signalEventSubscriptionName,
        @Parameter(name = "messageEventSubscriptionName", description = "Select only those executions that expect a message of the given name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "messageEventSubscriptionName", required = false) String messageEventSubscriptionName,
        @Parameter(name = "active", description = "Only include active executions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "suspended", description = "Only include suspended executions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "incidentId", description = "Filter by the incident id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentId", required = false) String incidentId,
        @Parameter(name = "incidentType", description = "Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentMessage", description = "Filter by the incident message. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Filter by the incident message that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "variables", description = "Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variables", required = false) String variables,
        @Parameter(name = "processVariables", description = "Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.  Valid operator values are: `eq` - equal to; `neq` - not equal to. `key` and `value` may not contain underscore or comma characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processVariables", required = false) String processVariables,
        @Parameter(name = "variableNamesIgnoreCase", description = "Match all variable names provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableNamesIgnoreCase", required = false) Boolean variableNamesIgnoreCase,
        @Parameter(name = "variableValuesIgnoreCase", description = "Match all variable values provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "variableValuesIgnoreCase", required = false) Boolean variableValuesIgnoreCase
    );


    /**
     * GET /execution/{id}/localVariables/{varName} : Get Local Execution Variable
     * Retrieves a variable from the context of a given execution by id. Does not traverse the parent execution hierarchy.
     *
     * @param id The id of the execution to retrieve the variable from. (required)
     * @param varName The name of the variable to get. (required)
     * @param deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath. If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @return Request successful. (status code 200)
     *         or Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getLocalExecutionVariable",
        summary = "Get Local Execution Variable",
        description = "Retrieves a variable from the context of a given execution by id. Does not traverse the parent execution hierarchy.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Variable with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution/{id}/localVariables/{varName}",
        produces = { "application/json" }
    )
    ResponseEntity<VariableValueDto> getLocalExecutionVariable(
        @Parameter(name = "id", description = "The id of the execution to retrieve the variable from.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "varName", description = "The name of the variable to get.", required = true, in = ParameterIn.PATH) @PathVariable("varName") String varName,
        @Parameter(name = "deserializeValue", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath. If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValue", required = false) Boolean deserializeValue
    );


    /**
     * GET /execution/{id}/localVariables/{varName}/data : Get Local Execution Variable (Binary)
     * Retrieves a binary variable from the context of a given execution by id. Does not traverse the parent execution hierarchy. Applicable for byte array and file variables.
     *
     * @param id The id of the execution to retrieve the variable from. (required)
     * @param varName The name of the variable to get. (required)
     * @return Request successful.         For binary variables or files without any MIME type information, a byte stream is returned.         File variables with MIME type information are returned as the saved type.         Additionally, for file variables the Content-Disposition header will be set. (status code 200)
     *         or Variable instance with given id exists but is not a binary variable. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Variable instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getLocalExecutionVariableBinary",
        summary = "Get Local Execution Variable (Binary)",
        description = "Retrieves a binary variable from the context of a given execution by id. Does not traverse the parent execution hierarchy. Applicable for byte array and file variables.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.         For binary variables or files without any MIME type information, a byte stream is returned.         File variables with MIME type information are returned as the saved type.         Additionally, for file variables the Content-Disposition header will be set.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Variable instance with given id exists but is not a binary variable. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Variable instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution/{id}/localVariables/{varName}/data",
        produces = { "application/octet-stream", "text/plain", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getLocalExecutionVariableBinary(
        @Parameter(name = "id", description = "The id of the execution to retrieve the variable from.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "varName", description = "The name of the variable to get.", required = true, in = ParameterIn.PATH) @PathVariable("varName") String varName
    );


    /**
     * GET /execution/{id}/localVariables : Get Local Execution Variables
     * Retrieves all variables of a given execution by id.
     *
     * @param id The id of the execution to retrieve the variables from. (required)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @return Request successful. Returns A JSON object of variables key-value pairs. Each key is a variable name and each value a VariableValueDto (status code 200)
     *         or Execution with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "getLocalExecutionVariables",
        summary = "Get Local Execution Variables",
        description = "Retrieves all variables of a given execution by id.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. Returns A JSON object of variables key-value pairs. Each key is a variable name and each value a VariableValueDto", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VariableValueDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Execution with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution/{id}/localVariables",
        produces = { "application/json" }
    )
    ResponseEntity<Map<String, VariableValueDto>> getLocalExecutionVariables(
        @Parameter(name = "id", description = "The id of the execution to retrieve the variables from.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "deserializeValues", description = "Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `true`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this parameter to `false` when developing web applications that are independent of the Java process applications deployed to the engine.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserializeValues", required = false) Boolean deserializeValues
    );


    /**
     * GET /execution/{id}/messageSubscriptions/{messageName} : Get Message Event Subscription
     * Retrieves a message event subscription for a given execution by id and a message name.
     *
     * @param id The id of the execution that holds the subscription. (required)
     * @param messageName The name of the message that the subscription corresponds to. (required)
     * @return Request successful. (status code 200)
     *         or A message subscription for the given name and execution does not exist. This may either mean that the execution does not exist, or that it is not subscribed on such a message. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getMessageEventSubscription",
        summary = "Get Message Event Subscription",
        description = "Retrieves a message event subscription for a given execution by id and a message name.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventSubscriptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "A message subscription for the given name and execution does not exist. This may either mean that the execution does not exist, or that it is not subscribed on such a message. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/execution/{id}/messageSubscriptions/{messageName}",
        produces = { "application/json" }
    )
    ResponseEntity<EventSubscriptionDto> getMessageEventSubscription(
        @Parameter(name = "id", description = "The id of the execution that holds the subscription.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "messageName", description = "The name of the message that the subscription corresponds to.", required = true, in = ParameterIn.PATH) @PathVariable("messageName") String messageName
    );


    /**
     * POST /execution/{id}/localVariables : Update/Delete Local Execution Variables
     * Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     *
     * @param id The id of the execution to set variables for. (required)
     * @param patchVariablesDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error- handling) for the error response format. (status code 400)
     *         or Update or delete could not be executed, for example because the execution does not exist. (status code 500)
     */
    @Operation(
        operationId = "modifyLocalExecutionVariables",
        summary = "Update/Delete Local Execution Variables",
        description = "Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error- handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Update or delete could not be executed, for example because the execution does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution/{id}/localVariables",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> modifyLocalExecutionVariables(
        @Parameter(name = "id", description = "The id of the execution to set variables for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "PatchVariablesDto", description = "") @Valid @RequestBody(required = false) PatchVariablesDto patchVariablesDto
    );


    /**
     * PUT /execution/{id}/localVariables/{varName} : Put Local Execution Variable
     * Sets a variable in the context of a given execution by id. Update does not propagate upwards in the execution hierarchy.
     *
     * @param id The id of the execution to set the variable for. (required)
     * @param varName The name of the variable to set. (required)
     * @param variableValueDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error- handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "putLocalExecutionVariable",
        summary = "Put Local Execution Variable",
        description = "Sets a variable in the context of a given execution by id. Update does not propagate upwards in the execution hierarchy.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error- handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/execution/{id}/localVariables/{varName}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> putLocalExecutionVariable(
        @Parameter(name = "id", description = "The id of the execution to set the variable for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "varName", description = "The name of the variable to set.", required = true, in = ParameterIn.PATH) @PathVariable("varName") String varName,
        @Parameter(name = "VariableValueDto", description = "") @Valid @RequestBody(required = false) VariableValueDto variableValueDto
    );


    /**
     * POST /execution : Get Executions (POST)
     * Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Executions](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query/) method because it allows to filter by multiple instance and execution variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param executionQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryExecutions",
        summary = "Get Executions (POST)",
        description = "Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Executions](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query/) method because it allows to filter by multiple instance and execution variables of types `String`, `Number` or `Boolean`.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ExecutionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`, or if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<ExecutionDto>> queryExecutions(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "ExecutionQueryDto", description = "") @Valid @RequestBody(required = false) ExecutionQueryDto executionQueryDto
    );


    /**
     * POST /execution/count : Get Execution Count (POST)
     * Queries for the number of executions that fulfill given parameters. This method takes the same message body as the [Get Executions POST](https://docs.camunda.org/manual/7.17/reference/rest/execution/post-query/) method and therefore it is slightly more powerful than the [Get Execution Count](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query-count/) method.
     *
     * @param executionQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryExecutionsCount",
        summary = "Get Execution Count (POST)",
        description = "Queries for the number of executions that fulfill given parameters. This method takes the same message body as the [Get Executions POST](https://docs.camunda.org/manual/7.17/reference/rest/execution/post-query/) method and therefore it is slightly more powerful than the [Get Execution Count](https://docs.camunda.org/manual/7.17/reference/rest/execution/get-query-count/) method.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryExecutionsCount(
        @Parameter(name = "ExecutionQueryDto", description = "") @Valid @RequestBody(required = false) ExecutionQueryDto executionQueryDto
    );


    /**
     * POST /execution/{id}/localVariables/{varName}/data : Post Local Execution Variable (Binary)
     * Sets the serialized value for a binary variable or the binary value for a file variable in the context of a given execution by id.
     *
     * @param id The id of the execution to set the variable for. (required)
     * @param varName The name of the variable to set. (required)
     * @param data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param valueType The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The variable value or type is invalid, for example if no filename is set. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "setLocalExecutionVariableBinary",
        summary = "Post Local Execution Variable (Binary)",
        description = "Sets the serialized value for a binary variable or the binary value for a file variable in the context of a given execution by id.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if no filename is set. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution/{id}/localVariables/{varName}/data",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<Void> setLocalExecutionVariableBinary(
        @Parameter(name = "id", description = "The id of the execution to set the variable for.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "varName", description = "The name of the variable to set.", required = true, in = ParameterIn.PATH) @PathVariable("varName") String varName,
        @Parameter(name = "data", description = "The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory.") @RequestPart(value = "data", required = false) MultipartFile data,
        @Parameter(name = "valueType", description = "The name of the variable type. Either Bytes for a byte array variable or File for a file variable.") @Valid @RequestParam(value = "valueType", required = false) String valueType
    );


    /**
     * POST /execution/{id}/signal : Trigger Execution
     * Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
     *
     * @param id The id of the execution to signal. (required)
     * @param executionTriggerDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "signalExecution",
        summary = "Trigger Execution",
        description = "Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution/{id}/signal",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> signalExecution(
        @Parameter(name = "id", description = "The id of the execution to signal.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ExecutionTriggerDto", description = "") @Valid @RequestBody(required = false) ExecutionTriggerDto executionTriggerDto
    );


    /**
     * POST /execution/{id}/messageSubscriptions/{messageName}/trigger : Trigger Message Event Subscription
     * Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message&#39;s payload.
     *
     * @param id The id of the execution to submit the message to. (required)
     * @param messageName The name of the message that the addressed subscription corresponds to. (required)
     * @param executionTriggerDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or The addressed execution has no pending message subscriptions for the given message. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "triggerEvent",
        summary = "Trigger Message Event Subscription",
        description = "Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message's payload.",
        tags = { "Execution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The addressed execution has no pending message subscriptions for the given message. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/execution/{id}/messageSubscriptions/{messageName}/trigger",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> triggerEvent(
        @Parameter(name = "id", description = "The id of the execution to submit the message to.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "messageName", description = "The name of the message that the addressed subscription corresponds to.", required = true, in = ParameterIn.PATH) @PathVariable("messageName") String messageName,
        @Parameter(name = "ExecutionTriggerDto", description = "") @Valid @RequestBody(required = false) ExecutionTriggerDto executionTriggerDto
    );

}
