/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AuthorizationCheckResultDto;
import com.tosan.camunda.camundaclient.generated.model.AuthorizationCreateDto;
import com.tosan.camunda.camundaclient.generated.model.AuthorizationDto;
import com.tosan.camunda.camundaclient.generated.model.AuthorizationUpdateDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.ResourceOptionsDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface AuthorizationApi {

    Logger log = LoggerFactory.getLogger(AuthorizationApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Authorization Resource Options", description = "The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/authorization",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> availableOperationsAuthorization();


    @Operation(summary = "Authorization Resource Options", description = "The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on a given instance of the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/authorization/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> availableOperationsAuthorizationInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the authorization to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Create a New Authorization", description = "Creates a new authorization.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the properties in the request body are invalid, for example if a permission parameter is not valid for the provided resourceType. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "The authenticated user is unauthorized to create an instance of this resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The authorization could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization/create",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AuthorizationDto> createAuthorization(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AuthorizationCreateDto body);


    @Operation(summary = "Delete Authorization", description = "Deletes an authorization by id.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "If the authenticated user is unauthorized to delete the resource instance. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Authorization cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAuthorization(@Parameter(in = ParameterIn.PATH, description = "The id of the authorization to be deleted.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Authorization", description = "Retrieves an authorization by id.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Authorization with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AuthorizationDto> getAuthorization(@Parameter(in = ParameterIn.PATH, description = "The id of the authorization to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Authorization Count", description = "Queries for authorizations using a list of parameters and retrieves the count.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getAuthorizationCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the authorization." ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id, @Parameter(in = ParameterIn.QUERY, description = "Filter by authorization type. (0=global, 1=grant, 2=revoke). See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/authorization-service/#authorization-type) for more information about authorization types." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) Integer type, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of userIds." ,schema=@Schema()) @Valid @RequestParam(value = "userIdIn", required = false) String userIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of groupIds." ,schema=@Schema()) @Valid @RequestParam(value = "groupIdIn", required = false) String groupIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by an integer representation of the resource type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types." ,schema=@Schema()) @Valid @RequestParam(value = "resourceType", required = false) Integer resourceType, @Parameter(in = ParameterIn.QUERY, description = "Filter by resource id." ,schema=@Schema()) @Valid @RequestParam(value = "resourceId", required = false) String resourceId);


    @Operation(summary = "Perform an Authorization Check", description = "Performs an authorization check for the currently authenticated user.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationCheckResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a permission parameterName is not valid for the provided resourceType. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "401", description = "The user is not authenticated. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "When a `userId` is passed and the user does not possess a READ permission for the Authorization resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Authorization with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization/check",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AuthorizationCheckResultDto> isUserAuthorized(@NotNull @Parameter(in = ParameterIn.QUERY, description = "String value representing the permission name to check for." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "permissionName", required = true) String permissionName, @NotNull @Parameter(in = ParameterIn.QUERY, description = "String value for the name of the resource to check permissions for." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "resourceName", required = true) String resourceName, @NotNull @Parameter(in = ParameterIn.QUERY, description = "An integer representing the resource type to check permissions for. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "resourceType", required = true) Integer resourceType, @Parameter(in = ParameterIn.QUERY, description = "The id of the resource to check permissions for. If left blank, a check for global permissions on the resource is performed." ,schema=@Schema()) @Valid @RequestParam(value = "resourceId", required = false) String resourceId, @Parameter(in = ParameterIn.QUERY, description = "The id of the user to check permissions for. The currently authenticated user must have a READ permission for the Authorization resource. If `userId` is blank, a check for the currently authenticated user is performed." ,schema=@Schema()) @Valid @RequestParam(value = "userId", required = false) String userId);


    @Operation(summary = "Get Authorizations", description = "Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the [Get Authorization Count](https://docs.camunda.org/manual/7.17/reference/rest/authorization/get-query-count/) method.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AuthorizationDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AuthorizationDto>> queryAuthorizations(@Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the authorization." ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id, @Parameter(in = ParameterIn.QUERY, description = "Filter by authorization type. (0=global, 1=grant, 2=revoke). See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/authorization-service/#authorization-type) for more information about authorization types." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) Integer type, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of userIds." ,schema=@Schema()) @Valid @RequestParam(value = "userIdIn", required = false) String userIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of groupIds." ,schema=@Schema()) @Valid @RequestParam(value = "groupIdIn", required = false) String groupIdIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by an integer representation of the resource type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types." ,schema=@Schema()) @Valid @RequestParam(value = "resourceType", required = false) Integer resourceType, @Parameter(in = ParameterIn.QUERY, description = "Filter by resource id." ,schema=@Schema()) @Valid @RequestParam(value = "resourceId", required = false) String resourceId, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "resourceType", "resourceId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Update an Authorization", description = "Updates an authorization by id.", tags={ "Authorization" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the properties in the request body are invalid, for example if a permission parameter is not valid for the provided resourceType. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "403", description = "The authenticated user is unauthorized to update this resource. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "The authorization with the requested Id cannot be found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The authorization could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/authorization/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateAuthorization(@Parameter(in = ParameterIn.PATH, description = "The id of the authorization to be updated.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AuthorizationUpdateDto body);

}

