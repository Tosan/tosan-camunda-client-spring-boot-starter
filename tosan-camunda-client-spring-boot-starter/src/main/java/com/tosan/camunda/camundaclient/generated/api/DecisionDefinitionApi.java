/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.DecisionDefinitionDiagramDto;
import com.tosan.camunda.camundaclient.generated.model.DecisionDefinitionDto;
import com.tosan.camunda.camundaclient.generated.model.EvaluateDecisionDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoryTimeToLiveDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.VariableValueDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Decision Definition", description = "the Decision Definition API")
public interface DecisionDefinitionApi {

    /**
     * POST /decision-definition/{id}/evaluate : Evaluate By Id
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     *
     * @param id The id of the decision definition to be evaluated. (required)
     * @param evaluateDecisionDto  (optional)
     * @return Request successful. (status code 200)
     *         or Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "evaluateDecisionById",
        summary = "Evaluate By Id",
        description = "Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VariableValueDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/decision-definition/{id}/evaluate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<Map<String, VariableValueDto>>> evaluateDecisionById(
        @Parameter(name = "id", description = "The id of the decision definition to be evaluated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "EvaluateDecisionDto", description = "") @Valid @RequestBody(required = false) EvaluateDecisionDto evaluateDecisionDto
    );


    /**
     * POST /decision-definition/key/{key}/evaluate : Evaluate By Key
     * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
     *
     * @param key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param evaluateDecisionDto  (optional)
     * @return Request successful. (status code 200)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "evaluateDecisionByKey",
        summary = "Evaluate By Key",
        description = "Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VariableValueDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/decision-definition/key/{key}/evaluate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<Map<String, VariableValueDto>>> evaluateDecisionByKey(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof) to be evaluated.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "EvaluateDecisionDto", description = "") @Valid @RequestBody(required = false) EvaluateDecisionDto evaluateDecisionDto
    );


    /**
     * POST /decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate : Evaluate By Key And Tenant
     * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
     *
     * @param key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param tenantId The id of the tenant the decision definition belongs to. (required)
     * @param evaluateDecisionDto  (optional)
     * @return Request successful. (status code 200)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "evaluateDecisionByKeyAndTenant",
        summary = "Evaluate By Key And Tenant",
        description = "Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VariableValueDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<Map<String, VariableValueDto>>> evaluateDecisionByKeyAndTenant(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof) to be evaluated.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the decision definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "EvaluateDecisionDto", description = "") @Valid @RequestBody(required = false) EvaluateDecisionDto evaluateDecisionDto
    );


    /**
     * GET /decision-definition/{id} : Get Decision Definition By Id
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     *
     * @param id The id of the decision definition to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionById",
        summary = "Get Decision Definition By Id",
        description = "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionDefinitionDto> getDecisionDefinitionById(
        @Parameter(name = "id", description = "The id of the decision definition to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /decision-definition/key/{key} : Get Decision Definition By Key
     * Retrieves the latest version of the decision definition which belongs to no tenant.
     *
     * @param key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionByKey",
        summary = "Get Decision Definition By Key",
        description = "Retrieves the latest version of the decision definition which belongs to no tenant.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/key/{key}",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionDefinitionDto> getDecisionDefinitionByKey(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /decision-definition/key/{key}/tenant-id/{tenant-id} : Get Decision Definition By Key And Tenant Id
     * Retrieves the latest version of the decision definition for tenant
     *
     * @param key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the decision definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionByKeyAndTenantId",
        summary = "Get Decision Definition By Key And Tenant Id",
        description = "Retrieves the latest version of the decision definition for tenant",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionDefinitionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/key/{key}/tenant-id/{tenant-id}",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionDefinitionDto> getDecisionDefinitionByKeyAndTenantId(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the decision definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /decision-definition/{id}/diagram : Get Diagram
     * Retrieves the diagram of a decision definition.
     *
     * @param id The id of the process definition. (required)
     * @return Request successful. The image diagram of this process. (status code 200)
     *         or The decision definition doesn&#39;t have an associated diagram. (status code 204)
     *         or Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionDiagram",
        summary = "Get Diagram",
        description = "Retrieves the diagram of a decision definition.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The image diagram of this process.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The decision definition doesn't have an associated diagram."),
            @ApiResponse(responseCode = "404", description = "Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/{id}/diagram",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDecisionDefinitionDiagram(
        @Parameter(name = "id", description = "The id of the process definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /decision-definition/key/{key}/diagram : Get Diagram By Key
     * Returns the diagram for the latest version of the decision definition which belongs to no tenant
     *
     * @param key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @return Request successful. The image diagram of this process. (status code 200)
     *         or The decision definition doesn&#39;t have an associated diagram. (status code 204)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionDiagramByKey",
        summary = "Get Diagram By Key",
        description = "Returns the diagram for the latest version of the decision definition which belongs to no tenant",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The image diagram of this process.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The decision definition doesn't have an associated diagram."),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/key/{key}/diagram",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDecisionDefinitionDiagramByKey(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /decision-definition/key/{key}/tenant-id/{tenant-id}/diagram : Get Diagram By Key And Tenant
     * Returns the XML of the latest version of the decision definition for tenant.
     *
     * @param key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the decision definition belongs to. (required)
     * @return Request successful. The image diagram of this process. (status code 200)
     *         or The decision definition doesn&#39;t have an associated diagram. (status code 204)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionDiagramByKeyAndTenant",
        summary = "Get Diagram By Key And Tenant",
        description = "Returns the XML of the latest version of the decision definition for tenant.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. The image diagram of this process.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "204", description = "The decision definition doesn't have an associated diagram."),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExceptionDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram",
        produces = { "application/octet-stream", "*/*", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> getDecisionDefinitionDiagramByKeyAndTenant(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof) to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the decision definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /decision-definition/{id}/xml : Get XML By Id
     * Retrieves the DMN XML of a decision definition.
     *
     * @param id The id of the decision definition. (required)
     * @return Request successful. (status code 200)
     *         or Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionDmnXmlById",
        summary = "Get XML By Id",
        description = "Retrieves the DMN XML of a decision definition.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionDefinitionDiagramDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/{id}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionDefinitionDiagramDto> getDecisionDefinitionDmnXmlById(
        @Parameter(name = "id", description = "The id of the decision definition.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /decision-definition/key/{key}/xml : Get XML By Key
     * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
     *
     * @param key The key of the decision definition (the latest version thereof). (required)
     * @return Request successful. (status code 200)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionDmnXmlByKey",
        summary = "Get XML By Key",
        description = "Retrieves the XML for the latest version of the decision definition which belongs to no tenant.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionDefinitionDiagramDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/key/{key}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionDefinitionDiagramDto> getDecisionDefinitionDmnXmlByKey(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof).", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    );


    /**
     * GET /decision-definition/key/{key}/tenant-id/{tenant-id}/xml : Get XML By Key and Tenant
     * Retrieves the XML of the latest version of the decision definition for tenant
     *
     * @param key The key of the decision definition (the latest version thereof). (required)
     * @param tenantId The id of the tenant the decision definition belongs to. (required)
     * @return Request successful. (status code 200)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getDecisionDefinitionDmnXmlByKeyAndTenant",
        summary = "Get XML By Key and Tenant",
        description = "Retrieves the XML of the latest version of the decision definition for tenant",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DecisionDefinitionDiagramDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/key/{key}/tenant-id/{tenant-id}/xml",
        produces = { "application/json" }
    )
    ResponseEntity<DecisionDefinitionDiagramDto> getDecisionDefinitionDmnXmlByKeyAndTenant(
        @Parameter(name = "key", description = "The key of the decision definition (the latest version thereof).", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the decision definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId
    );


    /**
     * GET /decision-definition : Get List
     * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/decision-definition/get-query-count/) method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param decisionDefinitionId Filter by decision definition id. (optional)
     * @param decisionDefinitionIdIn Filter by decision definition ids. (optional)
     * @param name Filter by decision definition name. (optional)
     * @param nameLike Filter by decision definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param deployedAfter Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param deployedAt Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param keyLike Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param category Filter by decision definition category. Exact match. (optional)
     * @param categoryLike Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param version Filter by decision definition version. (optional)
     * @param latestVersion Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the decision definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param versionTag Filter by the version tag. (optional)
     * @param versionTagLike Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getDecisionDefinitions",
        summary = "Get List",
        description = "Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/decision-definition/get-query-count/) method.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DecisionDefinitionDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition",
        produces = { "application/json" }
    )
    ResponseEntity<List<DecisionDefinitionDto>> getDecisionDefinitions(
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "decisionDefinitionId", description = "Filter by decision definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionId", required = false) String decisionDefinitionId,
        @Parameter(name = "decisionDefinitionIdIn", description = "Filter by decision definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionIdIn", required = false) String decisionDefinitionIdIn,
        @Parameter(name = "name", description = "Filter by decision definition name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by decision definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "deploymentId", description = "Filter by the deployment the id belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "deployedAfter", description = "Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAfter,
        @Parameter(name = "deployedAt", description = "Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAt,
        @Parameter(name = "key", description = "Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "keyLike", description = "Filter by decision definition keys that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyLike", required = false) String keyLike,
        @Parameter(name = "category", description = "Filter by decision definition category. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryLike", description = "Filter by decision definition categories that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryLike", required = false) String categoryLike,
        @Parameter(name = "version", description = "Filter by decision definition version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersion", description = "Only include those decision definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersion", required = false) Boolean latestVersion,
        @Parameter(name = "resourceName", description = "Filter by the name of the decision definition resource. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceName", required = false) String resourceName,
        @Parameter(name = "resourceNameLike", description = "Filter by names of those decision definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceNameLike", required = false) String resourceNameLike,
        @Parameter(name = "decisionRequirementsDefinitionId", description = "Filter by the id of the decision requirements definition this decision definition belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionId", required = false) String decisionRequirementsDefinitionId,
        @Parameter(name = "decisionRequirementsDefinitionKey", description = "Filter by the key of the decision requirements definition this decision definition belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionKey", required = false) String decisionRequirementsDefinitionKey,
        @Parameter(name = "withoutDecisionRequirementsDefinition", description = "Only include decision definitions which does not belongs to any decision requirements definition. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutDecisionRequirementsDefinition", required = false) Boolean withoutDecisionRequirementsDefinition,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of `Strings`. A decision definition must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include decision definitions which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeDecisionDefinitionsWithoutTenantId", description = "Include decision definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDecisionDefinitionsWithoutTenantId", required = false) Boolean includeDecisionDefinitionsWithoutTenantId,
        @Parameter(name = "versionTag", description = "Filter by the version tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTag", required = false) String versionTag,
        @Parameter(name = "versionTagLike", description = "Filter by the version tags of those decision definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTagLike", required = false) String versionTagLike
    );


    /**
     * GET /decision-definition/count : Get List Count
     * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.17/reference/rest/decision-definition/get-query/) method.
     *
     * @param decisionDefinitionId Filter by decision definition id. (optional)
     * @param decisionDefinitionIdIn Filter by decision definition ids. (optional)
     * @param name Filter by decision definition name. (optional)
     * @param nameLike Filter by decision definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param deployedAfter Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param deployedAt Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param keyLike Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param category Filter by decision definition category. Exact match. (optional)
     * @param categoryLike Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param version Filter by decision definition version. (optional)
     * @param latestVersion Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the decision definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param versionTag Filter by the version tag. (optional)
     * @param versionTagLike Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getDecisionDefinitionsCount",
        summary = "Get List Count",
        description = "Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.17/reference/rest/decision-definition/get-query/) method.",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision-definition/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getDecisionDefinitionsCount(
        @Parameter(name = "decisionDefinitionId", description = "Filter by decision definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionId", required = false) String decisionDefinitionId,
        @Parameter(name = "decisionDefinitionIdIn", description = "Filter by decision definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionIdIn", required = false) String decisionDefinitionIdIn,
        @Parameter(name = "name", description = "Filter by decision definition name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by decision definition names that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "deploymentId", description = "Filter by the deployment the id belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "deployedAfter", description = "Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAfter,
        @Parameter(name = "deployedAt", description = "Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deployedAt", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime deployedAt,
        @Parameter(name = "key", description = "Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "keyLike", description = "Filter by decision definition keys that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyLike", required = false) String keyLike,
        @Parameter(name = "category", description = "Filter by decision definition category. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryLike", description = "Filter by decision definition categories that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryLike", required = false) String categoryLike,
        @Parameter(name = "version", description = "Filter by decision definition version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersion", description = "Only include those decision definitions that are latest versions. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersion", required = false) Boolean latestVersion,
        @Parameter(name = "resourceName", description = "Filter by the name of the decision definition resource. Exact match.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceName", required = false) String resourceName,
        @Parameter(name = "resourceNameLike", description = "Filter by names of those decision definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceNameLike", required = false) String resourceNameLike,
        @Parameter(name = "decisionRequirementsDefinitionId", description = "Filter by the id of the decision requirements definition this decision definition belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionId", required = false) String decisionRequirementsDefinitionId,
        @Parameter(name = "decisionRequirementsDefinitionKey", description = "Filter by the key of the decision requirements definition this decision definition belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionKey", required = false) String decisionRequirementsDefinitionKey,
        @Parameter(name = "withoutDecisionRequirementsDefinition", description = "Only include decision definitions which does not belongs to any decision requirements definition. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutDecisionRequirementsDefinition", required = false) Boolean withoutDecisionRequirementsDefinition,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of `Strings`. A decision definition must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include decision definitions which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "includeDecisionDefinitionsWithoutTenantId", description = "Include decision definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDecisionDefinitionsWithoutTenantId", required = false) Boolean includeDecisionDefinitionsWithoutTenantId,
        @Parameter(name = "versionTag", description = "Filter by the version tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTag", required = false) String versionTag,
        @Parameter(name = "versionTagLike", description = "Filter by the version tags of those decision definition resources that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versionTagLike", required = false) String versionTagLike
    );


    /**
     * PUT /decision-definition/{id}/history-time-to-live : Update History Time to Live
     * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
     *
     * @param id The id of the decision definition to change history time to live. (required)
     * @param historyTimeToLiveDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateHistoryTimeToLiveByDecisionDefinitionId",
        summary = "Update History Time to Live",
        description = "Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/decision-definition/{id}/history-time-to-live",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateHistoryTimeToLiveByDecisionDefinitionId(
        @Parameter(name = "id", description = "The id of the decision definition to change history time to live.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "HistoryTimeToLiveDto", description = "") @Valid @RequestBody(required = false) HistoryTimeToLiveDto historyTimeToLiveDto
    );


    /**
     * PUT /decision-definition/key/{key}/history-time-to-live : Update History Time to Live By Key
     * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
     *
     * @param key The key of the decision definitions to change history time to live. (required)
     * @param historyTimeToLiveDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateHistoryTimeToLiveByDecisionDefinitionKey",
        summary = "Update History Time to Live By Key",
        description = "Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/decision-definition/key/{key}/history-time-to-live",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateHistoryTimeToLiveByDecisionDefinitionKey(
        @Parameter(name = "key", description = "The key of the decision definitions to change history time to live.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "HistoryTimeToLiveDto", description = "") @Valid @RequestBody(required = false) HistoryTimeToLiveDto historyTimeToLiveDto
    );


    /**
     * PUT /decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live : Update History Time to Live By Key And Tenant
     * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
     *
     * @param key The key of the decision definitions to change history time to live. (required)
     * @param tenantId The id of the tenant the decision definition belongs to. (required)
     * @param historyTimeToLiveDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     *         or Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant",
        summary = "Update History Time to Live By Key And Tenant",
        description = "Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).",
        tags = { "Decision Definition" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Decision definition with given key does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(
        @Parameter(name = "key", description = "The key of the decision definitions to change history time to live.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "tenant-id", description = "The id of the tenant the decision definition belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("tenant-id") String tenantId,
        @Parameter(name = "HistoryTimeToLiveDto", description = "") @Valid @RequestBody(required = false) HistoryTimeToLiveDto historyTimeToLiveDto
    );

}
