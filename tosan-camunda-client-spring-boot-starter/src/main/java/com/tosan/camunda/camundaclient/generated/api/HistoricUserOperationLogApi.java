/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AnnotationDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.UserOperationLogEntryDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface HistoricUserOperationLogApi {

    Logger log = LoggerFactory.getLogger(HistoricUserOperationLogApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Clear Annotation of an User Operation Log (Historic)", description = "Clear the annotation which was previously set for auditing reasons.", tags={ "Historic User Operation Log" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid, for example if the `operationId` path parameter value does not exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/user-operation/{operationId}/clear-annotation",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> clearAnnotationUserOperationLog(@Parameter(in = ParameterIn.PATH, description = "The operation id of the operation log to be updated.", required=true, schema=@Schema()) @PathVariable("operationId") String operationId);


    @Operation(summary = "Get User Operation Log Count", description = "Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.", tags={ "Historic User Operation Log" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/user-operation/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> queryUserOperationCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by deployment id." ,schema=@Schema()) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition id." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition key." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by execution id." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by case definition id." ,schema=@Schema()) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by case execution id." ,schema=@Schema()) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations on this task." ,schema=@Schema()) @Valid @RequestParam(value = "taskId", required = false) String taskId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations on this external task." ,schema=@Schema()) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations on this batch." ,schema=@Schema()) @Valid @RequestParam(value = "batchId", required = false) String batchId, @Parameter(in = ParameterIn.QUERY, description = "Filter by job id." ,schema=@Schema()) @Valid @RequestParam(value = "jobId", required = false) String jobId, @Parameter(in = ParameterIn.QUERY, description = "Filter by job definition id." ,schema=@Schema()) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations of this user." ,schema=@Schema()) @Valid @RequestParam(value = "userId", required = false) String userId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation." ,schema=@Schema()) @Valid @RequestParam(value = "operationId", required = false) String operationId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the type of the operation like `Claim` or `Delegate`. See the [Javadoc](https://docs.camunda.org/manual/7.17/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types." ,schema=@Schema()) @Valid @RequestParam(value = "operationType", required = false) String operationType, @Parameter(in = ParameterIn.QUERY, description = "Filter by the type of the entity that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`." ,schema=@Schema()) @Valid @RequestParam(value = "entityType", required = false) String entityType, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`." ,schema=@Schema()) @Valid @RequestParam(value = "entityTypeIn", required = false) String entityTypeIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the category that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`." ,schema=@Schema()) @Valid @RequestParam(value = "category", required = false) String category, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of categories that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`." ,schema=@Schema()) @Valid @RequestParam(value = "categoryIn", required = false) String categoryIn, @Parameter(in = ParameterIn.QUERY, description = "Only include operations that changed this property, e.g., `owner` or `assignee`." ,schema=@Schema()) @Valid @RequestParam(value = "property", required = false) String property, @Parameter(in = ParameterIn.QUERY, description = "Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200." ,schema=@Schema()) @Valid @RequestParam(value = "afterTimestamp", required = false) OffsetDateTime afterTimestamp, @Parameter(in = ParameterIn.QUERY, description = "Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200." ,schema=@Schema()) @Valid @RequestParam(value = "beforeTimestamp", required = false) OffsetDateTime beforeTimestamp);


    @Operation(summary = "Get User Operation Log (Historic)", description = "Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field `processInstanceId` is populated. If a single operation updates all process instances of the same process definition, the field `processInstanceId` is `null` (a `null` restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field `processDefinitionId` is populated. This way, which entities were changed by a user operation can easily be reconstructed.", tags={ "Historic User Operation Log" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserOperationLogEntryDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/user-operation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserOperationLogEntryDto>> queryUserOperationEntries(@Parameter(in = ParameterIn.QUERY, description = "Filter by deployment id." ,schema=@Schema()) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition id." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition key." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by execution id." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by case definition id." ,schema=@Schema()) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by case instance id." ,schema=@Schema()) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by case execution id." ,schema=@Schema()) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations on this task." ,schema=@Schema()) @Valid @RequestParam(value = "taskId", required = false) String taskId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations on this external task." ,schema=@Schema()) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations on this batch." ,schema=@Schema()) @Valid @RequestParam(value = "batchId", required = false) String batchId, @Parameter(in = ParameterIn.QUERY, description = "Filter by job id." ,schema=@Schema()) @Valid @RequestParam(value = "jobId", required = false) String jobId, @Parameter(in = ParameterIn.QUERY, description = "Filter by job definition id." ,schema=@Schema()) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Only include operations of this user." ,schema=@Schema()) @Valid @RequestParam(value = "userId", required = false) String userId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation." ,schema=@Schema()) @Valid @RequestParam(value = "operationId", required = false) String operationId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the type of the operation like `Claim` or `Delegate`. See the [Javadoc](https://docs.camunda.org/manual/7.17/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types." ,schema=@Schema()) @Valid @RequestParam(value = "operationType", required = false) String operationType, @Parameter(in = ParameterIn.QUERY, description = "Filter by the type of the entity that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`." ,schema=@Schema()) @Valid @RequestParam(value = "entityType", required = false) String entityType, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`." ,schema=@Schema()) @Valid @RequestParam(value = "entityTypeIn", required = false) String entityTypeIn, @Parameter(in = ParameterIn.QUERY, description = "Filter by the category that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`." ,schema=@Schema()) @Valid @RequestParam(value = "category", required = false) String category, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of categories that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`." ,schema=@Schema()) @Valid @RequestParam(value = "categoryIn", required = false) String categoryIn, @Parameter(in = ParameterIn.QUERY, description = "Only include operations that changed this property, e.g., `owner` or `assignee`." ,schema=@Schema()) @Valid @RequestParam(value = "property", required = false) String property, @Parameter(in = ParameterIn.QUERY, description = "Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200." ,schema=@Schema()) @Valid @RequestParam(value = "afterTimestamp", required = false) OffsetDateTime afterTimestamp, @Parameter(in = ParameterIn.QUERY, description = "Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200." ,schema=@Schema()) @Valid @RequestParam(value = "beforeTimestamp", required = false) OffsetDateTime beforeTimestamp, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "timestamp" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Set Annotation to an User Operation Log (Historic)", description = "Set an annotation for auditing reasons.", tags={ "Historic User Operation Log" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid, for example if the `operationId` path parameter value does not exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/user-operation/{operationId}/set-annotation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setAnnotationUserOperationLog(@Parameter(in = ParameterIn.PATH, description = "The operation id of the operation log to be updated.", required=true, schema=@Schema()) @PathVariable("operationId") String operationId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AnnotationDto body);

}

