/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AnnotationDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.UserOperationLogEntryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic User Operation Log", description = "the Historic User Operation Log API")
public interface HistoricUserOperationLogApi {

    /**
     * PUT /history/user-operation/{operationId}/clear-annotation : Clear Annotation of an User Operation Log (Historic)
     * Clear the annotation which was previously set for auditing reasons.
     *
     * @param operationId The operation id of the operation log to be updated. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Returned if some of the request parameters are invalid, for example if the &#x60;operationId&#x60; path parameter value does not exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "clearAnnotationUserOperationLog",
        summary = "Clear Annotation of an User Operation Log (Historic)",
        description = "Clear the annotation which was previously set for auditing reasons.",
        tags = { "Historic User Operation Log" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid, for example if the `operationId` path parameter value does not exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/history/user-operation/{operationId}/clear-annotation",
        produces = { "application/json" }
    )
    ResponseEntity<Void> clearAnnotationUserOperationLog(
        @Parameter(name = "operationId", description = "The operation id of the operation log to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("operationId") String operationId
    );


    /**
     * GET /history/user-operation/count : Get User Operation Log Count
     * Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
     *
     * @param deploymentId Filter by deployment id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Filter by process definition key. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param executionId Filter by execution id. (optional)
     * @param caseDefinitionId Filter by case definition id. (optional)
     * @param caseInstanceId Filter by case instance id. (optional)
     * @param caseExecutionId Filter by case execution id. (optional)
     * @param taskId Only include operations on this task. (optional)
     * @param externalTaskId Only include operations on this external task. (optional)
     * @param batchId Only include operations on this batch. (optional)
     * @param jobId Filter by job id. (optional)
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param userId Only include operations of this user. (optional)
     * @param operationId Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param operationType Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.17/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param entityType Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param entityTypeIn Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param categoryIn Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param afterTimestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param beforeTimestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryUserOperationCount",
        summary = "Get User Operation Log Count",
        description = "Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.17/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.",
        tags = { "Historic User Operation Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/user-operation/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryUserOperationCount(
        @Parameter(name = "deploymentId", description = "Filter by deployment id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "executionId", description = "Filter by execution id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "caseDefinitionId", description = "Filter by case definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseInstanceId", description = "Filter by case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseExecutionId", description = "Filter by case execution id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId,
        @Parameter(name = "taskId", description = "Only include operations on this task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "externalTaskId", description = "Only include operations on this external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId,
        @Parameter(name = "batchId", description = "Only include operations on this batch.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "batchId", required = false) String batchId,
        @Parameter(name = "jobId", description = "Filter by job id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) String jobId,
        @Parameter(name = "jobDefinitionId", description = "Filter by job definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "userId", description = "Only include operations of this user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "operationId", description = "Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operationId", required = false) String operationId,
        @Parameter(name = "operationType", description = "Filter by the type of the operation like `Claim` or `Delegate`. See the [Javadoc](https://docs.camunda.org/manual/7.17/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operationType", required = false) String operationType,
        @Parameter(name = "entityType", description = "Filter by the type of the entity that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "entityType", required = false) String entityType,
        @Parameter(name = "entityTypeIn", description = "Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "entityTypeIn", required = false) String entityTypeIn,
        @Parameter(name = "category", description = "Filter by the category that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryIn", description = "Filter by a comma-separated list of categories that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryIn", required = false) String categoryIn,
        @Parameter(name = "property", description = "Only include operations that changed this property, e.g., `owner` or `assignee`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "property", required = false) String property,
        @Parameter(name = "afterTimestamp", description = "Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "afterTimestamp", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime afterTimestamp,
        @Parameter(name = "beforeTimestamp", description = "Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "beforeTimestamp", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime beforeTimestamp
    );


    /**
     * GET /history/user-operation : Get User Operation Log (Historic)
     * Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
     *
     * @param deploymentId Filter by deployment id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionKey Filter by process definition key. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param executionId Filter by execution id. (optional)
     * @param caseDefinitionId Filter by case definition id. (optional)
     * @param caseInstanceId Filter by case instance id. (optional)
     * @param caseExecutionId Filter by case execution id. (optional)
     * @param taskId Only include operations on this task. (optional)
     * @param externalTaskId Only include operations on this external task. (optional)
     * @param batchId Only include operations on this batch. (optional)
     * @param jobId Filter by job id. (optional)
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param userId Only include operations of this user. (optional)
     * @param operationId Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param operationType Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.17/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param entityType Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param entityTypeIn Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param categoryIn Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param afterTimestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param beforeTimestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryUserOperationEntries",
        summary = "Get User Operation Log (Historic)",
        description = "Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field `processInstanceId` is populated. If a single operation updates all process instances of the same process definition, the field `processInstanceId` is `null` (a `null` restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field `processDefinitionId` is populated. This way, which entities were changed by a user operation can easily be reconstructed.",
        tags = { "Historic User Operation Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserOperationLogEntryDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/user-operation",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserOperationLogEntryDto>> queryUserOperationEntries(
        @Parameter(name = "deploymentId", description = "Filter by deployment id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploymentId", required = false) String deploymentId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "executionId", description = "Filter by execution id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "caseDefinitionId", description = "Filter by case definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseInstanceId", description = "Filter by case instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "caseExecutionId", description = "Filter by case execution id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseExecutionId", required = false) String caseExecutionId,
        @Parameter(name = "taskId", description = "Only include operations on this task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "externalTaskId", description = "Only include operations on this external task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "externalTaskId", required = false) String externalTaskId,
        @Parameter(name = "batchId", description = "Only include operations on this batch.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "batchId", required = false) String batchId,
        @Parameter(name = "jobId", description = "Filter by job id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobId", required = false) String jobId,
        @Parameter(name = "jobDefinitionId", description = "Filter by job definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionId", required = false) String jobDefinitionId,
        @Parameter(name = "userId", description = "Only include operations of this user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "operationId", description = "Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operationId", required = false) String operationId,
        @Parameter(name = "operationType", description = "Filter by the type of the operation like `Claim` or `Delegate`. See the [Javadoc](https://docs.camunda.org/manual/7.17/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operationType", required = false) String operationType,
        @Parameter(name = "entityType", description = "Filter by the type of the entity that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "entityType", required = false) String entityType,
        @Parameter(name = "entityTypeIn", description = "Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are `Task`, `Attachment` or `IdentityLink`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "entityTypeIn", required = false) String entityTypeIn,
        @Parameter(name = "category", description = "Filter by the category that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "categoryIn", description = "Filter by a comma-separated list of categories that this operation is associated with, possible values are `TaskWorker`, `Admin` or `Operator`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryIn", required = false) String categoryIn,
        @Parameter(name = "property", description = "Only include operations that changed this property, e.g., `owner` or `assignee`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "property", required = false) String property,
        @Parameter(name = "afterTimestamp", description = "Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "afterTimestamp", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime afterTimestamp,
        @Parameter(name = "beforeTimestamp", description = "Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "beforeTimestamp", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime beforeTimestamp,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * PUT /history/user-operation/{operationId}/set-annotation : Set Annotation to an User Operation Log (Historic)
     * Set an annotation for auditing reasons.
     *
     * @param operationId The operation id of the operation log to be updated. (required)
     * @param annotationDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Returned if some of the request parameters are invalid, for example if the &#x60;operationId&#x60; path parameter value does not exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "setAnnotationUserOperationLog",
        summary = "Set Annotation to an User Operation Log (Historic)",
        description = "Set an annotation for auditing reasons.",
        tags = { "Historic User Operation Log" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "400", description = "Returned if some of the request parameters are invalid, for example if the `operationId` path parameter value does not exists. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/history/user-operation/{operationId}/set-annotation",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setAnnotationUserOperationLog(
        @Parameter(name = "operationId", description = "The operation id of the operation log to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("operationId") String operationId,
        @Parameter(name = "AnnotationDto", description = "") @Valid @RequestBody(required = false) AnnotationDto annotationDto
    );

}
