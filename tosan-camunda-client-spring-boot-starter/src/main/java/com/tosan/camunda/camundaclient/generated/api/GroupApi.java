/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.GroupDto;
import com.tosan.camunda.camundaclient.generated.model.GroupQueryDto;
import com.tosan.camunda.camundaclient.generated.model.ResourceOptionsDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Group", description = "the Group API")
public interface GroupApi {

    /**
     * OPTIONS /group/{id} : Group Resource Instance Options
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/group/{id}&#x60; resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the group. (required)
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableGroupInstanceOperations",
        summary = "Group Resource Instance Options",
        description = "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/group/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableGroupInstanceOperations(
        @Parameter(name = "id", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * OPTIONS /group/{id}/members : Group Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the group. (required)
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableGroupMembersOperations",
        summary = "Group Membership Resource Options",
        description = "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/group/{id}/members",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableGroupMembersOperations(
        @Parameter(name = "id", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * OPTIONS /group : Group Resource Options
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/group&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableGroupOperations",
        summary = "Group Resource Options",
        description = "The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/group",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableGroupOperations(
        
    );


    /**
     * POST /group/create : Create Group
     * Creates a new group.
     *
     * @param groupDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only (Cannot modify users / groups / memberships). (status code 403)
     *         or The group could not be created due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "createGroup",
        summary = "Create Group",
        description = "Creates a new group.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only (Cannot modify users / groups / memberships).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The group could not be created due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/group/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> createGroup(
        @Parameter(name = "GroupDto", description = "") @Valid @RequestBody(required = false) GroupDto groupDto
    );


    /**
     * PUT /group/{id}/members/{userId} : Create Group Member
     * Adds a member to a group.
     *
     * @param id The id of the group. (required)
     * @param userId The id of user to add to the group. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only (Cannot modify users / groups / memberships). (status code 403)
     *         or In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "createGroupMember",
        summary = "Create Group Member",
        description = "Adds a member to a group.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only (Cannot modify users / groups / memberships).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/group/{id}/members/{userId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> createGroupMember(
        @Parameter(name = "id", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "userId", description = "The id of user to add to the group.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    );


    /**
     * DELETE /group/{id} : Delete Group
     * Deletes a group by id.
     *
     * @param id The id of the group to be deleted. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only (Cannot modify users / groups / memberships). (status code 403)
     *         or Group cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteGroup",
        summary = "Delete Group",
        description = "Deletes a group by id.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only (Cannot modify users / groups / memberships).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Group cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/group/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteGroup(
        @Parameter(name = "id", description = "The id of the group to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * DELETE /group/{id}/members/{userId} : Delete a Group Member
     * Removes a member from a group.
     *
     * @param id The id of the group. (required)
     * @param userId The id of user to remove from the group. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only (Cannot modify users / groups / memberships). (status code 403)
     *         or In case an error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "deleteGroupMember",
        summary = "Delete a Group Member",
        description = "Removes a member from a group.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only (Cannot modify users / groups / memberships).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "In case an error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/group/{id}/members/{userId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteGroupMember(
        @Parameter(name = "id", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "userId", description = "The id of user to remove from the group.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    );


    /**
     * GET /group/{id} : Get Group
     * Retrieves a group by id.
     *
     * @param id The id of the group to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Group with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getGroup",
        summary = "Get Group",
        description = "Retrieves a group by id.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Group with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/group/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<GroupDto> getGroup(
        @Parameter(name = "id", description = "The id of the group to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /group/count : Get List Count
     * Queries for groups using a list of parameters and retrieves the count.
     *
     * @param id Filter by the id of the group. (optional)
     * @param idIn Filter by a comma seperated list of group ids. (optional)
     * @param name Filter by the name of the group. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param type Filter by the type of the group. (optional)
     * @param member Only retrieve groups where the given user id is a member of. (optional)
     * @param memberOfTenant Only retrieve groups which are members of the given tenant. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getGroupCount",
        summary = "Get List Count",
        description = "Queries for groups using a list of parameters and retrieves the count.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/group/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getGroupCount(
        @Parameter(name = "id", description = "Filter by the id of the group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) String id,
        @Parameter(name = "idIn", description = "Filter by a comma seperated list of group ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "idIn", required = false) String idIn,
        @Parameter(name = "name", description = "Filter by the name of the group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by the name that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "type", description = "Filter by the type of the group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "member", description = "Only retrieve groups where the given user id is a member of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "member", required = false) String member,
        @Parameter(name = "memberOfTenant", description = "Only retrieve groups which are members of the given tenant.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "memberOfTenant", required = false) String memberOfTenant
    );


    /**
     * GET /group : Get List
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.17/reference/rest/group/get-query-count) method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param id Filter by the id of the group. (optional)
     * @param idIn Filter by a comma seperated list of group ids. (optional)
     * @param name Filter by the name of the group. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param type Filter by the type of the group. (optional)
     * @param member Only retrieve groups where the given user id is a member of. (optional)
     * @param memberOfTenant Only retrieve groups which are members of the given tenant. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60; is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getQueryGroups",
        summary = "Get List",
        description = "Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.17/reference/rest/group/get-query-count) method.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/group",
        produces = { "application/json" }
    )
    ResponseEntity<List<GroupDto>> getQueryGroups(
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "id", description = "Filter by the id of the group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) String id,
        @Parameter(name = "idIn", description = "Filter by a comma seperated list of group ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "idIn", required = false) String idIn,
        @Parameter(name = "name", description = "Filter by the name of the group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by the name that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "type", description = "Filter by the type of the group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "member", description = "Only retrieve groups where the given user id is a member of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "member", required = false) String member,
        @Parameter(name = "memberOfTenant", description = "Only retrieve groups which are members of the given tenant.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "memberOfTenant", required = false) String memberOfTenant
    );


    /**
     * POST /group : Get List (POST)
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.17/reference/rest/group/post-query-count/) method.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param groupQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60; is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "postQueryGroups",
        summary = "Get List (POST)",
        description = "Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.17/reference/rest/group/post-query-count/) method.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<GroupDto>> postQueryGroups(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "GroupQueryDto", description = "") @Valid @RequestBody(required = false) GroupQueryDto groupQueryDto
    );


    /**
     * POST /group/count : Get List Count (POST)
     * Queries for groups using a list of parameters and retrieves the count.
     *
     * @param groupQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryGroupCount",
        summary = "Get List Count (POST)",
        description = "Queries for groups using a list of parameters and retrieves the count.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/group/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryGroupCount(
        @Parameter(name = "GroupQueryDto", description = "") @Valid @RequestBody(required = false) GroupQueryDto groupQueryDto
    );


    /**
     * PUT /group/{id} : Update Group
     * Updates a given group by id.
     *
     * @param id The id of the group. (required)
     * @param groupDto  (optional)
     * @return Request successful. No content. (status code 204)
     *         or Identity service is read-only (Cannot modify users / groups / memberships). (status code 403)
     *         or If the group with the requested Id cannot be found. (status code 404)
     *         or The group could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "updateGroup",
        summary = "Update Group",
        description = "Updates a given group by id.",
        tags = { "Group" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. No content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only (Cannot modify users / groups / memberships).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "If the group with the requested Id cannot be found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The group could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/group/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateGroup(
        @Parameter(name = "id", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "GroupDto", description = "") @Valid @RequestBody(required = false) GroupDto groupDto
    );

}
