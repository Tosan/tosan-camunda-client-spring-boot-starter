/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.BatchDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.DeleteHistoricDecisionInstancesDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricDecisionInstanceDto;
import java.time.OffsetDateTime;
import com.tosan.camunda.camundaclient.generated.model.SetRemovalTimeToHistoricDecisionInstancesDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Decision Instance", description = "the Historic Decision Instance API")
public interface HistoricDecisionInstanceApi {

    /**
     * POST /history/decision-instance/delete : Delete Async (POST)
     * Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
     *
     * @param deleteHistoricDecisionInstancesDto  (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, i.e. neither &#x60;historicDecisionInstanceIds&#x60; nor &#x60;historicDecisionInstanceQuery&#x60; is present. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling)  for the error response format. (status code 400)
     */
    @Operation(
        operationId = "deleteAsync",
        summary = "Delete Async (POST)",
        description = "Delete multiple historic decision instances asynchronously (batch). At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.",
        tags = { "Historic Decision Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, i.e. neither `historicDecisionInstanceIds` nor `historicDecisionInstanceQuery` is present. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling)  for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/decision-instance/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> deleteAsync(
        @Parameter(name = "DeleteHistoricDecisionInstancesDto", description = "") @Valid @RequestBody(required = false) DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto
    );


    /**
     * GET /history/decision-instance/{id} : Get Historic Decision Instance
     * Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
     *
     * @param id The id of the historic decision instance to be retrieved. (required)
     * @param includeInputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeOutputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param disableBinaryFetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param disableCustomObjectDeserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Historic decision instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricDecisionInstance",
        summary = "Get Historic Decision Instance",
        description = "Retrieves a historic decision instance by id, according to the  `HistoricDecisionInstance` interface in the engine.",
        tags = { "Historic Decision Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricDecisionInstanceDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Historic decision instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/decision-instance/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<HistoricDecisionInstanceDto> getHistoricDecisionInstance(
        @Parameter(name = "id", description = "The id of the historic decision instance to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "includeInputs", description = "Include input values in the result. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeInputs", required = false) Boolean includeInputs,
        @Parameter(name = "includeOutputs", description = "Include output values in the result. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeOutputs", required = false) Boolean includeOutputs,
        @Parameter(name = "disableBinaryFetching", description = "Disables fetching of byte array input and output values. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "disableBinaryFetching", required = false) Boolean disableBinaryFetching,
        @Parameter(name = "disableCustomObjectDeserialization", description = "Disables deserialization of input and output values that are custom objects. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "disableCustomObjectDeserialization", required = false) Boolean disableCustomObjectDeserialization
    );


    /**
     * GET /history/decision-instance : Get Historic Decision Instances
     * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
     *
     * @param decisionInstanceId Filter by decision instance id. (optional)
     * @param decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param decisionDefinitionId Filter by the decision definition the instances belongs to. (optional)
     * @param decisionDefinitionIdIn Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param decisionDefinitionKey Filter by the key of the decision definition the instances belongs to. (optional)
     * @param decisionDefinitionKeyIn Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param decisionDefinitionName Filter by the name of the decision definition the instances belongs to. (optional)
     * @param decisionDefinitionNameLike Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param processDefinitionId Filter by the process definition the instances belongs to. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the instances belongs to. (optional)
     * @param processInstanceId Filter by the process instance the instances belongs to. (optional)
     * @param caseDefinitionId Filter by the case definition the instances belongs to. (optional)
     * @param caseDefinitionKey Filter by the key of the case definition the instances belongs to. (optional)
     * @param caseInstanceId Filter by the case instance the instances belongs to. (optional)
     * @param activityIdIn Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param activityInstanceIdIn Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param evaluatedBefore Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param evaluatedAfter Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param userId Restrict to instances that were evaluated by the given user. (optional)
     * @param rootDecisionInstanceId Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param rootDecisionInstancesOnly Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param decisionRequirementsDefinitionId Filter by the decision requirements definition the instances belongs to. (optional)
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param includeInputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeOutputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param disableBinaryFetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param disableCustomObjectDeserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricDecisionInstances",
        summary = "Get Historic Decision Instances",
        description = "Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.",
        tags = { "Historic Decision Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricDecisionInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/decision-instance",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricDecisionInstanceDto>> getHistoricDecisionInstances(
        @Parameter(name = "decisionInstanceId", description = "Filter by decision instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionInstanceId", required = false) String decisionInstanceId,
        @Parameter(name = "decisionInstanceIdIn", description = "Filter by decision instance ids. Must be a comma-separated list of decision instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionInstanceIdIn", required = false) String decisionInstanceIdIn,
        @Parameter(name = "decisionDefinitionId", description = "Filter by the decision definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionId", required = false) String decisionDefinitionId,
        @Parameter(name = "decisionDefinitionIdIn", description = "Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionIdIn", required = false) String decisionDefinitionIdIn,
        @Parameter(name = "decisionDefinitionKey", description = "Filter by the key of the decision definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionKey", required = false) String decisionDefinitionKey,
        @Parameter(name = "decisionDefinitionKeyIn", description = "Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionKeyIn", required = false) String decisionDefinitionKeyIn,
        @Parameter(name = "decisionDefinitionName", description = "Filter by the name of the decision definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionName", required = false) String decisionDefinitionName,
        @Parameter(name = "decisionDefinitionNameLike", description = "Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionNameLike", required = false) String decisionDefinitionNameLike,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processInstanceId", description = "Filter by the process instance the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "caseDefinitionId", description = "Filter by the case definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseDefinitionKey", description = "Filter by the key of the case definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionKey", required = false) String caseDefinitionKey,
        @Parameter(name = "caseInstanceId", description = "Filter by the case instance the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "activityIdIn", description = "Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "activityInstanceIdIn", description = "Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic decision instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "evaluatedBefore", description = "Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "evaluatedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime evaluatedBefore,
        @Parameter(name = "evaluatedAfter", description = "Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "evaluatedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime evaluatedAfter,
        @Parameter(name = "userId", description = "Restrict to instances that were evaluated by the given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "rootDecisionInstanceId", description = "Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootDecisionInstanceId", required = false) String rootDecisionInstanceId,
        @Parameter(name = "rootDecisionInstancesOnly", description = "Restrict to instances those are the root decision instance of an evaluation. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootDecisionInstancesOnly", required = false) Boolean rootDecisionInstancesOnly,
        @Parameter(name = "decisionRequirementsDefinitionId", description = "Filter by the decision requirements definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionId", required = false) String decisionRequirementsDefinitionId,
        @Parameter(name = "decisionRequirementsDefinitionKey", description = "Filter by the key of the decision requirements definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionKey", required = false) String decisionRequirementsDefinitionKey,
        @Parameter(name = "includeInputs", description = "Include input values in the result. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeInputs", required = false) Boolean includeInputs,
        @Parameter(name = "includeOutputs", description = "Include output values in the result. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeOutputs", required = false) Boolean includeOutputs,
        @Parameter(name = "disableBinaryFetching", description = "Disables fetching of byte array input and output values. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "disableBinaryFetching", required = false) Boolean disableBinaryFetching,
        @Parameter(name = "disableCustomObjectDeserialization", description = "Disables deserialization of input and output values that are custom objects. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "disableCustomObjectDeserialization", required = false) Boolean disableCustomObjectDeserialization,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /history/decision-instance/count : Get Historic Decision Instance Count
     * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
     *
     * @param decisionInstanceId Filter by decision instance id. (optional)
     * @param decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param decisionDefinitionId Filter by the decision definition the instances belongs to. (optional)
     * @param decisionDefinitionIdIn Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param decisionDefinitionKey Filter by the key of the decision definition the instances belongs to. (optional)
     * @param decisionDefinitionKeyIn Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param decisionDefinitionName Filter by the name of the decision definition the instances belongs to. (optional)
     * @param decisionDefinitionNameLike Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param processDefinitionId Filter by the process definition the instances belongs to. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the instances belongs to. (optional)
     * @param processInstanceId Filter by the process instance the instances belongs to. (optional)
     * @param caseDefinitionId Filter by the case definition the instances belongs to. (optional)
     * @param caseDefinitionKey Filter by the key of the case definition the instances belongs to. (optional)
     * @param caseInstanceId Filter by the case instance the instances belongs to. (optional)
     * @param activityIdIn Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param activityInstanceIdIn Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param evaluatedBefore Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param evaluatedAfter Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param userId Restrict to instances that were evaluated by the given user. (optional)
     * @param rootDecisionInstanceId Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param rootDecisionInstancesOnly Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param decisionRequirementsDefinitionId Filter by the decision requirements definition the instances belongs to. (optional)
     * @param decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricDecisionInstancesCount",
        summary = "Get Historic Decision Instance Count",
        description = "Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.17/reference/rest/history/decision-instance/get-decision-instance-query/)  method.",
        tags = { "Historic Decision Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/decision-instance/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricDecisionInstancesCount(
        @Parameter(name = "decisionInstanceId", description = "Filter by decision instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionInstanceId", required = false) String decisionInstanceId,
        @Parameter(name = "decisionInstanceIdIn", description = "Filter by decision instance ids. Must be a comma-separated list of decision instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionInstanceIdIn", required = false) String decisionInstanceIdIn,
        @Parameter(name = "decisionDefinitionId", description = "Filter by the decision definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionId", required = false) String decisionDefinitionId,
        @Parameter(name = "decisionDefinitionIdIn", description = "Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionIdIn", required = false) String decisionDefinitionIdIn,
        @Parameter(name = "decisionDefinitionKey", description = "Filter by the key of the decision definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionKey", required = false) String decisionDefinitionKey,
        @Parameter(name = "decisionDefinitionKeyIn", description = "Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionKeyIn", required = false) String decisionDefinitionKeyIn,
        @Parameter(name = "decisionDefinitionName", description = "Filter by the name of the decision definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionName", required = false) String decisionDefinitionName,
        @Parameter(name = "decisionDefinitionNameLike", description = "Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionDefinitionNameLike", required = false) String decisionDefinitionNameLike,
        @Parameter(name = "processDefinitionId", description = "Filter by the process definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Filter by the key of the process definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "processInstanceId", description = "Filter by the process instance the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "caseDefinitionId", description = "Filter by the case definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionId", required = false) String caseDefinitionId,
        @Parameter(name = "caseDefinitionKey", description = "Filter by the key of the case definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseDefinitionKey", required = false) String caseDefinitionKey,
        @Parameter(name = "caseInstanceId", description = "Filter by the case instance the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInstanceId", required = false) String caseInstanceId,
        @Parameter(name = "activityIdIn", description = "Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityIdIn", required = false) String activityIdIn,
        @Parameter(name = "activityInstanceIdIn", description = "Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceIdIn", required = false) String activityInstanceIdIn,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic decision instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "evaluatedBefore", description = "Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "evaluatedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime evaluatedBefore,
        @Parameter(name = "evaluatedAfter", description = "Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "evaluatedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime evaluatedAfter,
        @Parameter(name = "userId", description = "Restrict to instances that were evaluated by the given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "rootDecisionInstanceId", description = "Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootDecisionInstanceId", required = false) String rootDecisionInstanceId,
        @Parameter(name = "rootDecisionInstancesOnly", description = "Restrict to instances those are the root decision instance of an evaluation. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootDecisionInstancesOnly", required = false) Boolean rootDecisionInstancesOnly,
        @Parameter(name = "decisionRequirementsDefinitionId", description = "Filter by the decision requirements definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionId", required = false) String decisionRequirementsDefinitionId,
        @Parameter(name = "decisionRequirementsDefinitionKey", description = "Filter by the key of the decision requirements definition the instances belongs to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decisionRequirementsDefinitionKey", required = false) String decisionRequirementsDefinitionKey
    );


    /**
     * POST /history/decision-instance/set-removal-time : Set Removal Time Async (POST)
     * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     *
     * @param setRemovalTimeToHistoricDecisionInstancesDto  (optional)
     * @return Request successful. (status code 200)
     *         or Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid, e. g. if neither historicDecisionInstances nor historicDecisionInstanceQuery is present or if no mode is specified.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "setRemovalTimeAsyncHistoricDecisionInstance",
        summary = "Set Removal Time Async (POST)",
        description = "Sets the removal time to multiple historic decision instances asynchronously (batch).  At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.",
        tags = { "Historic Decision Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BatchDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid, e. g. if neither historicDecisionInstances nor historicDecisionInstanceQuery is present or if no mode is specified.  See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/decision-instance/set-removal-time",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BatchDto> setRemovalTimeAsyncHistoricDecisionInstance(
        @Parameter(name = "SetRemovalTimeToHistoricDecisionInstancesDto", description = "") @Valid @RequestBody(required = false) SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto
    );

}
