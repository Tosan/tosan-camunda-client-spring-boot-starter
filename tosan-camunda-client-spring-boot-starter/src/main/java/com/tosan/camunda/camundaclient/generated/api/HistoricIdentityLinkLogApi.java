/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricIdentityLinkLogDto;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Identity Link Log", description = "the Historic Identity Link Log API")
public interface HistoricIdentityLinkLogApi {

    /**
     * GET /history/identity-link-log : Get Identity Link Logs
     * Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/identity-links/get-identity-link-query-count/) method.
     *
     * @param type Restricts to identity links that have the given type (candidate/assignee/owner). (optional)
     * @param userId Restricts to identity links that have the given user id. (optional)
     * @param groupId Restricts to identity links that have the given group id. (optional)
     * @param dateBefore Restricts to identity links that have the time before the given time. (optional)
     * @param dateAfter Restricts to identity links that have the time after the given time. (optional)
     * @param taskId Restricts to identity links that have the given task id. (optional)
     * @param processDefinitionId Restricts to identity links that have the given process definition id. (optional)
     * @param processDefinitionKey Restricts to identity links that have the given process definition key. (optional)
     * @param operationType Restricts to identity links that have the given operationType (add/delete). (optional)
     * @param assignerId Restricts to identity links that have the given assigner id. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. (optional)
     * @param withoutTenantId Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricIdentityLinks",
        summary = "Get Identity Link Logs",
        description = "Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/identity-links/get-identity-link-query-count/) method.",
        tags = { "Historic Identity Link Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricIdentityLinkLogDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/identity-link-log",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricIdentityLinkLogDto>> getHistoricIdentityLinks(
        @Parameter(name = "type", description = "Restricts to identity links that have the given type (candidate/assignee/owner).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "userId", description = "Restricts to identity links that have the given user id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "groupId", description = "Restricts to identity links that have the given group id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "dateBefore", description = "Restricts to identity links that have the time before the given time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateBefore,
        @Parameter(name = "dateAfter", description = "Restricts to identity links that have the time after the given time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateAfter,
        @Parameter(name = "taskId", description = "Restricts to identity links that have the given task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "processDefinitionId", description = "Restricts to identity links that have the given process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Restricts to identity links that have the given process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "operationType", description = "Restricts to identity links that have the given operationType (add/delete).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operationType", required = false) String operationType,
        @Parameter(name = "assignerId", description = "Restricts to identity links that have the given assigner id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assignerId", required = false) String assignerId,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic identity links that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /history/identity-link-log/count : Get Identity Link Log Count
     * Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/identity-links/get-identity-link-query/) method.
     *
     * @param type Restricts to identity links that have the given type (candidate/assignee/owner). (optional)
     * @param userId Restricts to identity links that have the given user id. (optional)
     * @param groupId Restricts to identity links that have the given group id. (optional)
     * @param dateBefore Restricts to identity links that have the time before the given time. (optional)
     * @param dateAfter Restricts to identity links that have the time after the given time. (optional)
     * @param taskId Restricts to identity links that have the given task id. (optional)
     * @param processDefinitionId Restricts to identity links that have the given process definition id. (optional)
     * @param processDefinitionKey Restricts to identity links that have the given process definition key. (optional)
     * @param operationType Restricts to identity links that have the given operationType (add/delete). (optional)
     * @param assignerId Restricts to identity links that have the given assigner id. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. (optional)
     * @param withoutTenantId Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricIdentityLinksCount",
        summary = "Get Identity Link Log Count",
        description = "Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/identity-links/get-identity-link-query/) method.",
        tags = { "Historic Identity Link Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/identity-link-log/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricIdentityLinksCount(
        @Parameter(name = "type", description = "Restricts to identity links that have the given type (candidate/assignee/owner).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "userId", description = "Restricts to identity links that have the given user id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "groupId", description = "Restricts to identity links that have the given group id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "dateBefore", description = "Restricts to identity links that have the time before the given time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateBefore,
        @Parameter(name = "dateAfter", description = "Restricts to identity links that have the time after the given time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateAfter,
        @Parameter(name = "taskId", description = "Restricts to identity links that have the given task id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = false) String taskId,
        @Parameter(name = "processDefinitionId", description = "Restricts to identity links that have the given process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKey", description = "Restricts to identity links that have the given process definition key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,
        @Parameter(name = "operationType", description = "Restricts to identity links that have the given operationType (add/delete).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operationType", required = false) String operationType,
        @Parameter(name = "assignerId", description = "Restricts to identity links that have the given assigner id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assignerId", required = false) String assignerId,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic identity links that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId
    );

}
