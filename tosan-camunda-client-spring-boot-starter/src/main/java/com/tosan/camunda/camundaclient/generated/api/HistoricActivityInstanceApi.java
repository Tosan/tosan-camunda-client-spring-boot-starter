/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricActivityInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricActivityInstanceQueryDto;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Historic Activity Instance", description = "the Historic Activity Instance API")
public interface HistoricActivityInstanceApi {

    /**
     * GET /history/activity-instance/{id} : Get
     * Retrieves a historic activity instance by id, according to the &#x60;HistoricActivityInstance&#x60; interface in the engine.
     *
     * @param id The id of the historic activity instance to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Not Found Historic activity instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getHistoricActivityInstance",
        summary = "Get",
        description = "Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.",
        tags = { "Historic Activity Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricActivityInstanceDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found Historic activity instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/activity-instance/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<HistoricActivityInstanceDto> getHistoricActivityInstance(
        @Parameter(name = "id", description = "The id of the historic activity instance to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /history/activity-instance : Get List
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param activityInstanceId Filter by activity instance id. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param executionId Filter by the id of the execution that executed the activity instance. (optional)
     * @param activityId Filter by the activity id (according to BPMN 2.0 XML). (optional)
     * @param activityName Filter by the activity name (according to BPMN 2.0 XML). (optional)
     * @param activityType Filter by activity type. (optional)
     * @param taskAssignee Only include activity instances that are user tasks and assigned to a given user. (optional)
     * @param finished Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param unfinished Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param canceled Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param completeScope Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricActivityInstances",
        summary = "Get List",
        description = "Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.",
        tags = { "Historic Activity Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricActivityInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/activity-instance",
        produces = { "application/json" }
    )
    ResponseEntity<List<HistoricActivityInstanceDto>> getHistoricActivityInstances(
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "activityInstanceId", description = "Filter by activity instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "executionId", description = "Filter by the id of the execution that executed the activity instance.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "activityId", description = "Filter by the activity id (according to BPMN 2.0 XML).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "activityName", description = "Filter by the activity name (according to BPMN 2.0 XML).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityName", required = false) String activityName,
        @Parameter(name = "activityType", description = "Filter by activity type.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityType", required = false) String activityType,
        @Parameter(name = "taskAssignee", description = "Only include activity instances that are user tasks and assigned to a given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee,
        @Parameter(name = "finished", description = "Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finished", required = false) Boolean finished,
        @Parameter(name = "unfinished", description = "Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished,
        @Parameter(name = "canceled", description = "Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "canceled", required = false) Boolean canceled,
        @Parameter(name = "completeScope", description = "Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completeScope", required = false) Boolean completeScope,
        @Parameter(name = "startedBefore", description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter,
        @Parameter(name = "finishedBefore", description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedBefore,
        @Parameter(name = "finishedAfter", description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedAfter,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId
    );


    /**
     * GET /history/activity-instance/count : Get List Count
     * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
     *
     * @param activityInstanceId Filter by activity instance id. (optional)
     * @param processInstanceId Filter by process instance id. (optional)
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param executionId Filter by the id of the execution that executed the activity instance. (optional)
     * @param activityId Filter by the activity id (according to BPMN 2.0 XML). (optional)
     * @param activityName Filter by the activity name (according to BPMN 2.0 XML). (optional)
     * @param activityType Filter by activity type. (optional)
     * @param taskAssignee Only include activity instances that are user tasks and assigned to a given user. (optional)
     * @param finished Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param unfinished Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param canceled Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param completeScope Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set. (optional)
     * @param startedBefore Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param startedAfter Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedBefore Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param finishedAfter Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param tenantIdIn Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getHistoricActivityInstancesCount",
        summary = "Get List Count",
        description = "Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query/)  method.",
        tags = { "Historic Activity Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/activity-instance/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getHistoricActivityInstancesCount(
        @Parameter(name = "activityInstanceId", description = "Filter by activity instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId,
        @Parameter(name = "processInstanceId", description = "Filter by process instance id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "processDefinitionId", description = "Filter by process definition id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "executionId", description = "Filter by the id of the execution that executed the activity instance.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "activityId", description = "Filter by the activity id (according to BPMN 2.0 XML).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "activityName", description = "Filter by the activity name (according to BPMN 2.0 XML).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityName", required = false) String activityName,
        @Parameter(name = "activityType", description = "Filter by activity type.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityType", required = false) String activityType,
        @Parameter(name = "taskAssignee", description = "Only include activity instances that are user tasks and assigned to a given user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee,
        @Parameter(name = "finished", description = "Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finished", required = false) Boolean finished,
        @Parameter(name = "unfinished", description = "Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished,
        @Parameter(name = "canceled", description = "Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "canceled", required = false) Boolean canceled,
        @Parameter(name = "completeScope", description = "Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completeScope", required = false) Boolean completeScope,
        @Parameter(name = "startedBefore", description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedBefore,
        @Parameter(name = "startedAfter", description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startedAfter,
        @Parameter(name = "finishedBefore", description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedBefore,
        @Parameter(name = "finishedAfter", description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "finishedAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime finishedAfter,
        @Parameter(name = "tenantIdIn", description = "Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "withoutTenantId", description = "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId
    );


    /**
     * POST /history/activity-instance : Get List (POST)
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param historicActivityInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricActivityInstances",
        summary = "Get List (POST)",
        description = "Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.",
        tags = { "Historic Activity Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricActivityInstanceDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/activity-instance",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<HistoricActivityInstanceDto>> queryHistoricActivityInstances(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "HistoricActivityInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricActivityInstanceQueryDto historicActivityInstanceQueryDto
    );


    /**
     * POST /history/activity-instance/count : Get List Count (POST)
     * Queries for the number of historic activity instances that fulfill the given parameters.
     *
     * @param historicActivityInstanceQueryDto  (optional)
     * @return Request successful. (status code 200)
     *         or Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryHistoricActivityInstancesCount",
        summary = "Get List Count (POST)",
        description = "Queries for the number of historic activity instances that fulfill the given parameters.",
        tags = { "Historic Activity Instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/history/activity-instance/count",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CountResultDto> queryHistoricActivityInstancesCount(
        @Parameter(name = "HistoricActivityInstanceQueryDto", description = "") @Valid @RequestBody(required = false) HistoricActivityInstanceQueryDto historicActivityInstanceQueryDto
    );

}
