/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricActivityInstanceDto;
import com.tosan.camunda.camundaclient.generated.model.HistoricActivityInstanceQueryDto;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface HistoricActivityInstanceApi {

    Logger log = LoggerFactory.getLogger(HistoricActivityInstanceApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Get", description = "Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.", tags={ "Historic Activity Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HistoricActivityInstanceDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found Historic activity instance with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/activity-instance/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<HistoricActivityInstanceDto> getHistoricActivityInstance(@Parameter(in = ParameterIn.PATH, description = "The id of the historic activity instance to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get List", description = "Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.", tags={ "Historic Activity Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricActivityInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/activity-instance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<HistoricActivityInstanceDto>> getHistoricActivityInstances(@Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "activityInstanceId", "instanceId", "executionId", "activityId", "activityName", "activityType", "startTime", "endTime", "duration", "definitionId", "occurrence", "tenantId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.QUERY, description = "Filter by activity instance id." ,schema=@Schema()) @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition id." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the execution that executed the activity instance." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the activity id (according to BPMN 2.0 XML)." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the activity name (according to BPMN 2.0 XML)." ,schema=@Schema()) @Valid @RequestParam(value = "activityName", required = false) String activityName, @Parameter(in = ParameterIn.QUERY, description = "Filter by activity type." ,schema=@Schema()) @Valid @RequestParam(value = "activityType", required = false) String activityType, @Parameter(in = ParameterIn.QUERY, description = "Only include activity instances that are user tasks and assigned to a given user." ,schema=@Schema()) @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee, @Parameter(in = ParameterIn.QUERY, description = "Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "finished", required = false) Boolean finished, @Parameter(in = ParameterIn.QUERY, description = "Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished, @Parameter(in = ParameterIn.QUERY, description = "Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "canceled", required = false) Boolean canceled, @Parameter(in = ParameterIn.QUERY, description = "Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "completeScope", required = false) Boolean completeScope, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedBefore", required = false) OffsetDateTime startedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedAfter", required = false) OffsetDateTime startedAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedBefore", required = false) OffsetDateTime finishedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedAfter", required = false) OffsetDateTime finishedAfter, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @Operation(summary = "Get List Count", description = "Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query/)  method.", tags={ "Historic Activity Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/activity-instance/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getHistoricActivityInstancesCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by activity instance id." ,schema=@Schema()) @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process instance id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Filter by process definition id." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the execution that executed the activity instance." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the activity id (according to BPMN 2.0 XML)." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Filter by the activity name (according to BPMN 2.0 XML)." ,schema=@Schema()) @Valid @RequestParam(value = "activityName", required = false) String activityName, @Parameter(in = ParameterIn.QUERY, description = "Filter by activity type." ,schema=@Schema()) @Valid @RequestParam(value = "activityType", required = false) String activityType, @Parameter(in = ParameterIn.QUERY, description = "Only include activity instances that are user tasks and assigned to a given user." ,schema=@Schema()) @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee, @Parameter(in = ParameterIn.QUERY, description = "Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "finished", required = false) Boolean finished, @Parameter(in = ParameterIn.QUERY, description = "Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "unfinished", required = false) Boolean unfinished, @Parameter(in = ParameterIn.QUERY, description = "Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "canceled", required = false) Boolean canceled, @Parameter(in = ParameterIn.QUERY, description = "Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set." ,schema=@Schema()) @Valid @RequestParam(value = "completeScope", required = false) Boolean completeScope, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedBefore", required = false) OffsetDateTime startedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "startedAfter", required = false) OffsetDateTime startedAfter, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedBefore", required = false) OffsetDateTime finishedBefore, @Parameter(in = ParameterIn.QUERY, description = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "finishedAfter", required = false) OffsetDateTime finishedAfter, @Parameter(in = ParameterIn.QUERY, description = "Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @Operation(summary = "Get List (POST)", description = "Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.17/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.", tags={ "Historic Activity Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoricActivityInstanceDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/activity-instance",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<HistoricActivityInstanceDto>> queryHistoricActivityInstances(@Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody HistoricActivityInstanceQueryDto body);


    @Operation(summary = "Get List Count (POST)", description = "Queries for the number of historic activity instances that fulfill the given parameters.", tags={ "Historic Activity Instance" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/history/activity-instance/count",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CountResultDto> queryHistoricActivityInstancesCount(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody HistoricActivityInstanceQueryDto body);

}

