/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.MetricsIntervalResultDto;
import com.tosan.camunda.camundaclient.generated.model.MetricsResultDto;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Metrics", description = "the Metrics API")
public interface MetricsApi {

    /**
     * DELETE /metrics/task-worker : Delete Task Worker Metrics
     * Deletes all task worker metrics prior to the given date or all if no date is provided.
     *
     * @param date The date prior to which all task worker metrics should be deleted. (optional)
     * @return Request successful. (status code 204)
     *         or If the user who performs the operation is not a &lt;b&gt;camunda-admin&lt;/b&gt; user. (status code 403)
     */
    @Operation(
        operationId = "deleteTaskMetrics",
        summary = "Delete Task Worker Metrics",
        description = "Deletes all task worker metrics prior to the given date or all if no date is provided.",
        tags = { "Metrics" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "403", description = "If the user who performs the operation is not a <b>camunda-admin</b> user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/metrics/task-worker",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteTaskMetrics(
        @Parameter(name = "date", description = "The date prior to which all task worker metrics should be deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime date
    );


    /**
     * GET /metrics/{metrics-name}/sum : Get Sum
     * Retrieves the &#x60;sum&#x60; (count) for a given metric.
     *
     * @param metricsName The name of the metric. (required)
     * @param startDate The start date (inclusive). (optional)
     * @param endDate The end date (exclusive). (optional)
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "getMetrics",
        summary = "Get Sum",
        description = "Retrieves the `sum` (count) for a given metric.",
        tags = { "Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MetricsResultDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/metrics/{metrics-name}/sum",
        produces = { "application/json" }
    )
    ResponseEntity<MetricsResultDto> getMetrics(
        @Parameter(name = "metrics-name", description = "The name of the metric.", required = true, in = ParameterIn.PATH) @PathVariable("metrics-name") String metricsName,
        @Parameter(name = "startDate", description = "The start date (inclusive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @Parameter(name = "endDate", description = "The end date (exclusive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    );


    /**
     * GET /metrics : Get Metrics in Interval
     * Retrieves a list of metrics, aggregated for a given interval.
     *
     * @param name The name of the metric. (optional)
     * @param reporter The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.17/reference/deployment-descriptors/tags/process-engine/#hostname). (optional)
     * @param startDate The start date (inclusive). (optional)
     * @param endDate The end date (exclusive). (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param interval The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds). (optional, default to 900)
     * @param aggregateByReporter Aggregate metrics by reporter. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. (status code 400)
     */
    @Operation(
        operationId = "interval",
        summary = "Get Metrics in Interval",
        description = "Retrieves a list of metrics, aggregated for a given interval.",
        tags = { "Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MetricsIntervalResultDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/metrics",
        produces = { "application/json" }
    )
    ResponseEntity<List<MetricsIntervalResultDto>> interval(
        @Parameter(name = "name", description = "The name of the metric.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "reporter", description = "The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.17/reference/deployment-descriptors/tags/process-engine/#hostname).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "reporter", required = false) String reporter,
        @Parameter(name = "startDate", description = "The start date (inclusive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @Parameter(name = "endDate", description = "The end date (exclusive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "interval", description = "The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "interval", required = false, defaultValue = "900") String interval,
        @Parameter(name = "aggregateByReporter", description = "Aggregate metrics by reporter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "aggregateByReporter", required = false) String aggregateByReporter
    );

}
