/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AnnotationDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.IncidentDto;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface IncidentApi {

    Logger log = LoggerFactory.getLogger(IncidentApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Clear Incident Annotation", description = "Clears the annotation of an incident with given id.", tags={ "Incident" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "Returned if no incident can be found for the given id.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/incident/{id}/annotation",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> clearIncidentAnnotation(@Parameter(in = ParameterIn.PATH, description = "The id of the incident to clear the annotation at.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Incident", description = "Retrieves an incident by ID.", tags={ "Incident" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IncidentDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Returned if an incident with given id does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/incident/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IncidentDto> getIncident(@Parameter(in = ParameterIn.PATH, description = "The id of the incident to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get List", description = "Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.17/reference/rest/incident/get-query-count/) method.", tags={ "Incident" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IncidentDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/incident",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IncidentDto>> getIncidents(@Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given id." ,schema=@Schema()) @Valid @RequestParam(value = "incidentId", required = false) String incidentId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types." ,schema=@Schema()) @Valid @RequestParam(value = "incidentType", required = false) String incidentType, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given incident message." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or contains (`%string%`)." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to a process definition with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to a process instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to an execution with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "incidentTimestampBefore", required = false) OffsetDateTime incidentTimestampBefore, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "incidentTimestampAfter", required = false) OffsetDateTime incidentTimestampAfter, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that were created due to the failure of an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given incident id as cause incident." ,schema=@Schema()) @Valid @RequestParam(value = "causeIncidentId", required = false) String causeIncidentId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given incident id as root cause incident." ,schema=@Schema()) @Valid @RequestParam(value = "rootCauseIncidentId", required = false) String rootCauseIncidentId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given parameter set as configuration." ,schema=@Schema()) @Valid @RequestParam(value = "configuration", required = false) String _configuration, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have one of the given comma-separated tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have one of the given comma-separated job definition ids." ,schema=@Schema()) @Valid @RequestParam(value = "jobDefinitionIdIn", required = false) String jobDefinitionIdIn, @Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "incidentId", "incidentMessage", "incidentTimestamp", "incidentType", "executionId", "activityId", "processInstanceId", "processDefinitionId", "causeIncidentId", "rootCauseIncidentId", "configuration", "tenantId" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults);


    @Operation(summary = "Get List Count", description = "Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.17/reference/rest/incident/get-query/) method.", tags={ "Incident" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/incident/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getIncidentsCount(@Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given id." ,schema=@Schema()) @Valid @RequestParam(value = "incidentId", required = false) String incidentId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types." ,schema=@Schema()) @Valid @RequestParam(value = "incidentType", required = false) String incidentType, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given incident message." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or contains (`%string%`)." ,schema=@Schema()) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to a process definition with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list." ,schema=@Schema()) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to a process instance with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to an execution with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "executionId", required = false) String executionId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "incidentTimestampBefore", required = false) OffsetDateTime incidentTimestampBefore, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`." ,schema=@Schema()) @Valid @RequestParam(value = "incidentTimestampAfter", required = false) OffsetDateTime incidentTimestampAfter, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that belong to an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "activityId", required = false) String activityId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that were created due to the failure of an activity with the given id." ,schema=@Schema()) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given incident id as cause incident." ,schema=@Schema()) @Valid @RequestParam(value = "causeIncidentId", required = false) String causeIncidentId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given incident id as root cause incident." ,schema=@Schema()) @Valid @RequestParam(value = "rootCauseIncidentId", required = false) String rootCauseIncidentId, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have the given parameter set as configuration." ,schema=@Schema()) @Valid @RequestParam(value = "configuration", required = false) String _configuration, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have one of the given comma-separated tenant ids." ,schema=@Schema()) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn, @Parameter(in = ParameterIn.QUERY, description = "Restricts to incidents that have one of the given comma-separated job definition ids." ,schema=@Schema()) @Valid @RequestParam(value = "jobDefinitionIdIn", required = false) String jobDefinitionIdIn);


    @Operation(summary = "Resolve Incident", description = "Resolves an incident with given id.", tags={ "Incident" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "404", description = "Returned if an incident with given id does not exist.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if an incident is not related to any execution or an incident is of type `failedJob` or `failedExternalTask`. To resolve such an incident, please refer to the [Incident Types](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) section.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/incident/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> resolveIncident(@Parameter(in = ParameterIn.PATH, description = "The id of the incident to be resolved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Set Incident Annotation", description = "Sets the annotation of an incident with given id.", tags={ "Incident" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "400", description = "Returned if no incident can be found for the given id.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/incident/{id}/annotation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setIncidentAnnotation(@Parameter(in = ParameterIn.PATH, description = "The id of the incident to clear the annotation at.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AnnotationDto body);

}

