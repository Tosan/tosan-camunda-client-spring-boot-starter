/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.AnnotationDto;
import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import org.springframework.format.annotation.DateTimeFormat;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.IncidentDto;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Incident", description = "the Incident API")
public interface IncidentApi {

    /**
     * DELETE /incident/{id}/annotation : Clear Incident Annotation
     * Clears the annotation of an incident with given id.
     *
     * @param id The id of the incident to clear the annotation at. (required)
     * @return Request successful. (status code 204)
     *         or Returned if no incident can be found for the given id. (status code 400)
     */
    @Operation(
        operationId = "clearIncidentAnnotation",
        summary = "Clear Incident Annotation",
        description = "Clears the annotation of an incident with given id.",
        tags = { "Incident" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if no incident can be found for the given id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/incident/{id}/annotation",
        produces = { "application/json" }
    )
    ResponseEntity<Void> clearIncidentAnnotation(
        @Parameter(name = "id", description = "The id of the incident to clear the annotation at.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /incident/{id} : Get Incident
     * Retrieves an incident by ID.
     *
     * @param id The id of the incident to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Returned if an incident with given id does not exist. (status code 404)
     */
    @Operation(
        operationId = "getIncident",
        summary = "Get Incident",
        description = "Retrieves an incident by ID.",
        tags = { "Incident" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IncidentDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if an incident with given id does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/incident/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<IncidentDto> getIncident(
        @Parameter(name = "id", description = "The id of the incident to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /incident : Get List
     * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.17/reference/rest/incident/get-query-count/) method.
     *
     * @param incidentId Restricts to incidents that have the given id. (optional)
     * @param incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Restricts to incidents that have the given incident message. (optional)
     * @param incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param processDefinitionId Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param processDefinitionKeyIn Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param processInstanceId Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param executionId Restricts to incidents that belong to an execution with the given id. (optional)
     * @param incidentTimestampBefore Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param incidentTimestampAfter Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param activityId Restricts to incidents that belong to an activity with the given id. (optional)
     * @param failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param causeIncidentId Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param _configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60;. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getIncidents",
        summary = "Get List",
        description = "Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.17/reference/rest/incident/get-query-count/) method.",
        tags = { "Incident" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IncidentDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/incident",
        produces = { "application/json" }
    )
    ResponseEntity<List<IncidentDto>> getIncidents(
        @Parameter(name = "incidentId", description = "Restricts to incidents that have the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentId", required = false) String incidentId,
        @Parameter(name = "incidentType", description = "Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentMessage", description = "Restricts to incidents that have the given incident message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or contains (`%string%`).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "processDefinitionId", description = "Restricts to incidents that belong to a process definition with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKeyIn", description = "Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "processInstanceId", description = "Restricts to incidents that belong to a process instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "executionId", description = "Restricts to incidents that belong to an execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "incidentTimestampBefore", description = "Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentTimestampBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime incidentTimestampBefore,
        @Parameter(name = "incidentTimestampAfter", description = "Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentTimestampAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime incidentTimestampAfter,
        @Parameter(name = "activityId", description = "Restricts to incidents that belong to an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "failedActivityId", description = "Restricts to incidents that were created due to the failure of an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId,
        @Parameter(name = "causeIncidentId", description = "Restricts to incidents that have the given incident id as cause incident.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "causeIncidentId", required = false) String causeIncidentId,
        @Parameter(name = "rootCauseIncidentId", description = "Restricts to incidents that have the given incident id as root cause incident.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootCauseIncidentId", required = false) String rootCauseIncidentId,
        @Parameter(name = "configuration", description = "Restricts to incidents that have the given parameter set as configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "configuration", required = false) String _configuration,
        @Parameter(name = "tenantIdIn", description = "Restricts to incidents that have one of the given comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "jobDefinitionIdIn", description = "Restricts to incidents that have one of the given comma-separated job definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionIdIn", required = false) String jobDefinitionIdIn,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * GET /incident/count : Get List Count
     * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.17/reference/rest/incident/get-query/) method.
     *
     * @param incidentId Restricts to incidents that have the given id. (optional)
     * @param incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Restricts to incidents that have the given incident message. (optional)
     * @param incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param processDefinitionId Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param processDefinitionKeyIn Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param processInstanceId Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param executionId Restricts to incidents that belong to an execution with the given id. (optional)
     * @param incidentTimestampBefore Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param incidentTimestampAfter Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param activityId Restricts to incidents that belong to an activity with the given id. (optional)
     * @param failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param causeIncidentId Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param _configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getIncidentsCount",
        summary = "Get List Count",
        description = "Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.17/reference/rest/incident/get-query/) method.",
        tags = { "Incident" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/incident/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getIncidentsCount(
        @Parameter(name = "incidentId", description = "Restricts to incidents that have the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentId", required = false) String incidentId,
        @Parameter(name = "incidentType", description = "Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentType", required = false) String incidentType,
        @Parameter(name = "incidentMessage", description = "Restricts to incidents that have the given incident message.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessage", required = false) String incidentMessage,
        @Parameter(name = "incidentMessageLike", description = "Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or contains (`%string%`).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentMessageLike", required = false) String incidentMessageLike,
        @Parameter(name = "processDefinitionId", description = "Restricts to incidents that belong to a process definition with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,
        @Parameter(name = "processDefinitionKeyIn", description = "Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processDefinitionKeyIn", required = false) String processDefinitionKeyIn,
        @Parameter(name = "processInstanceId", description = "Restricts to incidents that belong to a process instance with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,
        @Parameter(name = "executionId", description = "Restricts to incidents that belong to an execution with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "executionId", required = false) String executionId,
        @Parameter(name = "incidentTimestampBefore", description = "Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentTimestampBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime incidentTimestampBefore,
        @Parameter(name = "incidentTimestampAfter", description = "Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "incidentTimestampAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime incidentTimestampAfter,
        @Parameter(name = "activityId", description = "Restricts to incidents that belong to an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityId", required = false) String activityId,
        @Parameter(name = "failedActivityId", description = "Restricts to incidents that were created due to the failure of an activity with the given id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "failedActivityId", required = false) String failedActivityId,
        @Parameter(name = "causeIncidentId", description = "Restricts to incidents that have the given incident id as cause incident.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "causeIncidentId", required = false) String causeIncidentId,
        @Parameter(name = "rootCauseIncidentId", description = "Restricts to incidents that have the given incident id as root cause incident.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rootCauseIncidentId", required = false) String rootCauseIncidentId,
        @Parameter(name = "configuration", description = "Restricts to incidents that have the given parameter set as configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "configuration", required = false) String _configuration,
        @Parameter(name = "tenantIdIn", description = "Restricts to incidents that have one of the given comma-separated tenant ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantIdIn", required = false) String tenantIdIn,
        @Parameter(name = "jobDefinitionIdIn", description = "Restricts to incidents that have one of the given comma-separated job definition ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jobDefinitionIdIn", required = false) String jobDefinitionIdIn
    );


    /**
     * DELETE /incident/{id} : Resolve Incident
     * Resolves an incident with given id.
     *
     * @param id The id of the incident to be resolved. (required)
     * @return Request successful. (status code 204)
     *         or Returned if an incident with given id does not exist. (status code 404)
     *         or Returned if an incident is not related to any execution or an incident is of type &#x60;failedJob&#x60; or &#x60;failedExternalTask&#x60;. To resolve such an incident, please refer to the [Incident Types](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) section. (status code 400)
     */
    @Operation(
        operationId = "resolveIncident",
        summary = "Resolve Incident",
        description = "Resolves an incident with given id.",
        tags = { "Incident" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "404", description = "Returned if an incident with given id does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if an incident is not related to any execution or an incident is of type `failedJob` or `failedExternalTask`. To resolve such an incident, please refer to the [Incident Types](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) section.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/incident/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> resolveIncident(
        @Parameter(name = "id", description = "The id of the incident to be resolved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * PUT /incident/{id}/annotation : Set Incident Annotation
     * Sets the annotation of an incident with given id.
     *
     * @param id The id of the incident to clear the annotation at. (required)
     * @param annotationDto  (optional)
     * @return Request successful. (status code 204)
     *         or Returned if no incident can be found for the given id. (status code 400)
     */
    @Operation(
        operationId = "setIncidentAnnotation",
        summary = "Set Incident Annotation",
        description = "Sets the annotation of an incident with given id.",
        tags = { "Incident" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "400", description = "Returned if no incident can be found for the given id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/incident/{id}/annotation",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> setIncidentAnnotation(
        @Parameter(name = "id", description = "The id of the incident to clear the annotation at.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AnnotationDto", description = "") @Valid @RequestBody(required = false) AnnotationDto annotationDto
    );

}
