/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.SchemaLogEntryDto;
import com.tosan.camunda.camundaclient.generated.model.SchemaLogQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Schema Log", description = "the Schema Log API")
public interface SchemaLogApi {

    /**
     * GET /schema/log : Get List
     * Queries for schema log entries that fulfill given parameters.
     *
     * @param version Only return schema log entries with a specific version. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return Request successful. **Note**: In order to get any results a user of group &#x60;camunda-admin&#x60; must be authenticated. (status code 200)
     */
    @Operation(
        operationId = "getSchemaLog",
        summary = "Get List",
        description = "Queries for schema log entries that fulfill given parameters.",
        tags = { "Schema Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. **Note**: In order to get any results a user of group `camunda-admin` must be authenticated.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SchemaLogEntryDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/schema/log",
        produces = { "application/json" }
    )
    ResponseEntity<List<SchemaLogEntryDto>> getSchemaLog(
        @Parameter(name = "version", description = "Only return schema log entries with a specific version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) String version,
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults
    );


    /**
     * POST /schema/log : Get List (POST)
     * Queries for schema log entries that fulfill given parameters.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param schemaLogQueryDto  (optional)
     * @return Request successful. **Note**: In order to get any results a user of group camunda-admin must be authenticated. (status code 200)
     */
    @Operation(
        operationId = "querySchemaLog",
        summary = "Get List (POST)",
        description = "Queries for schema log entries that fulfill given parameters.",
        tags = { "Schema Log" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful. **Note**: In order to get any results a user of group camunda-admin must be authenticated.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SchemaLogEntryDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/schema/log",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<SchemaLogEntryDto>> querySchemaLog(
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "SchemaLogQueryDto", description = "") @Valid @RequestBody(required = false) SchemaLogQueryDto schemaLogQueryDto
    );

}
