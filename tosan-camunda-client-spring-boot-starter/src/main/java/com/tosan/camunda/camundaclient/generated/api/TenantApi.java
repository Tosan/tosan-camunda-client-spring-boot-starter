/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.ResourceOptionsDto;
import com.tosan.camunda.camundaclient.generated.model.TenantDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-17T19:18:35.625055400+04:30[Asia/Tehran]")
@Validated
public interface TenantApi {

    Logger log = LoggerFactory.getLogger(TenantApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "Tenant Group Membership Resource Options", description = "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/tenant/{id}/group-members",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> availableTenantGroupMembersOperations(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Tenant Resource Options", description = "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/tenant/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> availableTenantInstanceOperations(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Tenant Resource Options", description = "The `/tenant` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/tenant",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> availableTenantResourceOperations();


    @Operation(summary = "Tenant User Membership Resource Options", description = "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))) })
    @RequestMapping(value = "/tenant/{id}/user-members",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<ResourceOptionsDto> availableTenantUserMembersOperations(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Create Tenant Group Membership", description = "Creates a membership between a tenant and a group.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}/group-members/{groupId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> createGroupMembership(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the group.", required=true, schema=@Schema()) @PathVariable("groupId") String groupId);


    @Operation(summary = "Create Tenant", description = "Create a new tenant.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The tenant could not be created due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/create",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createTenant(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody TenantDto body);


    @Operation(summary = "Create Tenant User Membership", description = "Creates a membership between a tenant and an user.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}/user-members/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> createUserMembership(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the user.", required=true, schema=@Schema()) @PathVariable("userId") String userId);


    @Operation(summary = "Create Tenant Group Membership", description = "Creates a membership between a tenant and a group.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}/group-members/{groupId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGroupMembership(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the group.", required=true, schema=@Schema()) @PathVariable("groupId") String groupId);


    @Operation(summary = "Delete Tenant", description = "Deletes a tenant by id.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Tenant cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTenant(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant to be deleted.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Delete a Tenant User Membership", description = "Deletes a membership between a tenant and an user.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "In case an error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}/user-members/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserMembership(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "The id of the user.", required=true, schema=@Schema()) @PathVariable("userId") String userId);


    @Operation(summary = "Get Tenant", description = "Retrieves a tenant.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TenantDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Tenant with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TenantDto> getTenant(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant to be retrieved.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Tenant Count", description = "Query for tenants using a list of parameters and retrieves the count.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CountResultDto> getTenantCount(@Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the tenant." ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name of the tenant." ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "nameLike", required = false) String nameLike, @Parameter(in = ParameterIn.QUERY, description = "Select only tenants where the given user is a member of." ,schema=@Schema()) @Valid @RequestParam(value = "userMember", required = false) String userMember, @Parameter(in = ParameterIn.QUERY, description = "Select only tenants where the given group is a member of." ,schema=@Schema()) @Valid @RequestParam(value = "groupMember", required = false) String groupMember, @Parameter(in = ParameterIn.QUERY, description = "Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the `userMember` parameter. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "includingGroupsOfUser", required = false) Boolean includingGroupsOfUser);


    @Operation(summary = "Get Tenants", description = "Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.17/reference/rest/tenant/get-query-count/) method.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request successful.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TenantDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TenantDto>> queryTenants(@Parameter(in = ParameterIn.QUERY, description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter." ,schema=@Schema(allowableValues={ "id", "name" }
)) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter." ,schema=@Schema(allowableValues={ "asc", "desc" }
)) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the index of the first result to return." ,schema=@Schema()) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult, @Parameter(in = ParameterIn.QUERY, description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left." ,schema=@Schema()) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults, @Parameter(in = ParameterIn.QUERY, description = "Filter by the id of the tenant." ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name of the tenant." ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Filter by the name that the parameter is a substring of." ,schema=@Schema()) @Valid @RequestParam(value = "nameLike", required = false) String nameLike, @Parameter(in = ParameterIn.QUERY, description = "Select only tenants where the given user is a member of." ,schema=@Schema()) @Valid @RequestParam(value = "userMember", required = false) String userMember, @Parameter(in = ParameterIn.QUERY, description = "Select only tenants where the given group is a member of." ,schema=@Schema()) @Valid @RequestParam(value = "groupMember", required = false) String groupMember, @Parameter(in = ParameterIn.QUERY, description = "Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the `userMember` parameter. Value may only be `true`, as `false` is the default behavior." ,schema=@Schema()) @Valid @RequestParam(value = "includingGroupsOfUser", required = false) Boolean includingGroupsOfUser);


    @Operation(summary = "Update Tenant", description = "Updates a given tenant.", tags={ "Tenant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Request successful."),
        
        @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "404", description = "If the tenant with the requested Id cannot be found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))),
        
        @ApiResponse(responseCode = "500", description = "The tenant could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))) })
    @RequestMapping(value = "/tenant/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateTenant(@Parameter(in = ParameterIn.PATH, description = "The id of the tenant.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody TenantDto body);

}

