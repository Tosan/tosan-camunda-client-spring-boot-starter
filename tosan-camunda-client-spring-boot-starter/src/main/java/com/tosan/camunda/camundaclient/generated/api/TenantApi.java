/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tosan.camunda.camundaclient.generated.api;

import com.tosan.camunda.camundaclient.generated.model.CountResultDto;
import com.tosan.camunda.camundaclient.generated.model.ExceptionDto;
import com.tosan.camunda.camundaclient.generated.model.ResourceOptionsDto;
import com.tosan.camunda.camundaclient.generated.model.TenantDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-28T23:54:11.217695800+03:30[GMT+03:30]")
@Validated
@Tag(name = "Tenant", description = "the Tenant API")
public interface TenantApi {

    /**
     * OPTIONS /tenant/{id}/group-members : Tenant Group Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the tenant (required)
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableTenantGroupMembersOperations",
        summary = "Tenant Group Membership Resource Options",
        description = "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/tenant/{id}/group-members",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableTenantGroupMembersOperations(
        @Parameter(name = "id", description = "The id of the tenant", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * OPTIONS /tenant/{id} : Tenant Resource Options
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant/{id}&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the tenant (required)
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableTenantInstanceOperations",
        summary = "Tenant Resource Options",
        description = "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/tenant/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableTenantInstanceOperations(
        @Parameter(name = "id", description = "The id of the tenant", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * OPTIONS /tenant : Tenant Resource Options
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableTenantResourceOperations",
        summary = "Tenant Resource Options",
        description = "The `/tenant` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/tenant",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableTenantResourceOperations(
        
    );


    /**
     * OPTIONS /tenant/{id}/user-members : Tenant User Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the tenant (required)
     * @return Request successful. (status code 200)
     */
    @Operation(
        operationId = "availableTenantUserMembersOperations",
        summary = "Tenant User Membership Resource Options",
        description = "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceOptionsDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.OPTIONS,
        value = "/tenant/{id}/user-members",
        produces = { "application/json" }
    )
    ResponseEntity<ResourceOptionsDto> availableTenantUserMembersOperations(
        @Parameter(name = "id", description = "The id of the tenant", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * PUT /tenant/{id}/group-members/{groupId} : Create Tenant Group Membership
     * Creates a membership between a tenant and a group.
     *
     * @param id The id of the tenant. (required)
     * @param groupId The id of the group. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "createGroupMembership",
        summary = "Create Tenant Group Membership",
        description = "Creates a membership between a tenant and a group.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tenant/{id}/group-members/{groupId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> createGroupMembership(
        @Parameter(name = "id", description = "The id of the tenant.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "groupId", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("groupId") String groupId
    );


    /**
     * POST /tenant/create : Create Tenant
     * Create a new tenant.
     *
     * @param tenantDto  (optional)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or The tenant could not be created due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "createTenant",
        summary = "Create Tenant",
        description = "Create a new tenant.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The tenant could not be created due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tenant/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> createTenant(
        @Parameter(name = "TenantDto", description = "") @Valid @RequestBody(required = false) TenantDto tenantDto
    );


    /**
     * PUT /tenant/{id}/user-members/{userId} : Create Tenant User Membership
     * Creates a membership between a tenant and an user.
     *
     * @param id The id of the tenant. (required)
     * @param userId The id of the user. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "createUserMembership",
        summary = "Create Tenant User Membership",
        description = "Creates a membership between a tenant and an user.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tenant/{id}/user-members/{userId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> createUserMembership(
        @Parameter(name = "id", description = "The id of the tenant.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "userId", description = "The id of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    );


    /**
     * DELETE /tenant/{id}/group-members/{groupId} : Create Tenant Group Membership
     * Creates a membership between a tenant and a group.
     *
     * @param id The id of the tenant. (required)
     * @param groupId The id of the group. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "deleteGroupMembership",
        summary = "Create Tenant Group Membership",
        description = "Creates a membership between a tenant and a group.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "In case an internal error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tenant/{id}/group-members/{groupId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteGroupMembership(
        @Parameter(name = "id", description = "The id of the tenant.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "groupId", description = "The id of the group.", required = true, in = ParameterIn.PATH) @PathVariable("groupId") String groupId
    );


    /**
     * DELETE /tenant/{id} : Delete Tenant
     * Deletes a tenant by id.
     *
     * @param id The id of the tenant to be deleted. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or Tenant cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "deleteTenant",
        summary = "Delete Tenant",
        description = "Deletes a tenant by id.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tenant cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tenant/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteTenant(
        @Parameter(name = "id", description = "The id of the tenant to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * DELETE /tenant/{id}/user-members/{userId} : Delete a Tenant User Membership
     * Deletes a membership between a tenant and an user.
     *
     * @param id The id of the tenant. (required)
     * @param userId The id of the user. (required)
     * @return Request successful. This method returns no content. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or In case an error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "deleteUserMembership",
        summary = "Delete a Tenant User Membership",
        description = "Deletes a membership between a tenant and an user.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful. This method returns no content."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "In case an error occurs. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tenant/{id}/user-members/{userId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteUserMembership(
        @Parameter(name = "id", description = "The id of the tenant.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "userId", description = "The id of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    );


    /**
     * GET /tenant/{id} : Get Tenant
     * Retrieves a tenant.
     *
     * @param id The id of the tenant to be retrieved. (required)
     * @return Request successful. (status code 200)
     *         or Tenant with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 404)
     */
    @Operation(
        operationId = "getTenant",
        summary = "Get Tenant",
        description = "Retrieves a tenant.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TenantDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tenant with given id does not exist. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tenant/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<TenantDto> getTenant(
        @Parameter(name = "id", description = "The id of the tenant to be retrieved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /tenant/count : Get Tenant Count
     * Query for tenants using a list of parameters and retrieves the count.
     *
     * @param id Filter by the id of the tenant. (optional)
     * @param name Filter by the name of the tenant. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param userMember Select only tenants where the given user is a member of. (optional)
     * @param groupMember Select only tenants where the given group is a member of. (optional)
     * @param includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "getTenantCount",
        summary = "Get Tenant Count",
        description = "Query for tenants using a list of parameters and retrieves the count.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CountResultDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tenant/count",
        produces = { "application/json" }
    )
    ResponseEntity<CountResultDto> getTenantCount(
        @Parameter(name = "id", description = "Filter by the id of the tenant.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) String id,
        @Parameter(name = "name", description = "Filter by the name of the tenant.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by the name that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "userMember", description = "Select only tenants where the given user is a member of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userMember", required = false) String userMember,
        @Parameter(name = "groupMember", description = "Select only tenants where the given group is a member of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupMember", required = false) String groupMember,
        @Parameter(name = "includingGroupsOfUser", description = "Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the `userMember` parameter. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includingGroupsOfUser", required = false) Boolean includingGroupsOfUser
    );


    /**
     * GET /tenant : Get Tenants
     * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.17/reference/rest/tenant/get-query-count/) method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param id Filter by the id of the tenant. (optional)
     * @param name Filter by the name of the tenant. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param userMember Select only tenants where the given user is a member of. (optional)
     * @param groupMember Select only tenants where the given group is a member of. (optional)
     * @param includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return Request successful. (status code 200)
     *         or Returned if some of the query parameters are invalid, for example if a &#x60;sortOrder&#x60; parameter is supplied, but no &#x60;sortBy&#x60; is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 400)
     */
    @Operation(
        operationId = "queryTenants",
        summary = "Get Tenants",
        description = "Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.17/reference/rest/tenant/get-query-count/) method.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TenantDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied, but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tenant",
        produces = { "application/json" }
    )
    ResponseEntity<List<TenantDto>> queryTenants(
        @Parameter(name = "sortBy", description = "Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortOrder", description = "Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
        @Parameter(name = "firstResult", description = "Pagination of results. Specifies the index of the first result to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,
        @Parameter(name = "maxResults", description = "Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "id", description = "Filter by the id of the tenant.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) String id,
        @Parameter(name = "name", description = "Filter by the name of the tenant.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "nameLike", description = "Filter by the name that the parameter is a substring of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nameLike", required = false) String nameLike,
        @Parameter(name = "userMember", description = "Select only tenants where the given user is a member of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userMember", required = false) String userMember,
        @Parameter(name = "groupMember", description = "Select only tenants where the given group is a member of.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupMember", required = false) String groupMember,
        @Parameter(name = "includingGroupsOfUser", description = "Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the `userMember` parameter. Value may only be `true`, as `false` is the default behavior.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includingGroupsOfUser", required = false) Boolean includingGroupsOfUser
    );


    /**
     * PUT /tenant/{id} : Update Tenant
     * Updates a given tenant.
     *
     * @param id The id of the tenant. (required)
     * @param tenantDto  (optional)
     * @return Request successful. (status code 204)
     *         or Identity service is read-only. (status code 403)
     *         or If the tenant with the requested Id cannot be found. (status code 404)
     *         or The tenant could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format. (status code 500)
     */
    @Operation(
        operationId = "updateTenant",
        summary = "Update Tenant",
        description = "Updates a given tenant.",
        tags = { "Tenant" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Request successful."),
            @ApiResponse(responseCode = "403", description = "Identity service is read-only.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "If the tenant with the requested Id cannot be found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The tenant could not be updated due to an internal server error. See the [Introduction](https://docs.camunda.org/manual/7.17/reference/rest/overview/#error-handling) for the error response format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tenant/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateTenant(
        @Parameter(name = "id", description = "The id of the tenant.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TenantDto", description = "") @Valid @RequestBody(required = false) TenantDto tenantDto
    );

}
